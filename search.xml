<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>操作系统面试题</title>
    <url>/2020/05/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="17e810fab209a551c93554c1d885e3360c666607c3031d78ef53d0c0004f2e56">191d24a9a000a93771e06f9ad877c3d3d3f45f16a967bab6ec4d7f450ec590aec3e93ece295f8aaf4215f0c6132154700255ae578e4a2fd5b336ea40f3cba59b40e00235dceb72d7d22f0c3995f5d8b4f2684949f5752f57f4ca8eed239d2ca368bf0a1a53ca50a077988feae28e893e387a482447eb7facba0f22a55a02df381a9881a5e9d640d4caea700b43ba5c2146e01181e70cd96993535007e34151088632d558a3a44a3a5fe1c33f33102a388246870f01d44b966c0ad98cca9f6e69096f8bf056d92e7a7b1168c1997b658fdd1559d9f5833c734e3d90d91569fbf1f5220362d2c9b27807d41c2eb4892e23778ee6f3b24bbf90e17e536bdd77b92a692d460eb345a4363a64b29ebff051a63c582531db6ac0bca57ff774c5df578346d372a2b066328e022c0f303dbc400e22bd58e7686e65da9322bdd58124edf5b0ae830be5969bd75ec01e10fc8905d5b579a5378700c3976541ac5fbd0a9b63b9edb1db902f545896d2ef6cd7d08d1a8aead275fbe5a8c7d04ac4f03e9e1c4edc0b3cb59e1dcf781020bc4700185729cd7c3ed3d58cef5f537d724628c621a8b7fe1017115a756a46c74848c1a0fa383298ef3e2d6a7658c1e89aa394c706c1e802fcf94bf5062b7639a8af43d4c9b962c585ff61edde12569cc7b477f60ce8945377e4d56d09e542b0975e3874838de6972f754edaec1a31d0be606aadf15321624c17c8e5baf0e165b65961df7fc41495797d2e317833fa1180703994f1dfe7417bd8d5daace7a7d2a7885de40d8b804899cff120bd41421391dbd4b4a0c531e82bcc3bbbd899a98f69505b43093e01dd7b7812e28fe14e04431df8f09bbe08ca4518bf53c34506175589ea1dd8ba25cf8f3c3c0e59333e80c9241fdbd53c7f9ae840016567d8d9d9ce4ffc4b2df5df3a3c107899b872678b0f5b57f7525f3ec7800b63e9109d8cbfe7f87dee5ac2c35081a8206a78ae7082c6eeff2e6bee312399250ce1b253d2db1945a62cce0e6a170988e50fda6ae8a6574b2f7d1166ec6f51979e1b8f793f3c57d32bcc6a46ab949ae63a80b1eee989e47d0cd4c07fa90c922b3985cf36f782cb975c7dac0784002d73fbaa1b7eb0e54f9861617cd1ce43deefb23823499b11ed3b6c8bacecb8daab99ba98ed2d5c76271064a0b96ebb6e3feaaad89cb5fe9047360d4ef14b57a25bfa55478574bbd9a7740c59e5557a4948f1c8e45b6e2e5d8159630458dea354edc2855a5bf9c841776a284ec54726fd124eb048efa9c4baae2cabbf22f5531334829f5160b4a3d0da7440d85b046f26d4cebe8dbd9212637b0e43965734ba0ffaff8ad0fdbeb76da16b0f740f006e90caaf7da17ec148ddc46a49b8124b197ec3ba42d0d362ab7d764ead6815047995d6e18fce56a34fbbc6e3b50e44476891a110444a30b01b2e538d02e5a12f330b0662ceab944f367d6b73298175b34824fe9dddcb818be1f84a985cd80e16f0547aa4740b4015c31bb71fa787f10d9c01a0a21085335c4635dc323d8a69a370630548722eb60fa2e4e1e0106f7395caa6b7210d45ab1eee2f5e4a7f09382eee5bde452e5e1399a0680d1c32d1bf9eccb7c638c3877d59e9f35212c9fdfe6f2754cf36f0803fa6797d76c03831b96e04ee804cab3ce3d91e7603738cc1375d77e919df027277423c3b7d060288fd486c152ae726e5bad45a19692632cb524c403437f3e3ce26af87e5d35f696138020f3bfebfe380e7b6d2beccf3a055000d6f2d81a7785ae63f4b9ced28ab6ecd7c659fe6ed1b2759ab5d512341dfa4a6c2114ba03a74afbfdce310df27172b123504e54d8c68eaff0eaa12b15a7175ae2dc207d80368787b599baa0dca6a16181a1d8153724e6c16e62d0f294aaef5f750ac89ca9764b549e745f942b0582ac1b4d383bc992c8d933d2669cee660331021eca91d4d60560be4af239f3b60e38ea8952cd186ea7100172aed93d8ac41476f823135eb9899c42144d1cb880461264071e7ee9a93a21cbb31c3c8f3ef78ea8eee5ef170c5a5f4b9f9680b738fb05e454d517f442ea90e50f5d78bf7410ad2a0f477a8609e2579bf9c74c96ace4e963fdb8659a8a23bef94f108f5af03028202c919e21bb740f1e0087fcf23c056eee9</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis面试题</title>
    <url>/2020/05/07/MyBatis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c664f849b1b5fc500931c7ad1c6ccf6fdb5edec26df93fb1dcd9ccc25c5e5280">191d24a9a000a93771e06f9ad877c3d3d3f45f16a967bab6ec4d7f450ec590aec3e93ece295f8aaf4215f0c6132154700255ae578e4a2fd5b336ea40f3cba59b40e00235dceb72d7d22f0c3995f5d8b4f2684949f5752f57f4ca8eed239d2ca368bf0a1a53ca50a077988feae28e893e387a482447eb7facba0f22a55a02df381a9881a5e9d640d4caea700b43ba5c2146e01181e70cd96993535007e34151088632d558a3a44a3a5fe1c33f33102a388246870f01d44b966c0ad98cca9f6e69096f8bf056d92e7a7b1168c1997b658fdd1559d9f5833c734e3d90d91569fbf1f5220362d2c9b27807d41c2eb4892e23778ee6f3b24bbf90e17e536bdd77b92a692d460eb345a4363a64b29ebff051a63c582531db6ac0bca57ff774c5df578346d372a2b066328e022c0f303dbc400e22bd58e7686e65da9322bdd58124edf5b0ae830be5969bd75ec01e10fc8905d5b579a5378700c3976541ac5fbd0a9b63b9edb1db902f545896d2ef6cd7d08d1ad3678b2d0dbd039a57df5d9c7a151ce87e2b21001d1f01eab9b8cb800dfec16dca4c3ebd2861d690cd8649f77148750ad95f79a6c43e3a4fb5d1714a8a84cc252da3477a5d38dae0a2f9c1c02fefc5d804d539250b5598be39fd8593f46a102a92cd6f96223dcb222306e6464229de4dd24e54dd146030213488f5ce92adeec669dd208992f90705c06ac0a4a713d77050ec48bae4a0d28e87fa1c562e04738209f6994b2c377bc9a097c1cabe88166e2cb769d8e290ba3e619dbd3ea20746e656e797a278803fe28bd9b252f0dbc0f534c73ceaa39ddc4ed9dd0cd39db5d65f5b2d73e164e119e85d2bf5f665bd1b769204ee2b763065c6a03995f2090704ba81a60f0d9446dc50c212d52b7bf834900ae6029a87bc329c5c1daa9e766bca3f66434c91dc0a20024ef0b6768386c2fb2c5515d9efdf683fbd50299c141d3342288e0fecda0f895aa5dc007aedc322668ab3bdccd850d4c4bddd4ab665a18291aa99642a451b01598ce4277c0eff317455214b3dbca416b47090bb0efcb384d036e9dd08fd7e1513ba496e879a41aef704e6cb924f443574cab70823300bcc546bb746f5a40fd52f88f035b6aaa1e7f8425bbc3b54f171cdbc4e4ed164f98519c59a053070f527e003b8fdf2eec0323190d1075748a6b773ae540f2b6361667cac4fae8f725f8a101ffc3384afcc8d8970df3dc6264661ce81b67ae9f79857a1</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Spring面试题</title>
    <url>/2020/05/06/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="4c07f764a48df3d49d7878df6c9a14d5b29b8892eca583840f3904d96d270ed5"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列面试题</title>
    <url>/2020/05/06/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c3508dcb4187d569088f4502340a2fb20f81ffa6601dc80831615d553e959fd8">191d24a9a000a93771e06f9ad877c3d3d3f45f16a967bab6ec4d7f450ec590aec3e93ece295f8aaf4215f0c6132154700255ae578e4a2fd5b336ea40f3cba59b40e00235dceb72d7d22f0c3995f5d8b4f2684949f5752f57f4ca8eed239d2ca368bf0a1a53ca50a077988feae28e893e387a482447eb7facba0f22a55a02df381a9881a5e9d640d4caea700b43ba5c2146e01181e70cd96993535007e34151088632d558a3a44a3a5fe1c33f33102a388246870f01d44b966c0ad98cca9f6e69096f8bf056d92e7a7b1168c1997b658fdd1559d9f5833c734e3d90d91569fbf1f5220362d2c9b27807d41c2eb4892e23778ee6f3b24bbf90e17e536bdd77b92a692d460eb345a4363a64b29ebff051a63c582531db6ac0bca57ff774c5df578346d372a2b066328e022c0f303dbc400e22bd58e7686e65da9322bdd58124edf5b0ae830be5969bd75ec01e10fc8905d5b579a5378700c3976541ac5fbd0a9b63b9edb1db902f545896d2ef6cd7d08d1a42617feeeaed0bb3244e48f607502760632f771ceaec0e06ebf5099015a4027404f0aaf475190acc9e085e329dc3ba24a2e674e9854a7ee1f3489e5d95d608460c1f424e0762c4ff0eb61acd657c5d956d17e265186fca8efd3e2c19344a0c10f8822a92e3c5005335c68085b6ab50dba25f55b7a8e92250f57a5466888cb860c3e47bfad5c5ca9a12117e3634d28ace736c0e7a26ce40fb8cdd0a77b32d67d69c4a3d7684d88e3805b660efcb1023eecbab2cf121590a8b72acab59b9a96f6fa4930183025f8896c83ff1e5d22b54b1c669e31d4064dc0d4d3b2a86fe09973fca9d60270b21e2ade510369c3895807b562597fc1825597bed88ea9a1b13824f12823f4b0d8a268bde637773007cd9045a3bbf22292e1548fae8342f4bb40b0673f4be8220b1372d8506876e05d31a67bf1d6769ab070aa2faa260aacf1bf1bf05912d11ac768f557b8988565a56ef8a98a7e729e5772334f0f797fe4e5754497f7893ebad88f6632467f955469ca6cfb9e609e51443c68ce1d0fbe14aa975ed08e12c0db713b3539796da7491c27d45499783988d9543e0acb1a0176700702caae4b863e44ad79f2897749a5810f4ddb26e2918701839c7553aa514b00b1fe63cebdc289c9d1ee9882498a597dc2ec7dc99455179a17dac657041cde5255dbc6d13b76d157c903a49ffd1435499ea2706ec95fa909edadbc289d44e5a0a45b762f6787e0819d92a8e1a0d69927de19eb09233483cf5f026912617ff0066b5a71d532a0e6fef355da1b2af8d7dbab9f9e7487bda4a40b3d560f035548b956d7127fb896e9d7cb78399adc646d79ce34d6675c9867d982abe16aff1cb83588359ebe1aa3d37c2b3b3d0bf045367344f423c6128986e9498ee22e48f4ee45f40158a582ebc9d62b84cc0ca1c7364a828874eafcf7def013a58e418cb8557d5df6ba9cdf1686bfb369d56eb1aa81e0179891c44d9ce401e85e28721995334cd223d3ad5b992f13a3e813350c32ccbde239e9339ff34aeeb85ea8c28e56ac7bf1355bc2bb39c0346565d4db2af0a839202608574abe2f8d8488d57a178e07c3eb174c00b6ab8580ab5373483dfed1e7eb88c5cb15610562259ca42bf7df5aa512ad514da20901a4158fcd0eb905e5208ca63da351438fe3c19dd08e5032f908b6fa0e3254fe7a7ec0e48b3d5e2419feb49456f15e13a07f48d89ff8c0d71a3699aca5e072eb4dcd64d9c48896959a4e67cf33ac349a8fced095d4363b25b3f1350b545bf1d4b70ec4e2dce4429f489469417b86cf8cf61f085ba3353c5fff0b2a4ebbf4dfba3d0a9c4ba6656b19d44536021b35a3f59fa8e3c4bb3246dd854c8f035f1df208ad75ba65c920565e84af1ba222fcd3f3784817c1765c8a615ec108d07596b7f505467a1066399fab5342b6d74ff4c64b4d0c7677f0e9db674e231c58c0818c30d2643f853aed86cbca79552c472c3dc82c9719854b0c0056f9c8470a6413d93c1f455033018d48590676426d3fd15fe1d5bd9d06d73c102fd093c0f242b4ffe99a484bfd95b61370570df40f8b8a98ff300b962c415aec0ba4808083d350d7ec82e308baf19b2353c0674fc000289bbcd80b3d6ee9da1eeecba82bf9d49d9395e86b38795b5815d6aea78aae58e738ab8d5d084e21ef3158b20b4637c8f331443e86076381fa8a2dd553415dadc4fb8f0929a9618653d8f3c8e53d2344f91eb722321f0ec98d09037ae3ba9863089e9be785373a30b38b026ebb5fab573dee4590d8aa78d1f98632a1c76f6403cbb2428e63d85fe9f889f25d7f0e19a6cd21738e070f7066a5658bce32e766128acd5c6a880dd2690ec716e976639d366c7e3c96b0e1eed37998e2a00451f13c6b8dd71d2cb98651fdc64e069f9b46aae0acfcbd134c232777572f4ba18abe9287d793b14c94801864cdd0f7a6dcc968316ced100667f5c5bfe64fdc46e4a22a0f004e8b6fbcefb5a28b4aab16281d062031839981935a2fcd69aab44e2763270c92ae2111cdee8011307348b5c0d50b68140d8967b1a56408f2208f6d379f3c8a188313de016619d6365e6135b18e083096673625ac8c5c7693675048daa5f7c7a42a89e93cda6dfe8eac3da62aeea9ed3fa9ed6be7488f20cb120da1680d9c0b1cb5071c269ab4f4a4698b19a11e92a6c8a3fd99ab5b0b8d4dc2e59728d44e135272446dbe305a56489cf4b570ca129adc2669893b30fb55a9f4291a6f523195633f435d7bf1b15f167b79dbcf626ded9f3cde6b89acef76755d067f4f6c4f42c2a88142d9f96fd2ee256e61133f0ffa82608977af8723e0d6323d856767e18de75a238a04fce9afe1a1e27cc3253b75c44a6f65c9e0d6e659b4bcc17548adf0a2642f22e8cdbf78fbf9bb2b4ed13a3537bb0d6f4556765a21e3213edf493e4eabf527481442717f02663159370d4cde62366b91cee938d2589cd493d1d438f72817254f1532a975bbd9140eea3b8dac4762e024eab1f75ca230138828830799bcce249b7d92cb20bffc2c71fa0fcbbca694771aae05929635db2f2fc4a2959a4a7dbbdcc4c5a311a158ec91509099bf105d414a669766ccf98752dcc68f7c2570e93376b96fb895d9757519ffde1d879007d4ec08495a96a7afef6c8d585ddd452d9f9aacdbb0e340a2aabb51f4adf6d1fb63f5263ba39490a7f51769e8e9169c7aec2c9174ffd43f7eedae6eee5b44f8dcdf45c1610f0f9f99db8212e9663d755b5c955217028cff6a51a03b17ee682f97a10f05156daab58b82835fb33e2b64e6c7624eb7a3b46218f2533c5a11668604b2fd9aeb0ef151a3e7d72b123c4c8a6fae92b5052517e9ee6ffdc71d0d531cad95840e9258cca8dbe4db94ab7a4bbc5b508d4976a0e0c30a40bd5c3eef09c483a5759f1500de6e616b52571ede770707175fff93a7d031d69cf9e9b3484a6eceaaa5e55dd43558cd63091e361ea92047ecab73d8bcd42beeb3a2287331a010b76487c462c77ae9135606b67ec90a22ed77e7850974910a54d7c67481c084a40bf4ebcb7aa0e74ab3556f47aa94b2ad22506acb7845de1fd5f05d54b2e9829f68248ad28d11bc01e9d45800569dab4367504e0999355f71a0f27b7202353939fefd8039f2d8247b1084efa72dfa40543469981d1d5ea87e35546dca63d36fc983d3f64f6a5c0acaeda3a46df1f739988ffa5ad1ec24726f023e04514b86e54e96e75f01e8a9e2d305e027c4e26eb477a11fe5dce936f8d681a33fe635ff67839d142e555ec348e5e59636f2f5d1f986052ba216027cf3c38312fe488af53ba3c8ee651ac70a3e0816690b0fcb17644a6b42f459c6fe24d237b1bba9ae72ee87bf7ddcb4e4a124f1b030ef9ba1d97f8ad163d05f2dbd59ba9453ed0d626589eddee5b94c6c4213ec9ac51e31d9bdeef9d912202240e591507c11a8548b1a63900cd131a2e95e0145a9472c063645b85b78ac233af61cfc69d745b450009807e92a638ed607b439de3a0419f07d6f01acf0932f6ed0b93a4752520e03a7b6ab873fa633a0681fa13bd94b34efca37380338c7b08cbad042feb85dd2388b8</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式面试题</title>
    <url>/2020/05/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="8ce9dc098a3073fe01701d881c8fdfd422123f2ce35a3ffb20fad110a6382c52"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis面试题</title>
    <url>/2020/05/04/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="651dfa0b6ce03e6e714d0c65279d79ce32765cb4f35a4a83a83bd1649e01f211"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程面试题</title>
    <url>/2020/05/04/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="17535156d937205f2d46d2697e362c977f7897e5d79e6e0b36da754f806414e5"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合面试题</title>
    <url>/2020/05/04/Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="395eb7ba06ea74f73ea299cfde5f21fe7ba511dbab4a05d1e276a125dad090f6">191d24a9a000a93771e06f9ad877c3d3d3f45f16a967bab6ec4d7f450ec590aec3e93ece295f8aaf4215f0c6132154700255ae578e4a2fd5b336ea40f3cba59b40e00235dceb72d7d22f0c3995f5d8b4f2684949f5752f57f4ca8eed239d2ca368bf0a1a53ca50a077988feae28e893e387a482447eb7facba0f22a55a02df381a9881a5e9d640d4caea700b43ba5c2146e01181e70cd96993535007e34151088632d558a3a44a3a5fe1c33f33102a388246870f01d44b966c0ad98cca9f6e69096f8bf056d92e7a7b1168c1997b658fdd1559d9f5833c734e3d90d91569fbf1f5220362d2c9b27807d41c2eb4892e23778ee6f3b24bbf90e17e536bdd77b92a692d460eb345a4363a64b29ebff051a63c582531db6ac0bca57ff774c5df578346d372a2b066328e022c0f303dbc400e22bd58e7686e65da9322bdd58124edf5b0ae830be5969bd75ec01e10fc8905d5b579a5378700c3976541ac5fbd0a9b63b9edb1db902f545896d2ef6cd7d08d1a1a63ef773fc37b8677ae214fd48f1d3665fb2dbd321564c6ecc78a87d29116226f2311aa2a9b7d0fb534025275ca899084787db6aecfc31b627000b96ade2c92f879ba6ca399c8a07062a347bbd5153b5e897bb9e4f4cd3f789001ae96584150fe4ddb6a102e88d993f1f2c50ce2ffb2bed398c8328fb606e82957bc9cdbf9c7d820574283eb8bec20f612034c3ad889d63bb21fcf8806aa0bb63428840e34611392ba7f191142ffb28caea4e7a1b2c3a1ddf78c5b673b8f84efe47ce1b637808ddb17decb68888de8d5477673ba5b08113d6c10a4900f1f0f083b92693b5a76c866b4605467435ec0ac4bfc67d9c4ca0358ba4545706f03bd10323442d2bcb6de3f20d7e1840dcd35e9cf58057be1f4c90c3e259d8d05c86520e26498a95442698fc9113b939f30f2410f65eb12f2b3310864d1222eebed7f29ea6219856c92a8045948fd34b9e703a53849e616f2e87c117578728a5cd8718607e745ff65233465b82c18b8d49b82f52dd420652e5ab1a9aa36e7966c4db95f993f8ef32acd1f2548188a41baece263dce24911ea2c31e95208067022dda5447fa974d4ee1aa832882e3fb82994a9df9ea18c9ad1e6c5b4112d12a476be9b96c8776bf042e7d56fbbe9dba21cbdba9c409db0cb24b19a0938beadec77cc42c4fcda5ff4cabf112fa755ebd5822c27895d10734f571bbbf69110df1be66b26be12e9d9e2e1125515ce89bd7669980314beeac7ecabae113929049f3bc5a52ea4e5ce196704d370ab20e1c32ee6b3666a5fefd776219841cef25499e5134e1f85171a1368e8ab50b9355a287644329d312209f0ffd40e57c4e4adc91935d409a0c82dc1b7d125359eaa4639faebddb642335f0bf1956b62390d5c516d54509d7b48302bbc27451f0bfe07872784f90fb562d9fef060b0973d8b894c77fe31edab84386ad025c4c81dc56a1e71dabb4ddad3d9beaa9c845d471cee68c3eb8c8aae0070011a896eb65eb44b83860c1f04e2cfa75ad3c5ac324a223c7256b70f7ec4b188c22cfe3c90d77a04c255136cd8c79cbd75344ef0c52e7d0f54c8972d96d67931c9fd50debef8917bbb4f05ebb0ac36d4458c07a665b81266fb4a2fb31cba16be3fba380abcb2f75f7770aaccaad35d6cee15ad19a2a809e4f5f08fc27059b89d9204005780d51527b46db1fd6cd4178b8308033b9d1d32b9e28f3c1edc8a39ed6136ec5a96a9d8801bc91bdc7d9bc65793aa38c1455c4f2b52302881bbd31537af03a929bb250bfd1c1eb721313ff059d8f2bc625b68c2d043385adc1fc5301525b57cb114e10ba23218adf133d235581f4890668d149f9e58e58293487f9a2d6fbb98d5da86fe4f2909b066caf54812a29588458c5014b8eac4e03a391860a6b8e46f62fa7855da199a2d43c618689ca11247c5b0a97159d274cebda32c5d83a9cafb7ec31d7c232abe879c79cbc451f6d4951b5af12e0ba48e28ad7c5556fdc202dacc9463ff6e65e40d9b8f8621807a7dfc006e98a99fecdd68a6ed55f008b9ddb9f7a1424820031600ac7c58c1e59fc6d3bcec25873325df78c44a25ae4bb5d8fc4dbd491fc7acab9060d5ef7f9389e135750df4c90848aa7325eff028c91c3d43529576cb5401d5a22b53b839a797069d480b512553a8be2ab61a46fcd89e16abc21327d4bc849460c0404482f0bb51dbafa0096bd4d81885a7920ac73cdeadb52ce6598ce576abd238b91d02eef8b6e3e8592cf576dd2ac4a5136c494d81e9485ef4337b44120a31b0627088d08e2ca58b32e2881057657b8fbd0a9a56d9c9c9f54268b256d2dfcdbb0f11dbfa876d203fe00a61301a09fcd4ce0ce71672cf836e1f622f2846fe25101e833242a14dc24b2c7a66b9963fff6a02c891ddde783e196d224f76a6ae9b4279b54057ccf7bd01f2c069df3540f3e721b512ccec3ad547bc799b5a6afe18503dfb6c937c1543a55c9d0be5a0d2cb3d286450b941e4983d7f87276dc1d469b07069c4704afb563696478dcd742aa07fb20f61997df82db1deec7eee4e3a3f7de964c4e9fc87fd0ca7e928f669ada7993cb8e8e7a2cfb1c6269f7753532f4d0ce458978a7d4fa1485b8bb0201f02f706ca3ebf5406c84ce566289fb9c2f9cea8b34a730d6168f00efa167239ce570b5dc866813b56ecadc84cae1a72ff3648a32c38004898730b844bae77e936418b93a621dc41f88d37024a0cf74cce17798b3e5fb862df6210a2d12b51fecaccd12be572b90d43461da57303482207837a716e170fa5d3ae4e0132114520f15e5a99080d2fba6ea0d26c8eb4de4536d6e483b0038fc0e8e3ee5a40ecff2c324c9a65585750905f7cf2f38ffc91dd2d7b17fefc897477c0c62f50a65143160ae42b63fd588b5b998252199f3bb955b1103130cd7ca91cd56009a9a92724807bdd71c0c33b8da1e095c8a44732bf90a1971e59a442035021619e148b7d68350444602e139dd736d7082ea7d5a41805db2e97d2b6254fef5863256543a90cc11b680e6c6b197d52917b977c048260298b6c1cd49f7823e282d9816dc036f065480d3778cf74ee742b21b96c487028f41d055fe3b6a7deafca3c74a8db1ae4a3e2b8ac8c7ac57ff1a0163fe5c292d6ec46540bbfc64abe8c43f07f7085b70ac31584f997f0893f071ece4f4f45c37c652c55621f8ec3915f7cc99bfa9883818917ad518b874f8463105c74cb56e1eebe06ba0da9e1597ed5df3fd41c79ae55b4819b8a5dd828dd36ec897d919f9310f834aeb00e181ee87a52c0b8603035f91deeeac2b1eb719569048564ac725fa207787af1d87682f4030bc410274b744c630d916d034c7a52b4cbca6d1d19cf11625918a35161618de158dc4060908e8a704f3abd9ac961ca0dcbed2f4d4e7f5fb7a7554593932fd50c47e0e5fa978f26b63305a2e6d35a9b91cf1129ce471c0262f0463e744efb5476828d79767b02d822f449870d3bee3630a568694534b033f14271430ebbd6d58c17c2ea5bf455a5e63d081e2ab245e66557338ab293b8383198fb5f5bfbe7be28b515fd772dfdfa1edc30a2bb1527a8f943d790bec3d47f3fecc87c6da475118f87d4be1093350c88a0f24d7b777f8eada30081609c503edc98ced3a70fcd463f05e6f6d9bc0c4ce8ebcb78c54a9747270b4f2f4d62aa058a687b303a62182f55f574cb5163d44e6a5db4121367eb94c630f25f49aa049d11b3ea5e8a277d828758ad0a44edafd0c33a8739b5031b3188a54456945ec2571c8ee4d373ac1859ca66e14790dbc8670aa747198e2eebc2b7a231ed3da056c8d6e0b9c351d138497f15d6a3bc31923c027ff911ccb5c7c372154b0937498330aadd48b4d0de2a39c348e92c8aa2950b8f75e97656326cc01ec23d73b71bf732b60c8f49830403c95155dfa375d8de732b1a814f49c27b9b5bc70b41a0b9655977003c63ace2dd6c0d3cbfe9de478a280d9a47836aad347d80a4b28ba8f969ce152f81ce547c7f856aa63d64ebe4ac34c7bc8b47c417ed801c0c4750f77382ccaeaf50a0b417eaba513e0c428919bfad67593be40990aacc8703637c0e4ae20a57f68b8c54be7c6c560a4b0df033eb5baaeff5bc2adc0618c5b149ad8be31914bb68a45b6f50e0238525af02c855dd9ed4cc7a276f0190a750f88395f83c8eba2f05997d4f1154df1300b79f04e9200bd6874d78c91f956dd9192a8247dc7706e1e973ee08d9b2dc5b7df1bbc75243e7685d15317f5823c42c9d75ad159c72fb734bf5e2f53b0cb30c0002c0189cc80b8c2a424c761874811bace6fe2290fb416f7fd3b271f76ec659abc85b7e9ebef4d8c514064354e9f87e23bc3d902f153ab6e9feae8ee03cbe99edf5665d5efe190ea6387ef7003d8135b8db533d1bdf342830e16089371f5f460d26d8985693b9a4c4f903804f834b1047a2278decc6f664730b1f6c225e47a735b6e8d6401ccbda3497dfffe6a04b34a027fd12</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL面试题</title>
    <url>/2020/05/04/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="371d6c1533f183f046e9f983ce0dc9f522bde3c836f2442c5825cee51472b57b"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机面试题</title>
    <url>/2020/05/02/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="551455ec939c0529765031d5d9902c4b1222ff062e8cf54614284d96259c34fe">191d24a9a000a93771e06f9ad877c3d3d3f45f16a967bab6ec4d7f450ec590aec3e93ece295f8aaf4215f0c6132154700255ae578e4a2fd5b336ea40f3cba59b40e00235dceb72d7d22f0c3995f5d8b4f2684949f5752f57f4ca8eed239d2ca368bf0a1a53ca50a077988feae28e893e387a482447eb7facba0f22a55a02df381a9881a5e9d640d4caea700b43ba5c2146e01181e70cd96993535007e34151088632d558a3a44a3a5fe1c33f33102a388246870f01d44b966c0ad98cca9f6e69096f8bf056d92e7a7b1168c1997b658fdd1559d9f5833c734e3d90d91569fbf1f5220362d2c9b27807d41c2eb4892e23778ee6f3b24bbf90e17e536bdd77b92a692d460eb345a4363a64b29ebff051a63c582531db6ac0bca57ff774c5df578346d372a2b066328e022c0f303dbc400e22bd58e7686e65da9322bdd58124edf5b0ae830be5969bd75ec01e10fc8905d5b579a5378700c3976541ac5fbd0a9b63b9edb1db902f545896d2ef6cd7d08d1ac8fb53b3107df872d95c4110ceed262daf0c8b9fc95513b964795b55ece3abc611bbf6a9bba7c9458a1d8b24af724318342203442cfeecf2a9322acac81f0bde2ffefe9969dff40b349390c057f40b849de44d302f826025537b53199b98fe2868947eb0a2f3caa4874bab2500af67410d81f84610385f4ab629115795efd6b1a1250b984a99939eb1bd797843f398f1c5ab73594a8cf339d49d0d0694416209e734493756b5f75b336680894bdbb9629e82f75aef5e695f90df42acae7d32fe9f97fba2de4c4d88f2368470599cfcb9bc8df3f47774056a1c8e74effba69c56b1929a962b8cc0772ead2ae515b9e018efbcd7e0df2bc464b7c7c086427e2c99f6f4456314ab9dbf0749f90aecdb2f2af6b6bc88f0b61211fde74d2c9fb930ee2547a2e838c13f33bb5430f241ca614a3527a05db1994bea37958192b9e6c85fba9baf1c2dea0657bab93b3e64341477003e861502f6e421d6880d491ace2fc42b5d8db917c143b62fbd578b715e843a79d9d6b78bfce118f8f781dfb0911250fc374e0fac5bf38ff4e747efea1b350360442954d4fd622df8fd96e66404fff8b4b521daf6fb9d7bd47aeb27e380495ada5c4a4adde8a1133eb716a2bd6f21f32cf598c11f6b550b8a521e52cd0af96124aabac198f6f327907565af6b6d5c715cbc3b5eb009ab7a14388e8f9f49999cf386c3917d18ce63da8f8c6ded613fb716ce6e0fe09fad086ae23fc7d30ebf09172cd8216f43840b58892c86d636ddcc9b91a88c0cf39d810fcec492365fcf1707baa7682aafecf197b6d88d3f7c98261ee7d4ef7f3747a47b68013d0d61ac6d36d6f5fd67abeb6dd62e7bba95cb64e9b94b407afea72c3e372d723d22d7ed43cf1e1d114832ac97c71d2909f884133a2363a9dfe1580c435dfa3d3408eb83639d496342ed678183a13f73a4a44224d5df8d0e32cdc361fbcd6a2dd86fe164030219901c8a027824d5e923255187f901f42f5a43d950bbadcfa34a9eb9b208552d533b94eecb984cc45fa671f257f5afc6c40631fa5834933de6f6f48ab3cd138a09367f8eab6463e8afd5659aed96c2e9fe10575855ae556523d5dbd533f9291ea4499147f35306219016bf3254418bb1aa57b614313236d9bbec0c9d994a554e70e3c6ced1aa804b143a648869db183964c264a98359407390b1a2386752e619be6031557107bdd7f11e2d094afb5deadd2068f6abdb765868f97365fe160f5c80aa5e9e008e0a32da9e67121749477fb83560e1dc58a387c75575cd5c7b96d9b3be6bdbb069f792a8675650d831d4d169201de72e0334f3c0d416067878466f9e6a124fdae5c6c746d5a46044fa777f40d52b958bc6e2c873da7ad46cb2ef1d79b41804f3b90fa08332d081e8d33deff42885f80ba438e36fd30efa84e5d6e6a1bdb1c539dd73da771923cce7f99e091c78b69c81e1214512f763f858d9bd2e1c92e9e74ef249ac1f58c3c1fcfd9de2c87ca6f5be2228daffcd949e2730285cb006413b32dea38796b3bab6a45b729232db223b36990aa1edc6e375811e9097b2de8ce44500517ae8407299b7ffaf25a333a74d600093de8e23af70e4560675f5e55424b3a8591551a84e8379fb4b64922d0bf2ef11f11c0df52ab9f895917fd7355e105a6147d426b69058e64784fae1e1894310e960c99414be837b687ec25436981426e2e9f6217160c04d5a9a1f42b3629eafbede30fad797188eb9a932272144b816d7cc916134aace2533331312bb8376b4c5acbf82804c86200a508530b59e59e7bb491b3a9a73f153768c483bf003ce10b6108ff427dc3a2e6135eaf72ca9b963900f9750b4d21fb97388758fa87d5b15c6ba697854fe871f75a207585c434d867859933703d81519dc6a97caf1e5d239337ef2a2dc485b07f230f9e8cf92715b2a6a9a9bd7a84b75650c4bb50a08125ffa4261195a7a7e4eb8d6c70adb8fd6d11517d6538b226ea9c3dc79d975fa4b2aebd93b759fb7ff2981155d6d34915f804b3d3f0948bbc574bf8eabe0619e1b1df7f8c5dd1fb2515c3cb81e346c9a788024b034ff7bd8eb5512dc79bcf5247f2d5eed70c741123dbf42759f121f2c0073adb4728c87a0d372c8e41ab05860a0462aa5ab19ca7780040b8f61ebd6d52d608795abe9a730ca3d1f32c3df0c5f9d18d2850122a12129a74c62e3bb813f3f8d3de244b00155de3f32135bf4c71c4474b6fbd9a0ebcc36753b58b10a66bd185476caf1aa2db48c069f0dcfbf1005308bc76cb623afe8a2070f370c103e73044678b0defe0eae637e38be008d82fc720e27601e5e422b753a11a6c89f31ecc40420dc7c847e066c1f022e8c4f49764472b1f63c2e18d97eb0f277ae4b0f03d4ddea47009119ca5722fe3671291db7ffc559e6d3b9f613db8216c510ee98185a056d29b11a4827e1cbe2209b454537e2fcf04a2dd4714e7f051afd0dc2f9b80df869cbe6cbc35044b5e5a8b69bb1d7dbf5b696e48529714b7c507a4f3559523d14e2fe723fee3109b8e809ca08eaedd47dff37a34ed58a80187d2c57b0dfc99ac597878565c75074d5fef3eebc9998f959778860fba862f24177a1bbd4220db0327febeda2e90d7a5c843776f9902713161a69f4549eeafddd9262b37d8cb4fd0847f4679b82b93fa3e5b7964e6fa54c64604a29df469d9132a9fe9c23d1ba103cc76b077f87b52bf33faa2d05b1eb6d3cc9fe96eb01d331b6b361e4d9b5f0088ad1194257f79571ce90d5f1c21010f824cf95307e09758df6106a406bc5f31901cb8872c89c96e4c932baf6a42f393fdeae82924d3582f5e2d16168788c8e9fdfd797c308474b0fcc76fa9c43960e36385fea1295a45790452b80a45edb72d8533630db44b7f6d763c9859b2f08cf69177f515cf948ec9f316d164984619b4b0f31491ed5c33918411bcc5368cb044e4933fc4a5fb7472bdd1ec80688343b0caf6020322fa621e2e413bdb1912c97218174aaa302c797ea733fa47d69dc9bbaf65245ec8fcb09e3c0734b84a01ffe9c9547436906c6aa16e730f0995ef129257b806790bbe505247c83ea35f3c4e7ddb10a0bbe97def46c71a3253fb5568214d7d8589bd4cc2ea0b2cae67ab8f31b760556792160ac1e84b0d8a6521145a91a253f7398db8c4a0691d2d05261ba2d8fb6db668c9fc89b5a810e7cd9e706107aea38fdc65e0afc36cdf138e021b5260f3befa7fe2091c0d05978ae241fb214e27d8f8c851c1f5718fe7e91f1e0ae642eda8a6c41173c9dc4ddccb7ea45d3bb082de3985f89309d378481f095b7f200d96e9ab28b0cbbca6cf36099db7901bbcdf6f3d84b6ce26e7a9f8fc230b36133036882d7c0afc9d436b0b597c89f022b7ac967d6c501800502d89b942b2fed11ab2486f8d9a4560aab1e36be9c31d02d8fcd800dc96bb1a20ad8d83ed019ea51481560ecbbaf133934c8692978f00a2520d9f1d89caf79202e77dc9642638bb94522a1bea74213879c4b333f1d6e819279045d8b4f039106c37c55374148553f901f5622d947baddc69b92149e7060a81bf5b8cdd2d5fbbaf760efc38880846dcd2b71ab44f59abad82f67b527055e288d548f5f8f8bdd45ce2ee9ce5b7b62cec4920c0a3e1d9305015dce9c612fdd239d588289d02cdd8d63e135ad1ffc3f20dd7d06f8632381f044a998e3caaaa88e171d123d47285c1db82e2079</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础面试题</title>
    <url>/2020/05/01/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="5c2280e117fec28b604ef06f677c861e998ddf75ee02e71038b04d1267cdcb2a"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络面试题</title>
    <url>/2020/05/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="b1aa54356b73684b5589e160f03e296cf50bf10aa577c023cc5312bf011b6d4c"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>九大排序算法</title>
    <url>/2020/05/01/%E4%B9%9D%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="62833208c22ceacce8441e86ff706799e46139ebb94bcc82a6f5bd35f71d6081"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>笔试题目</title>
    <url>/2020/04/23/%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c241c9117ebdaa758db6dd69d15b0a424cf5f7f183444e6590a78e0f99e06141">191d24a9a000a93771e06f9ad877c3d3d3f45f16a967bab6ec4d7f450ec590aec3e93ece295f8aaf4215f0c6132154700255ae578e4a2fd5b336ea40f3cba59b40e00235dceb72d7d22f0c3995f5d8b4f2684949f5752f57f4ca8eed239d2ca368bf0a1a53ca50a077988feae28e893e387a482447eb7facba0f22a55a02df381a9881a5e9d640d4caea700b43ba5c2146e01181e70cd96993535007e34151088632d558a3a44a3a5fe1c33f33102a388246870f01d44b966c0ad98cca9f6e69096f8bf056d92e7a7b1168c1997b658fdd1559d9f5833c734e3d90d91569fbf1f5220362d2c9b27807d41c2eb4892e23778ee6f3b24bbf90e17e536bdd77b92a692d460eb345a4363a64b29ebff051a63c582531db6ac0bca57ff774c5df578346d372a2b066328e022c0f303dbc400e22bd58e7686e65da9322bdd58124edf5b0ae830be5969bd75ec01e10fc8905d5b579a5378700c3976541ac5fbd0a9b63b9edb1db902f545896d2ef6cd7d08d1a7c21da795677547d59e92fe8e70b0275f8cace7bae9d763a0ccd111428cf3fcde991f3452613ca96c28fd8056d2bfcb4dba2086c66266d6aae4727f31b4cf657707acb86fa63ce3cacacb07ef5ee46c5b9ea3a4882729b5a40e973e4a63d3f0ccb06dc77e27ffbe6fcc42d00b66082133c49db8b7b80bd6cb66170da10581c0b489ec346bdb6676f75b8d93e867923d99f375e40b0273ac44766a763117801f3</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer</title>
    <url>/2020/04/21/%E5%89%91%E6%8C%87offer/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不要啦！不要看了啦！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">啦啦啦，这是博主的私人博客哦！</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="513f2404782ee7507f109cc62d17e94f3f98a0aeb8d8047541d4f2a2c39c544a"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾收集器与内存分配策略</title>
    <url>/2020/04/17/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="垃圾回收的三个问题"><a href="#垃圾回收的三个问题" class="headerlink" title="垃圾回收的三个问题"></a>垃圾回收的三个问题</h1><hr>
<ul>
<li>哪些内存需要回收？</li>
<li>什么时候回收？</li>
<li>如何回收？</li>
</ul>
<h1 id="对象已死吗"><a href="#对象已死吗" class="headerlink" title="对象已死吗"></a>对象已死吗</h1><hr>
<p>垃圾收集器在对堆回收之前，首先需要考虑的就是哪些内存需要回收，确定哪些对象还活着，哪些对象已死去。</p>
<h2 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h2><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p>
<h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p>通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链连接的时候，则证明该对象是不可用的。</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0152.PNG"  alt=""></p>
<p>在Java语言中，可作为GC Roots的对象包括：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中JNI（native方法）引用的对象</li>
</ul>
<h2 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h2><p>在JDK1.2之后，Java将引用分为强引用、软引用、弱引用、虚引用，强度依次递减</p>
<ul>
<li>强引用就是指在程序代码中普遍存在的，类似”Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收被引用的对象。</li>
<li>软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出之前，将会把这些对象列进回收范围之中进行第二次回收。</li>
<li>弱引用也是用来描述非必需对象的，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</li>
<li>虚引用是最弱的引用关系，一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</li>
</ul>
<h2 id="生存还是死亡"><a href="#生存还是死亡" class="headerlink" title="生存还是死亡"></a>生存还是死亡</h2><p>下面来叙述以下判断生存或是死亡的过程：</p>
<ul>
<li>首先进行可达性分析，若没有发现可达性连接，则对其进行一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize方法。若对象没有覆盖finalize方法，或finalize方法已经被虚拟机调用过，则虚拟机将这两种情况视为”没有必要执行“。</li>
<li>若该对象被判定为有必要执行finalize方法，那么该对象会被放置在一个叫做F-Queue的队列中，并由一个虚拟机自动建立的、低优先级的Finalizer线程去执行。</li>
<li>稍后GC将对F-Queue中的对象进行第二次小规模的标记。如果对象又重新与引用链上的任何一个对象建立关联，则可以脱离被回收的状态，比如将自己赋值给某个类变量或成员变量。若被第二次标记，它将被移出”即将回收“集合，然后基本上它就会被回收了。</li>
</ul>
<h2 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h2><p>永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。</p>
<h3 id="判断废弃常量的方法"><a href="#判断废弃常量的方法" class="headerlink" title="判断废弃常量的方法"></a>判断废弃常量的方法</h3><p>以常量池中字面值的回收为例，若一个字符串常量进入了常量池中，但是没有任何一个对象引用该常量，则该常量会被回收。</p>
<h3 id="判断无用的类的方法"><a href="#判断无用的类的方法" class="headerlink" title="判断无用的类的方法"></a>判断无用的类的方法</h3><ul>
<li>该类所有的实例都已经被回收，即Java堆中不存在该类的实例</li>
<li>加载该类的ClassLoader已经被回收</li>
<li>该类对应的Class对象没有在任何地方被引用，无法在任何地方通过反射机制访问该类的方法</li>
</ul>
<h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><hr>
<h2 id="标记—清除算法"><a href="#标记—清除算法" class="headerlink" title="标记—清除算法"></a>标记—清除算法</h2><p>首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>
<p>其主要的不足有两个：</p>
<ul>
<li>效率问题，标记和清除的效率都不高</li>
<li>空间问题，标记清除之后会产生大量不连续的内存碎片，而当需要分配一个较大对象时，若无法找到一个足够的连续内存，则会触发另一次垃圾收集动作</li>
</ul>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0153.PNG"  alt=""></p>
<h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>复制算法将内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块内存用完了，则将还存活着的对象复制到另一块上，然后把已使用过的内存空间一次性清理掉。</p>
<ul>
<li>优点是效率高，且不需要考虑内存碎片问题</li>
<li>缺点是每次只使用一半的内存，空间浪费太大</li>
</ul>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0154.PNG"  alt=""></p>
<h2 id="标记—整理算法"><a href="#标记—整理算法" class="headerlink" title="标记—整理算法"></a>标记—整理算法</h2><p>首先标记存活的对象，然后将存活的对象向一端移动，然后直接清理掉端边界以外的内存。</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0155.PNG"  alt=""></p>
<h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>在新生代中，每次垃圾收集时都会有大量对象死去，只有少量存活，则选用复制算法。</p>
<p>而老年代中，因为对象存活率高、没有额外空间对它进行分配担保，就使用”标记—清除“或”标记—整理”算法。</p>
<p><strong>Minor GC和Full GC的区别</strong></p>
<ul>
<li>新生代GC（Minor GC）：指发生在新生代的垃圾收集动作，因为Java对象大多都拒赔朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li>
<li>老年代GC（Full GC）：指发生在老年代的GC，出现了Full GC，经常会伴随之至少一次的Minor GC。Full GC的速度一般会比Minor GC慢10倍以上。</li>
</ul>
<h1 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h1><hr>
<p>对象的内存分配，在大方向上讲，就是在堆上分配，一般主要分配在新生代的Eden区上，如果启动了本地线程分配缓冲，则优先在TLAB上分配。少数情况下会直接在老年代分配。</p>
<p>分配的规则不是固定的，由垃圾收集器泽合、虚拟机和内存相关的参数设定来决定。</p>
<h2 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h2><p>大多数情况下，对象在新生代Eden区中分配，若当Eden区空间不足时，会触发一次Minor GC。</p>
<h2 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h2><p>大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组等。经常出现大对象容易导致内存不足而提前触发垃圾收集。</p>
<h2 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h2><p>在分代收集思想中，虚拟机为每一个对象都定义了一个<strong>对象年龄计数器</strong>。如果对象在Eden区出生，并经过第一次Minor GC后仍然存活，并进入Survivor区的话，对象年龄记为1。然后若该对象在Survivor区每熬过一次Minor GC，对象年龄就会加一，当它的年龄达到一个阈值时（默认是15岁），便会转移到老年代。</p>
<h2 id="动态对象年龄判断"><a href="#动态对象年龄判断" class="headerlink" title="动态对象年龄判断"></a>动态对象年龄判断</h2><p>为了能更好地适应不同程序的内存状况，虚拟机并不是永远都要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代。如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代。</p>
<h2 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h2><p>在发生Minor GC之前，虚拟机是如何检查该Minor GC是否是安全的？</p>
<ol>
<li>首先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间<ol>
<li>若该条件成立，则Minor GC是安全的</li>
<li>若不成立，则虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败<ol>
<li>如果允许，则会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小<ol>
<li>如果大于，则将尝试一次Minor GC</li>
<li>否则，改为进行一次Full GC</li>
</ol>
</li>
<li>否则，进行一次Full GC</li>
</ol>
</li>
</ol>
</li>
</ol>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存区域与内存溢出异常</title>
    <url>/2020/04/17/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><hr>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0148.PNG"  alt=""></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器是线程私有的一块内存，用于记录下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖程序计数器来完成。</p>
<p>如果线程正在执行的是一个Java方法，则程序计数器记录的是正在执行的虚拟机字节码指令的地址。如果正在执行的是native方法，则程序计数器的值为空（undefined）。</p>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>虚拟机栈也是线程私有的，它的生命周期与线程相同。</p>
<p>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
<p>而局部变量表存放了编译期可知的各种基本数据类型和对象引用类型。</p>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈与虚拟机栈类似，虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为虚拟机使用到的native方法服务。</p>
<h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区与Java堆一样，是所有线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池是方法区的一部分，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域</p>
<p>在JDK1.4中新加入了NIO类，引入了一种基于通道与缓冲区的I/O方式，它可以使用native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和native堆中来回复制数据。</p>
<h1 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h1><hr>
<h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><ul>
<li>当虚拟机遇到一条new执行时，首先去检查这个执行的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，拿必须先执行相应的类加载过程。</li>
<li>在类加载检查通过后，虚拟机将为新生对象分配内存，对象所需的内存大小在类加载完成后便可完全确定。<ul>
<li>假设Java堆中内存是绝对规整的，则使用“指针碰撞”分配方式</li>
<li>假设Java堆中的内存不是规整的，则使用“空闲列表”分配方式</li>
</ul>
</li>
</ul>
<blockquote>
<p>在分配内存时需要考虑的一个问题是，在并发情况下分配内存空间并不是线程安全的。解决这个问题有两种方案：</p>
<ul>
<li><p>一是对分配内存空间的动作进行同步处理——实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。</p>
</li>
<li><p>另一种是为每个线程在Java堆中预先分配一块内存，称为本地线程分配缓冲（TLAB），当线程需要分配内存时，则在自己的TLAB中分配，只有当自己的TLAB用完并分配新的TLAB时，才需要同步写入Java堆。</p>
</li>
</ul>
</blockquote>
<ul>
<li>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），如果使用TLAB，这一工作过程也可以提前至TLAB分配时进行。</li>
<li>接下来，虚拟机需要对该对象进行必要的设置，如对象的类型、类的元数据信息、对象的哈希码、对象的GC分代年龄等，这些信息存放在对象的对象头中。</li>
<li>最后执行init方法，把对象按照程序员的意愿进行初始化，这样一个真正的对象才算创建出来。</li>
</ul>
<h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>对象在内存中存储的布局可以分为3块区域：对象头、实例数据、对齐填充</p>
<ul>
<li>对象头包括两部分信息<ul>
<li>第一部分用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。如果对象是一个Java数组，则对象头还必须记录数据的长度。</li>
<li>另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</li>
</ul>
</li>
</ul>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0149.PNG"  alt=""></p>
<ul>
<li>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。</li>
<li>对齐填充并不是必然存在的，它仅仅起着占位符的作用。</li>
</ul>
<h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><p>Java程序需要通过栈上的reference数据来操作堆上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。目前主流的访问方式有使用句柄和直接指针两种。</p>
<ul>
<li>如果使用句柄访问的话，那么Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。</li>
</ul>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0150.PNG"  alt=""></p>
<ul>
<li>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址。</li>
</ul>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0151.PNG"  alt=""></p>
<p><strong>两种方式的对比</strong>：</p>
<ul>
<li>句柄方式的好处就是reference存储的是固定的句柄地址，不需要改变</li>
<li>直接指针的好处是访问速度更快，节省了一次指针定位的时间开销</li>
</ul>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程基础知识</title>
    <url>/2020/04/17/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="什么是多线程并发编程"><a href="#什么是多线程并发编程" class="headerlink" title="什么是多线程并发编程"></a>什么是多线程并发编程</h1><hr>
<p>并发是指同一个时间段内多个任务同时都在执行，并且都没有执行结束，而并行是说在单位时间内多个任务同时在执行。 </p>
<p>并发任务强调在一个时间段内同时执行，而一个时间段由多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行。</p>
<h1 id="为什么要进行多线程并发编程"><a href="#为什么要进行多线程并发编程" class="headerlink" title="为什么要进行多线程并发编程"></a>为什么要进行多线程并发编程</h1><hr>
<p>多核 CPU 时代的到来打破了单核 CPU 对多线程效能的限制。 多个 CPU 意味着每个线程可以使用自己的 CPU 运行，这减少了线程上下文切换的开销，但随着对应用系统性能和吞吐量要求的提高，出现了处理海量数据和请求的要求，这些都对高并发编程有着迫切的需求。</p>
<h1 id="Java中的线程安全问题"><a href="#Java中的线程安全问题" class="headerlink" title="Java中的线程安全问题"></a>Java中的线程安全问题</h1><hr>
<p><strong>资源共享</strong>，是指该资源被多个线程所持有或者说多个线程都可以去访问该资源。</p>
<p><strong>线程安全</strong>问题则是指当多个线程同时读写一个共享资源并且没有任何同步措施时，导致出现脏数据或者其他不可预见的结果的问题。且只有当至少一个线程修改共享资源时才会出现线程安全问题。</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0145.PNG"  alt=""></p>
<h1 id="Java中共享变量的内存可见性问题"><a href="#Java中共享变量的内存可见性问题" class="headerlink" title="Java中共享变量的内存可见性问题"></a>Java中共享变量的内存可见性问题</h1><hr>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0146.PNG"  alt=""></p>
<p>Java 内存模型规定，将所有的变量都存放在主内存中，当线程使用变量时，会把主内存里面的变量复制到自己的工作空间或者叫作工作内存，线程读写变量时操作的是自己工作内存中的变量。 </p>
<p>当一个线程操作共享变量时，它首先从主内存复制共享变量到自己的工作内存， 然后对工作内存里的变量进行处理，处理完后将变量值更新到主内存。</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0147.PNG"  alt=""></p>
<p>我们通过上图的一个例子来解释内存不可见性问题：</p>
<p>假如线程 A 和线程 B 同时处理一个共享变量，会出现什么情况？我们使用图 2-5 所示 CPU 架构， 假设线程 A 和线程 B 使用不同 CPU 执行，并且当前两级 Cache 都为空， 那么这时候由于 Cache 的存在，将会导致内存不可见问题</p>
<ul>
<li>线程 A 首先获取共享变量 X 的值，由于两级 Cache 都没有命中 ，所以加载主内存中 X 的值，假如为 0。然后把 X = 0 的值缓存到两级缓存， 线程 A 修改 X 的值为 1, 然后将其写入两级 Cache， 并且刷新到主内存。 线程 A 操作完毕后，线程 A 所在的 CPU 的两级 Cache 内和主内存里面的 X 的值都是 1。 </li>
<li>线程 B 获取 X 的值，首先一级缓存没有命中，然后看二级缓存，二级缓存命中了，所以返回 X = 1 ；到这里一切都是正常的，因为这时候主内存中也是 X = 1 。然后线程 B 修改 X 的值为 2， 并将其存放到线程 B 所在的一级 Cache 和共享二级 Cache 中， 最后更新主内存中 X 的值为 2 ；到这里一切都是好的。 </li>
<li>线程 A 这次又需要修改 X 的值，获取时一级缓存命中，并且 X = 1 ，到这里问题就出现了，明明线程 B 已经把 X 的值修改为了 2，为何线程 A 获取的还是 1 呢？ 这就是共享变量的内存不可见问题，也就是线程 B 写入的值对线程 A 不可见。</li>
</ul>
<h1 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h1><hr>
<h2 id="synchronized关键字的介绍"><a href="#synchronized关键字的介绍" class="headerlink" title="synchronized关键字的介绍"></a>synchronized关键字的介绍</h2><p>synchronized 块是 Java 提供的一种原子性内置锁，Java 中的每个对象都可以把它当作一个同步锁来使用，这些 Java 内置的使用者看不到的锁被称为内部锁，也叫作监视器锁。 </p>
<h2 id="synchronized的内存语义"><a href="#synchronized的内存语义" class="headerlink" title="synchronized的内存语义"></a>synchronized的内存语义</h2><p>我们来看 synchronized 的一个内存语义，这个内存语义就可以解决共享变量内存可见性问题。 </p>
<ul>
<li>进入 synchronized 代码块时：把 synchronized 块内使用到的共享变量从线程的工作内存中清除，这样该变量就会从主内存中读取。</li>
<li>退出 synchronized 代码块时：把 synchronized 块内对共享变量的修改刷新到主内存中。</li>
</ul>
<h1 id="Java中的volatile关键字"><a href="#Java中的volatile关键字" class="headerlink" title="Java中的volatile关键字"></a>Java中的volatile关键字</h1><hr>
<p>对于解决内存可见性问题，Java还提供了一种弱形式的同步，这就是 volatile 关键字。</p>
<ul>
<li><p>当一个变量被声明为 volatile 时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存。 </p>
</li>
<li><p>当其他线程读取该共享变量时，会从主内存重新获取最新值，而不是使用当前线程的工作内存中的值。 </p>
</li>
</ul>
<p>volatile 相比于 synchronized 有一些好处，比如说可以减少线程上下文切换带来的开销。同时 volatile 是非阻塞式的，而 synchronized 是阻塞式的。</p>
<p>volatile 虽然提供了可见性保证，但并不保证操作的原子性。那么一般在什么时候才使用 volatile 关键字呢？</p>
<ul>
<li>写入变量值不依赖变量的当前值时。 因为如果依赖当前值，将是获取一计算一写入三步操作，这三步操作不是原子性的，而 volatile 不保证原子性。 比如说 i++ 。</li>
<li>读写变量值时没有加锁。 因为加锁本身已经保证了内存可见性，这时候不需要把变量声明为 volatile 的。</li>
</ul>
<h1 id="Java中的原子性操作"><a href="#Java中的原子性操作" class="headerlink" title="Java中的原子性操作"></a>Java中的原子性操作</h1><hr>
<p>所谓原子性操作，是指执行一系列操作时，这些操作要么全部执行，要么全部不执行，不存在只执行其中一部分的情况。 比如 i++ 就不具有原子性。</p>
<p>那么如何保证多个操作的原子性呢？最简单的方法就是使用 synchronized 关键字进行同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSafeCount</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Long <span class="title">getCount</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span> </span>{</span><br><span class="line">        ++value;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>使用 synchronized 关键宇的确可以实现线程安全性，即内存可见性和原子性，但是 synchronized 是独占锁，没有获取内部锁的线程会被阻塞掉，而这里的 getCount 方法只是读操作，多个线程同时调用不会存在线程安全问题。 但是加了关键宇 synchronized 后，同 一时间就只能有一个线程可以调用，这显然大大降低了并发性。你也许会间，既然是只读操作，那为何不去掉 getCount 方法上的 synchronized 关键字呢？其实是不能去掉的，别忘 了这里要靠 synchronized 来实现 value 的内存可见性。</p>
<h1 id="Java中的CAS操作"><a href="#Java中的CAS操作" class="headerlink" title="Java中的CAS操作"></a>Java中的CAS操作</h1><hr>
<p> CAS 即 Compare and Swap，其是 JDK 提供的非阻塞原子性操作，它通过硬件保证了比较—更新操作的原子性。 JDK 里面的 Unsafe 类提供了一系列的 compareAndSwap＊方法，下面以 compareAndSwapLong 方法为例进行简单介绍。</p>
<blockquote>
<p>boolean compareAndSwapLong(Object obj, long valueOffset, long expect, long update）方 法 ： 其中 compareAndSwap 的意思是比较并交换。CAS 有四个操作数，分别为：对象内存位置、对象中的变量的偏移量、 变量预期值和新的值。其操作含义是，如果对象 obj 中内存偏移量为 valueOffset 的变量值为 expect，则使用新的值 update 替换旧的值 expect。这是处理器提供的一个原子性指令。</p>
</blockquote>
<p>关于 CAS 操作有个经典的 ABA 问题，具体如下：假如线程 I 使用 CAS 修改初始值为 A 的变量 X， 那么线程 I 会首先去获取当前变量 X 的值（为 A），然后使用 CAS 操作尝试修改 X 的值为 B，如果使用 CAS 操作成功了，那么程序运行一定是正确的吗？其实未必，这是因为有可能在线程 I 获取变量 X 的值 A 后，在执行 CAS 前，线程 II 使用 CAS 修改了变量 X 的值为 B，然后又使用 CAS 修改了变量 X 的值为 A。 所以虽然线程 I 执行 CAS 时 X 的值是 A， 但是这个 A 己经不是线程 I 获取时的 A 了。这就是 ABA 问题。<br>ABA 问题的产生是因为变量的状态值产生了环形转换，就是变量的值可以从 A 到 B, 然后再从 B 到 A。如果变量的值只能朝着一个方向转换，比如 A 到 B , B 到 C，不构成环形，就不会存在问题。JDK 中的 AtomicStampedReference 类给每个变量的状态值都配备了一个时间戳，从而避免了 ABA 问题的产生。</p>
<h1 id="Unsafe类"><a href="#Unsafe类" class="headerlink" title="Unsafe类"></a>Unsafe类</h1><hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Unsafe UNSAFE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> stateOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> state = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//使用反射机制来获取Unsafe实例</span></span><br><span class="line">            Field field = Unsafe.class.getDeclaredField("theUnsafe");</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            UNSAFE = (Unsafe) field.get(<span class="keyword">null</span>);</span><br><span class="line">            stateOffset = UNSAFE.objectFieldOffset(UnsafeTest.class.getDeclaredField("state"));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception exception) {</span><br><span class="line">            System.out.println(exception.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(exception);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        UnsafeTest UnsafeTest = <span class="keyword">new</span> UnsafeTest();</span><br><span class="line">        Boolean s = UNSAFE.compareAndSwapInt(UnsafeTest, stateOffset, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h1 id="Java指令重排"><a href="#Java指令重排" class="headerlink" title="Java指令重排"></a>Java指令重排</h1><hr>
<p>Java 内存模型允许编译器和处理器对指令重排序以提高运行性能， 并且只会对<strong>不存在数据依赖性</strong>的指令重排序。 在单线程下重排序可以保证最终执行的结果与程序顺序执行的结果一致，但是在多线程下就会存在问题。</p>
<p>多线程下如何避免指令重排的问题？可以使用 volatile 来防止指令重排：</p>
<ul>
<li>写 volatile 变量时，可以确保 volatile 写之前的操作不会被编译器重排序到 volatile 写之后。 </li>
<li>读 volatile 变量时，可以确保 volatile 读之后的操作不会被编译器重排序到 volatile 读之前。</li>
</ul>
<h1 id="锁的概述"><a href="#锁的概述" class="headerlink" title="锁的概述"></a>锁的概述</h1><hr>
<h2 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h2><ul>
<li>悲观锁指对数据被外界修改持保守态度，认为数据很容易就会被其他线程修改，所以在数据被处理前先对数据进行加锁，并在整个数据处理过程中，使数据处于锁定状态。 </li>
<li>乐观锁是相对悲观锁来说的，它认为数据在一般情况下不会造成冲突，所以在访问记录前不会加排它锁，而是在进行数据提交更新时，才会正式对数据冲突与否进行检测。一般在表中添加 version 字段或使用业务状态来实现。</li>
</ul>
<h2 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h2><ul>
<li>公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚来决定的，也就是最早请求锁的线程将最早获取到锁。 </li>
<li>而非公平锁则在运行时闯入，也就是先来不一定先得。</li>
</ul>
<p>ReentrantLock 提供了公平和非公平锁的实现。</p>
<ul>
<li>公平锁：<code>ReentrantLock pairLock =new ReentrantLock(true）</code></li>
<li>非公平锁：<code>ReentrantLock pairLock =new ReentrantLock(false）</code>。 如果构造函数不传递参数，则默认是非公平锁。</li>
</ul>
<h2 id="独占锁与共享锁"><a href="#独占锁与共享锁" class="headerlink" title="独占锁与共享锁"></a>独占锁与共享锁</h2><ul>
<li>独占锁保证任何时候都只有一个线程能得到锁， ReentrantLock 就是以独占方式实现的。</li>
<li>共享锁则可以同时由多个线程持有，例如 ReadWriteLock 读写锁，它允许一个资源可以被多线程同时进行读操作。</li>
</ul>
<h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>当一个线程要获取一个被其他线程持有的独占锁时，该线程会被阻塞，那么当一个线 程再次获取它自己己经获取的锁时是否会被阻塞呢？如果不被阻塞，那么我们说该锁是可重入的，也就是只要该线程获取了该锁，那么可以无限次数（在高级篇中我们将知道，严格来说是有限次数）地进入被该锁锁住的代码。</p>
<p>可重入锁的原理是在锁内部维护一个线程标示，用来标示该锁目前被哪个线程占用，然后关联一个计数器。一开始计数器值为 0, 说明该锁没有被任何线程占用 。 当一个钱程获取了该锁时，计数器的值会变成 1 ，这时其他线程再来获取该锁时会发现锁的所有者不是自己而被阻塞挂起。</p>
<p>但是当获取了该锁的线程再次获取锁时发现锁拥有者是自己，就会把计数器值加＋1, 当释放锁后计数器值 -1 。 当计数器值为 0 时，锁里面的线程标示被重置为 null， 这时候被阻塞的线程会被唤醒来竞争获取该锁。</p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>自旋锁则是，当前线程在获取锁时，如果发现锁已经被其他线程占有，它不马上阻塞自己，在不放弃 CPU 使用权的情况下，多次尝试获取（默认次数是 10，可以使用 －XX:PreB lockS pinsh 参数设置该值），很有可能在后面几次尝试中其他线程己经释放了锁。 </p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程线程基础</title>
    <url>/2020/04/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h1><hr>
<p>在讲线程之前，我们先来了解一下什么是进程。</p>
<ul>
<li>进程是代码在数据集合上的一次运行活动 是系统进行资源分配和调度的基本单位</li>
<li>线程则是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源。</li>
</ul>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0140.PNG"  alt=""></p>
<p><strong>线程私有</strong>：</p>
<ul>
<li>程序计数器：当执行的是native方法时，记录undefined地址；当执行Java代码的时候，记录下一条指令地址。分支、跳转、循环、异常处理、线程恢复等基础功能都需要依赖程序计数器来完成</li>
<li>虚拟机栈：用于存储局部变量表、操作数栈、常量池引用等</li>
<li>本地方法栈：用于存储native方法的局部变量表、操作数栈、常量池引用等</li>
</ul>
<p><strong>线程共享</strong>：</p>
<ul>
<li>堆：用于存放对象实例。Java堆是垃圾收集器管理的主要区域，因此也被称为GC堆</li>
<li>方法区：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等<ul>
<li>运行时常量池：方法区的一部分，用于存放编译器生成的各种字面量和字符引用，这部分内容将在类加载后进入方法区的运行时常量池存放</li>
</ul>
</li>
</ul>
<h1 id="线程的创建与运行"><a href="#线程的创建与运行" class="headerlink" title="线程的创建与运行"></a>线程的创建与运行</h1><hr>
<h2 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h2><ul>
<li><p>实现Runnable接口的run方法</p>
</li>
<li><p>继承Thread类并重写run方法</p>
</li>
<li><p>使用FutureTask方式</p>
</li>
</ul>
<h2 id="线程的运行"><a href="#线程的运行" class="headerlink" title="线程的运行"></a>线程的运行</h2><p>调用Thread对象的start方法。调用start方法后，线程进入<strong>可运行状态</strong>，可运行状态分为<strong>就绪状态</strong>和<strong>运行状态</strong>，即获取了CPU时间片后才从就绪状态转为运行状态。</p>
<h1 id="线程通知与等待"><a href="#线程通知与等待" class="headerlink" title="线程通知与等待"></a>线程通知与等待</h1><hr>
<h2 id="wait函数"><a href="#wait函数" class="headerlink" title="wait函数"></a>wait函数</h2><p>当一个线程调用一个共享变量的wait方法时，那么该调用线程会被阻塞挂起，直到以下事件之一发生：</p>
<ul>
<li>其他线程调用了该共享对象的notify或notifyAll方法，当该步执行后，则该线程释放该共享变量的锁</li>
<li>其他线程调用了该线程的interrupt方法，该线程抛出异常返回</li>
</ul>
<p>另外需要注意的是，如果调用 wait 方法的线程没有事先获取该对象的监视器锁，则调用 wait 方法时该线程会抛出 IllegalMonitorStateException 异常。</p>
<p>如何获取一个共享变量的监视器锁</p>
<ul>
<li>执行synchronized代码块时，使用该共享变量作为参数</li>
<li>调用该共享变量的synchronized方法</li>
</ul>
<h3 id="虚假唤醒"><a href="#虚假唤醒" class="headerlink" title="虚假唤醒"></a>虚假唤醒</h3><p>即一个线程可以从挂起状态变为可以运行状态（ 就是被唤醒），即使该线程没有被其他线程调用 notify、notifyAll方法进行通知，或者被中断，或者等待超时。</p>
<p>因此我们需要在一个while循环中不断判断被唤醒的条件是否满足，若不满足则一直wait。</p>
<h3 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProducerAndConsumer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">            <span class="keyword">while</span> (size == MAX_SIZE) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">this</span>.size++;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            System.out.println(<span class="string">"produce: "</span> + name);</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>){</span><br><span class="line">            <span class="keyword">while</span> (size &lt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">this</span>.size--;</span><br><span class="line">            System.out.println(<span class="string">"consume: "</span> + name);</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        LeetCode leetCode = <span class="keyword">new</span> LeetCode();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                leetCode.produce(<span class="string">"MAC"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                leetCode.produce(<span class="string">"Huawei"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                leetCode.consume();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                leetCode.consume();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="wait-long-timeout-函数"><a href="#wait-long-timeout-函数" class="headerlink" title="wait(long timeout)函数"></a>wait(long timeout)函数</h2><p>该方法相 wait 方法多了一个超时参数，它的不同之处在于，如果一个线程调用共享对象的该方法挂起后，没有在指定的 timeout ms 内被其他线程调用该共享变量的notify 或者 notifyAll 方法唤醒，那么该函数还是会因为超时而返回。</p>
<h2 id="notify函数"><a href="#notify函数" class="headerlink" title="notify函数"></a>notify函数</h2><p>一个线程调用共享对象的 notify 方法后，会唤醒一个在该共享变量上调用 wait 系列方法后被挂起的线程。一个共享变量上可能会有多个线程在等待，具体唤醒哪个等待的线程是随机的。</p>
<p>此外，被唤醒的线程不能马上从 wait 方法返回并继续执行，它必须在获取了共享对象的监视器锁后才可以返回也就是唤醒它的线程释放了共享变量上的监视器锁后，被唤醒的线程也不一定会获取到共享对象的监视器锁，这是因为该线程还需要和其他线程一起竞争该锁只有该线程竞争到了共享变量的监视器锁后才可继续执行。</p>
<h2 id="notifyAll函数"><a href="#notifyAll函数" class="headerlink" title="notifyAll函数"></a>notifyAll函数</h2><p>不同于在共享变量上调用 notify 函数会唤醒被阻塞到该共享变量上一个线程，notifyAll 方法则会唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。</p>
<h1 id="等待线程执行终止的join方法"><a href="#等待线程执行终止的join方法" class="headerlink" title="等待线程执行终止的join方法"></a>等待线程执行终止的join方法</h1><hr>
<p>某个线程需要等待多个线程执行完毕才可以执行，这个时候可以使用join方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"t1"</span>);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            System.out.println(<span class="string">"t2"</span>);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    System.out.println(<span class="string">"wait t1 t2 t3 complete"</span>);</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    System.out.println(<span class="string">"main thread start"</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h1 id="让线程睡眠的sleep方法"><a href="#让线程睡眠的sleep方法" class="headerlink" title="让线程睡眠的sleep方法"></a>让线程睡眠的sleep方法</h1><hr>
<p>Thread 类中有一个静态的 sleep 方法，当一个执行中的线程调用了 Thread 的 sleep 法后，调用线程会暂时让出指定时间的执行权，也就是在这期间不参与 CPU 的调度，但是该线程所拥有的监视器资源，比如锁还是持有不让出的。</p>
<p>指定的睡眠时间到了后该函数会正常返回，线程就处于就绪状态，然后参与 CPU 的调度，获取到 CPU 资源后就可以继续运行了。如果在睡眠期间其他线程调用了该线程的 interrupt 方法中断了该线程，则该线程会在调用 sleep 方法的地方抛出 InterruptedException 异常而返回。</p>
<h1 id="让出CPU执行权的yield方法"><a href="#让出CPU执行权的yield方法" class="headerlink" title="让出CPU执行权的yield方法"></a>让出CPU执行权的yield方法</h1><hr>
<p>Thread 有一 静态 yield 方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己 CPU 使用，但是线程调度器可以无条件忽略这个暗示。</p>
<p>当一 线程调用 yield 方法时， 当前线程会让出 CPU 使用权，然后处于就绪状态，线程调度器会从线程就绪队列里面获取一个线程优先级最高的线程，当然也有可能会调度到刚刚让出 CPU 的那个线程来获取 CPU 执行权。</p>
<h1 id="理解线程上下文切换"><a href="#理解线程上下文切换" class="headerlink" title="理解线程上下文切换"></a>理解线程上下文切换</h1><hr>
<p>当前线程使用完 CPU 时间片后，就会处于就绪状态并让出 CPU 资源让其他线程使用，这就是一次上下文切换。</p>
<h1 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h1><hr>
<h2 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h2><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0141.PNG"  alt=""></p>
<p>死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的互相等待的现象，在无外力作用的情况下，这些线程会 直相互等待而无法继续运行下去。</p>
<p>死锁产生的条件：</p>
<ul>
<li>互斥条件：指线程对己经获取到的资源进行排它性使用 即该资源同时只由一个线程占用。如果此时还有其他线程请求获取该资源，则请求者只能等待，直至占有资线的线程释放该资源。</li>
<li>请求并持有条件：指一个线程己经持有了至少一个资源，但又提出了新的资源请求，而新资源己被其他线程占有，所以当前线程会被阻塞，但阻塞的同时并不会释放自己已经拥有的资源。</li>
<li>不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其他线程抢占，除非自己主动释放资源。</li>
<li>环路等待条件：指在发生死锁时，必然存在一个线程一资源的环形链，如上图。</li>
</ul>
<h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁"></a>如何避免死锁</h2><p>想要避免死锁，只需要破坏其中一个条件即可。方法有以下：</p>
<ul>
<li>资源申请顺序一致：破坏了请求并持有条件和环路等待条件</li>
<li>一次性申请所有资源：破坏了请求并保持条件</li>
<li>线程申请某资源时若申请不到，则主动释放其已经拥有的资源：破快了不可剥夺条件</li>
</ul>
<h1 id="守护线程与用户线程"><a href="#守护线程与用户线程" class="headerlink" title="守护线程与用户线程"></a>守护线程与用户线程</h1><hr>
<p>守护线程：由JVM自动创建，服务于用户线程（比如垃圾回收线程等）</p>
<p>用户线程：由用户创建，比如main函数所在的线程</p>
<p>区别：当所有用户线程结束时，JVM会正常退出，而与守护线程结束与否无关</p>
<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><hr>
<h2 id="ThreadLocal介绍"><a href="#ThreadLocal介绍" class="headerlink" title="ThreadLocal介绍"></a>ThreadLocal介绍</h2><p>多钱程访问同一个共享资源时特别容易出现并发问题，特别是在多个线程需要对共享资源进行写入时，为了保证线程安全，一般使用者在访问共享变量时需要进行适当的同步。</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0142.PNG"  alt=""></p>
<p>为了解决这个问题，我们可以使用ThreadLocal类。当你创建了一个ThreadLocal变量时，每一个访问该变量的线程都会将其拷贝一个变量到自己的本地内存里。</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0143.PNG"  alt=""></p>
<h2 id="ThreadLocal的实现原理"><a href="#ThreadLocal的实现原理" class="headerlink" title="ThreadLocal的实现原理"></a>ThreadLocal的实现原理</h2><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0144.PNG"  alt=""></p>
<p>由上图我们可以看到，Thread类中有两个变量叫threadLocals和inheritableThreadLocals，他们都是ThreadLocalMap类型。在默认情况下，这两个变量都为null，只有当线程第一次调用ThreadLocal的set或get方法时才会创建它们。</p>
<p>而其实ThreadLocal就是一个工具，调用ThreadLocal实例的set方法，就是把副本保存到线程里的threadLocasl变量里，调用get方法就从线程的threadLocals里取出该副本，调用remove方法就可以在threadLocals里删除该副本。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment">     * by the ThreadLocal class. */</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal values pertaining to this thread. This map is</span></span><br><span class="line"><span class="comment">     * maintained by the InheritableThreadLocal class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap inheritableThreadLocals = <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>下面讲解ThreadLocal的get、set和remove方法</p>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns the value in the current thread's copy of this</span></span><br><span class="line"><span class="comment">* thread-local variable.  If the variable has no value for the</span></span><br><span class="line"><span class="comment">* current thread, it is first initialized to the value returned</span></span><br><span class="line"><span class="comment">* by an invocation of the {<span class="doctag">@link</span> #initialValue} method.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the current thread's value of this thread-local</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//获取当前线程</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//获取当前线程的threadLocals变量</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">//获取value值</span></span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Sets the current thread's copy of this thread-local variable</span></span><br><span class="line"><span class="comment">* to the specified value.  Most subclasses will have no need to</span></span><br><span class="line"><span class="comment">* override this method, relying solely on the {<span class="doctag">@link</span> #initialValue}</span></span><br><span class="line"><span class="comment">* method to set the values of thread-locals.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value the value to be stored in the current thread's copy of</span></span><br><span class="line"><span class="comment">*        this thread-local.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>{</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value); <span class="comment">//设置value值</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Removes the current thread's value for this thread-local</span></span><br><span class="line"><span class="comment">* variable.  If this thread-local variable is subsequently</span></span><br><span class="line"><span class="comment">* {<span class="doctag">@linkplain</span> #get read} by the current thread, its value will be</span></span><br><span class="line"><span class="comment">* reinitialized by invoking its {<span class="doctag">@link</span> #initialValue} method,</span></span><br><span class="line"><span class="comment">* unless its value is {<span class="doctag">@linkplain</span> #set set} by the current thread</span></span><br><span class="line"><span class="comment">* in the interim.  This may result in multiple invocations of the</span></span><br><span class="line"><span class="comment">* {<span class="doctag">@code</span> initialValue} method in the current thread.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>{</span><br><span class="line">    ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">        m.remove(<span class="keyword">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="lnheritableThreadLocal类"><a href="#lnheritableThreadLocal类" class="headerlink" title="lnheritableThreadLocal类"></a>lnheritableThreadLocal类</h2><p>如果想让子线程可以访问在父线程中设置的本地变量，则可以使用lnheritableThreadLocal类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InheritableThreadLocal</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes the child's initial value for this inheritable thread-local</span></span><br><span class="line"><span class="comment">     * variable as a function of the parent's value at the time the child</span></span><br><span class="line"><span class="comment">     * thread is created.  This method is called from within the parent</span></span><br><span class="line"><span class="comment">     * thread before the child is started.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * This method merely returns its input argument, and should be overridden</span></span><br><span class="line"><span class="comment">     * if a different behavior is desired.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentValue the parent thread's value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the child thread's initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">childValue</span><span class="params">(T parentValue)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> parentValue;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the map associated with a ThreadLocal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the current thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> t.inheritableThreadLocals;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the map associated with a ThreadLocal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the current thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstValue value for the initial entry of the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>{</span><br><span class="line">        t.inheritableThreadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>简单来说，就是使用inheritableThreadLocals变量代替了threadLocals变量，而当父线程创建子线程时，Thread构造函数会把父线程中的inheritableThreadLocals变量里面的本地变量复制一份保存到子线程中的inheritableThreadLocals变量里面。</p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java关键字解析</title>
    <url>/2020/04/14/Java%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
  </entry>
  <entry>
    <title>Java集合的源码分析</title>
    <url>/2020/04/13/Java%E9%9B%86%E5%90%88%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><hr>
<h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="comment">//序列化Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认初始化capacity</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个空列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = {};</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认空列表，如果使用默认构造函数，则elementData被赋予该值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据存储对象列表，该对象不参与序列化</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//列表的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="默认构造函数（无参构造）"><a href="#默认构造函数（无参构造）" class="headerlink" title="默认构造函数（无参构造）"></a>默认构造函数（无参构造）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无参构造，使用默认空列表，capacity默认为10</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="带int类型的构造函数"><a href="#带int类型的构造函数" class="headerlink" title="带int类型的构造函数"></a>带int类型的构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由用户指定capacity</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="带Collection类型的构造函数"><a href="#带Collection类型的构造函数" class="headerlink" title="带Collection类型的构造函数"></a>带Collection类型的构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>{</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="comment">// 这里的意思是c.toArray返回的是它实际的类型</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            <span class="title">elementData</span> </span>= Arrays.copyOf(elementData, size, Object[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>这里调用到了Arrays.copyOf方法，我们来看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &lt;U&gt; the class of the objects in the original array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &lt;T&gt; the class of the objects in the returned array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> original the array to be copied</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> newLength the length of the copy to be returned</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> newType the class of the copy to be returned</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> a copy of the original array, truncated or padded with nulls</span></span><br><span class="line"><span class="comment">*     to obtain the specified length</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) {</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="comment">//创建一个空数组</span></span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">        ? (T[]) new Object[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    <span class="comment">//复制数组</span></span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>这里又用到了System.arraycopy方法，我们再来看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      src      the source array.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      srcPos   starting position in the source array.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      dest     the destination array.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      destPos  starting position in the destination data.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>      length   the number of array elements to be copied.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, Object dest, <span class="keyword">int</span> destPos, <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="ArrayList的扩容机制"><a href="#ArrayList的扩容机制" class="headerlink" title="ArrayList的扩容机制"></a>ArrayList的扩容机制</h2><h3 id="被动扩容"><a href="#被动扩容" class="headerlink" title="被动扩容"></a>被动扩容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将一个元素加到列表尾部</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>{</span><br><span class="line">    <span class="comment">//当前capacity为10，size为0，调用ensureCapacityInternal方法检查是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算需要的最小capacity</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="comment">//若条件成立，返回DEFAULT_CAPACITY和minCapacity的较大值</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//minCapacity为所需要的最小capacity</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="comment">//调用calculateCapacity计算最小capacity</span></span><br><span class="line">    <span class="comment">//然后调用ensureExplicitCapacity</span></span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="comment">// modCount记录该列表被结构化修改的次数，是从父类AbstractList继承而来的</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// 只有当所需最小capacity大于当前capacity时，进入grow方法进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ArrayList可容纳元素的最大数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 增加capacity</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">// 当前数组的capacity</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// 新capacity大约为旧capacity的1.5倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//若新capacity小于所需最小capacity，则将其设置为所需最小capacity</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">    	newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">//若新capacity大于ArrayList可容纳元素的最大数量，则调用hugeCapacity方法</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">    	newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// 调用Arrays.copyOf扩容</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    	MAX_ARRAY_SIZE;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="手动扩容"><a href="#手动扩容" class="headerlink" title="手动扩容"></a>手动扩容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 该方法是手动增加该对象的capacity，以确保它至少可以容纳由minCapacity参数指定的元素数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span>   minCapacity   the desired minimum capacity</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>{</span><br><span class="line">	<span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">    ? <span class="number">0</span></span><br><span class="line">    : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) {</span><br><span class="line">    	ensureExplicitCapacity(minCapacity);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="将当前capacity设置为当前size"><a href="#将当前capacity设置为当前size" class="headerlink" title="将当前capacity设置为当前size"></a>将当前capacity设置为当前size</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将当前capacity设置为当前size</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>{</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">if</span> (size &lt; elementData.length) {</span><br><span class="line">        elementData = (size == <span class="number">0</span>)</span><br><span class="line">            ? EMPTY_ELEMENTDATA</span><br><span class="line">            : Arrays.copyOf(elementData, size);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><hr>
<p>HashMap根据键的hashCode值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致。如果需要满足线程安全，可以用Collections的synchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。</p>
<h2 id="默认参数成员变量"><a href="#默认参数成员变量" class="headerlink" title="默认参数成员变量"></a>默认参数成员变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="comment">//序列化Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//默认capacity是16，且一定要是2的n次方</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//允许的最大capacity</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认loadFactor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当一个桶的元素个数超过该threshold时，使用红黑树储存而不是链表</span></span><br><span class="line">    <span class="comment">//该threshold必须大于2，建议最小为8</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在一个resize操作后，若一个桶的元素个数小于该threshold，则改为链表储存</span></span><br><span class="line">    <span class="comment">//该threshold应该小于TREEIFY_THRESHOLD，最大为6</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//红黑树的最小capacity</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="数据成员变量"><a href="#数据成员变量" class="headerlink" title="数据成员变量"></a>数据成员变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>{</span><br><span class="line">	<span class="comment">//数据表</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment">     * for keySet() and values().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前key-value对的数量</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该表被结构化修改的次数</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该threshold=capacity*loadFactor，当size超过该threshold时则进行扩容</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//loadFactor可以大于1</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="桶结构"><a href="#桶结构" class="headerlink" title="桶结构"></a>桶结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="默认构造函数（无参构造）-1"><a href="#默认构造函数（无参构造）-1" class="headerlink" title="默认构造函数（无参构造）"></a>默认构造函数（无参构造）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="带int类型的构造函数-1"><a href="#带int类型的构造函数-1" class="headerlink" title="带int类型的构造函数"></a>带int类型的构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="带int-float类型的构造函数"><a href="#带int-float类型的构造函数" class="headerlink" title="带int,float类型的构造函数"></a>带int,float类型的构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="带Map类型的构造函数"><a href="#带Map类型的构造函数" class="headerlink" title="带Map类型的构造函数"></a>带Map类型的构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Implements Map.putAll and Map constructor.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> m the map</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> evict false when initially constructing this map, else</span></span><br><span class="line"><span class="comment">* true (relayed to method afterNodeInsertion).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> s = m.size();</span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) { <span class="comment">// pre-size</span></span><br><span class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">                resize();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) {</span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></table></figure>

<h2 id="确定哈希桶数组索引位置"><a href="#确定哈希桶数组索引位置" class="headerlink" title="确定哈希桶数组索引位置"></a>确定哈希桶数组索引位置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// &gt;&gt;&gt;是无符号右移运算符，即不管正负标志位为0还是1，将该数的二进制码整体右移，左边部分总是以0填充，右边部分舍弃</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p>
<p>举例：n为table长度</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0125.jpg"  alt=""></p>
<h2 id="分析HashMap的put方法"><a href="#分析HashMap的put方法" class="headerlink" title="分析HashMap的put方法"></a>分析HashMap的put方法</h2><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0126.jpg"  alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将一个键值对放入table中，若该key已经存在，则将对应value更新为新的value</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>{</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//若当前table为空或长度为0，则进行resize扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//若该key对应的table项为空，则创建新key-value对</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> {</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//若该key存在，覆盖value值</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">//若该节点为树节点，则调用putTreeVal在红黑树插入key-value对</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">//否则，该节点为链表节点</span></span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">//遍历链表，插入键值对</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) {</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) {</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//若插入后的链表大小大于TREEIFY_THRESHOLD，则转换为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//若该key值存在，则覆盖value值</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) { <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">//若当前size大于threshold，扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="HashMap的扩容机制"><a href="#HashMap的扩容机制" class="headerlink" title="HashMap的扩容机制"></a>HashMap的扩容机制</h2><p>扩容(resize)就是重新计算容量，向HashMap对象里不停的添加元素，而HashMap对象内部的数组无法装载更多的元素时，对象就需要扩大数组的长度，以便能装入更多的元素。当然Java里的数组是无法自动扩容的，方法是使用一个新的数组代替已有的容量小的数组，就像我们用一个小桶装水，如果想装更多的水，就得换大水桶。</p>
<h3 id="JDK1-7"><a href="#JDK1-7" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0132.PNG"  alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>{   <span class="comment">//传入新的容量</span></span><br><span class="line">    Entry[] oldTable = table;    <span class="comment">//引用扩容前的Entry数组</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;         </span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) {  <span class="comment">//扩容前的数组大小如果已经达到最大(2^30)了</span></span><br><span class="line">        threshold = Integer.MAX_VALUE; <span class="comment">//修改阈值为int的最大值(2^31-1)，这样以后就不会扩容了</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];  <span class="comment">//初始化一个新的Entry数组</span></span><br><span class="line">    transfer(newTable);                         <span class="comment">//！！将数据转移到新的Entry数组里</span></span><br><span class="line">    table = newTable;                           <span class="comment">//HashMap的table属性引用新的Entry数组</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);<span class="comment">//修改阈值</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>{</span><br><span class="line">    Entry[] src = table;                   <span class="comment">//src引用了旧的Entry数组</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) { <span class="comment">//遍历旧的Entry数组</span></span><br><span class="line">        Entry&lt;K,V&gt; e = src[j];             <span class="comment">//取得旧Entry数组的每个元素</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) {</span><br><span class="line">            src[j] = <span class="keyword">null</span>;<span class="comment">//释放旧Entry数组的对象引用（for循环后，旧的Entry数组不再引用任何对象）</span></span><br><span class="line">            <span class="keyword">do</span> {</span><br><span class="line">                Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">                <span class="keyword">int</span> i = indexFor(e.hash, newCapacity); <span class="comment">//！！重新计算每个元素在数组中的位置</span></span><br><span class="line">                <span class="comment">//newTable[i]的引用赋给了e.next，也就是使用了单链表的头插入方式，同一位置上新元素总会被放在链表的头部位置；</span></span><br><span class="line">                <span class="comment">//这样先放在一个索引上的元素终会被放到Entry链的尾部(如果发生了hash冲突的话）</span></span><br><span class="line">                e.next = newTable[i]; </span><br><span class="line">                newTable[i] = e;      <span class="comment">//将元素放在数组上</span></span><br><span class="line">                e = next;             <span class="comment">//访问下一个Entry链上的元素</span></span><br><span class="line">            } <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>下面举个例子说明下扩容过程。假设了我们的hash算法就是简单的用key mod 一下表的大小（也就是数组的长度）。其中的哈希桶数组table的size=2， 所以key = 3、7、5，put顺序依次为 5、7、3。在mod 2以后都冲突在table[1]这里了。这里假设负载因子 loadFactor=1，即当键值对的实际大小size 大于 table的实际大小时进行扩容。接下来的三个步骤是哈希桶数组 resize成4，然后所有的Node重新rehash的过程。</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0127.jpg"  alt=""></p>
<h3 id="JDK1-8"><a href="#JDK1-8" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0133.PNG"  alt=""></p>
<p>下面我们讲解下JDK1.8做了哪些优化。经过观测可以发现，我们使用的是2次幂的扩展(指长度扩为原来2倍)，所以，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置。看下图可以明白这句话的意思，n为table的长度，图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。<img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0128.jpg"  alt=""></p>
<p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0129.jpg"  alt=""></p>
<p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0130.jpg"  alt="">这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化或将capacity*2</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the table</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() {</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//非初始化的扩容</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">//超过最大值，则不再扩充</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) {</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//没超过最大值，就扩充为原来的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="comment">//初始化的扩容</span></span><br><span class="line">    <span class="keyword">else</span> {               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//计算新的threshold</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//设置新的threshold</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">//创建新的table</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>({<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>})</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">//将旧table里的数据转移到新table中去，即rehash</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">//遍历旧table中的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) {</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">//若当前节点不为null</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) {</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//若当前节点的next为null，即该桶只有一个元素，则直接赋值</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">//若当前节点为树节点，将该树的元素分离到新table的位置上</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="comment">//否则，当前节点为链表节点</span></span><br><span class="line">                <span class="keyword">else</span> { <span class="comment">// preserve order</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> {</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">//原索引</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) {</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="comment">//原索引+oldCap</span></span><br><span class="line">                        <span class="keyword">else</span> {</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        }</span><br><span class="line">                    } <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//将原索引放到table中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) {</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">//将原索引+oldCap放到table中</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) {</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h1><hr>
<p>ConcurrentHashMap是HashMap的线程安全实现版本。其基本结构和HashMap是一样的，但是它是线程安全的，它采用了分段锁的策略。</p>
<h2 id="默认参数成员变量-1"><a href="#默认参数成员变量-1" class="headerlink" title="默认参数成员变量"></a>默认参数成员变量</h2><p>其实我觉得看英文注释也没有什么问题，就懒得翻译了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7249069246763182397L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The largest possible table capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial table capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The largest possible (non-power of two) array size.</span></span><br><span class="line"><span class="comment">     * Needed by toArray and related methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default concurrency level for this table. Unused but</span></span><br><span class="line"><span class="comment">     * defined for compatibility with previous versions of this class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor for this table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for using a tree rather than list for a bin.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">     * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">     * The value should be at least 4 * TREEIFY_THRESHOLD to avoid</span></span><br><span class="line"><span class="comment">     * conflicts between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Minimum number of rebinnings per transfer step. Ranges are</span></span><br><span class="line"><span class="comment">     * subdivided to allow multiple resizer threads.  This value</span></span><br><span class="line"><span class="comment">     * serves as a lower bound to avoid resizers encountering</span></span><br><span class="line"><span class="comment">     * excessive memory contention.  The value should be at least</span></span><br><span class="line"><span class="comment">     * DEFAULT_CAPACITY.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TRANSFER_STRIDE = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of bits used for generation stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     * Must be at least 6 for 32bit arrays.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum number of threads that can help resize.</span></span><br><span class="line"><span class="comment">     * Must fit in 32 - RESIZE_STAMP_BITS bits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RESIZERS = (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bit shift for recording size stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Encodings for Node hash fields. See above for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// hash for forwarding nodes</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// hash for roots of trees</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; <span class="comment">// hash for transient reservations</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_BITS = <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Number of CPUS, to place bounds on some sizings */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** For serialization compatibility. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectStreamField[] serialPersistentFields = {</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField(<span class="string">"segments"</span>, Segment[]<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">        new ObjectStreamField("segmentMask", Integer.TYPE),</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField(<span class="string">"segmentShift"</span>, Integer.TYPE)</span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="数据成员变量-1"><a href="#数据成员变量-1" class="headerlink" title="数据成员变量"></a>数据成员变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>{</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The array of bins. Lazily initialized upon first insertion.</span></span><br><span class="line"><span class="comment">     * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next table to use; non-null only while resizing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base counter value, used mainly when there is no contention,</span></span><br><span class="line"><span class="comment">     * but also as a fallback during table initialization</span></span><br><span class="line"><span class="comment">     * races. Updated via CAS.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> baseCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table initialization and resizing control.  When negative, the</span></span><br><span class="line"><span class="comment">     * table is being initialized or resized: -1 for initialization,</span></span><br><span class="line"><span class="comment">     * else -(1 + the number of active resizing threads).  Otherwise,</span></span><br><span class="line"><span class="comment">     * when table is null, holds the initial table size to use upon</span></span><br><span class="line"><span class="comment">     * creation, or 0 for default. After initialization, holds the</span></span><br><span class="line"><span class="comment">     * next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next table index (plus one) to split while resizing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table of counter cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// views</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> KeySetView&lt;K,V&gt; keySet;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ValuesView&lt;K,V&gt; values;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> EntrySetView&lt;K,V&gt; entrySet;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>可以看到几乎每一个数据成员变量都使用了volatile关键字修饰，关于volatile关键字可以参考该连接。</p>
<h2 id="桶结构-1"><a href="#桶结构-1" class="headerlink" title="桶结构"></a>桶结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可以看到val和next都使用了volatile关键字修饰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V val;</span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="构造函数-2"><a href="#构造函数-2" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">    putAll(m);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">        initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">    <span class="keyword">long</span> size = (<span class="keyword">long</span>)(<span class="number">1.0</span> + (<span class="keyword">long</span>)initialCapacity / loadFactor);</span><br><span class="line">    <span class="keyword">int</span> cap = (size &gt;= (<span class="keyword">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">        MAXIMUM_CAPACITY : tableSizeFor((<span class="keyword">int</span>)size);</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>这些都和HashMap大同小异，但是我们看到了有几个构造函数调用了tableSizeFor方法，我们来看一下是什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns a power of two table size for the given desired capacity.</span></span><br><span class="line"><span class="comment">* See Hackers Delight, sec 3.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> n = c - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>这个方法就是用来获取大于c且最接近2的整数次幂的数，也就是下一次扩容的大小。</p>
<h2 id="分析ConcurrentHashMap的put方法"><a href="#分析ConcurrentHashMap的put方法" class="headerlink" title="分析ConcurrentHashMap的put方法"></a>分析ConcurrentHashMap的put方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Maps the specified key to the specified value in this table.</span></span><br><span class="line"><span class="comment">* Neither the key nor the value can be null.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) {</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">//当table为空时，进行初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="comment">//若当前散列的位置为空，则直接插入而不用加锁</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//若当前散列的位置是table的链接点时，就表明在扩容，调用helpTransfer帮助当前线程扩容</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="comment">//散列冲突</span></span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) {</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) {</span><br><span class="line">                    <span class="comment">//按链表的方式处理</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) {</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) {</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) {</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            }</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) {</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">//按红黑树的方式处理</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) {</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                              value)) != <span class="keyword">null</span>) {</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//若链表的长度大于TREEIFY_THRESHOLD，则将链表转换为红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>我们再来看一下initTable()方法做了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes table, using the size recorded in sizeCtl.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() {</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">//sizeCtl为-1时，表示该table正在被初始化或扩容</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin，即有线程正在初始化table，等待</span></span><br><span class="line">        <span class="comment">//设置为-1，表示当前线程正在进行初始化</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="ConcurrentHashMap的get方法"><a href="#ConcurrentHashMap的get方法" class="headerlink" title="ConcurrentHashMap的get方法"></a>ConcurrentHashMap的get方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Returns the value to which the specified key is mapped,</span></span><br><span class="line"><span class="comment">* or {<span class="doctag">@code</span> null} if this map contains no mapping for the key.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> NullPointerException if the specified key is null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>{</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) {</span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>我们可以看到，get方法是不用加锁的，因此是非阻塞的，并且由于Node中的val添加了volatile关键字，保证了可见性，因此get方法每次获取到的值都是最新的。</p>
<h2 id="JDK1-7和JDK1-8的区别"><a href="#JDK1-7和JDK1-8的区别" class="headerlink" title="JDK1.7和JDK1.8的区别"></a>JDK1.7和JDK1.8的区别</h2><h3 id="JDK1-7-1"><a href="#JDK1-7-1" class="headerlink" title="JDK1.7"></a>JDK1.7</h3><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0135.PNG"  alt=""></p>
<p>JDK1.7的ConcurrentHashMap使用的是<strong>分段数组+链表</strong>实现，每一个分段都是一个segment，对应着一个table（类似于HashMap的结构），而每一个table都是一个HashEntry数组，数组的每一项都是一个HashEntry链表。而segment是一个可重入的互斥锁，继承于ReentrantLock，因此当有线程需要访问该segment的内容时，则需要获取该segment的锁，获取锁后其他线程就不能访问该segment了。这就是<strong>分段锁</strong>的思想。因此当多线程访问ConcurrentHashMap里不同分段的数据时不会产生冲突</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0134.png"  alt=""></p>
<h3 id="JDK1-8-1"><a href="#JDK1-8-1" class="headerlink" title="JDK1.8"></a>JDK1.8</h3><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0136.PNG"  alt=""></p>
<p>JDK1.8取消了segment分段锁，采用了CAS和synchronized来保证线程安全。数据结构和HashMap类似，使用<strong>数组+链表/红黑树</strong>。synchronized只锁定当前链表或红黑树的首节点，也就是说，只要不发生哈希冲突，就不需要同步操作，可以直接插入。</p>
<h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><p>美团技术团队：<a href="https://zhuanlan.zhihu.com/p/21673805" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21673805</a></p>
<p>Java3y：<a href="https://zhuanlan.zhihu.com/p/35668936" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35668936</a></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>基于矩阵分解的推荐系统</title>
    <url>/2020/04/13/%E5%9F%BA%E4%BA%8E%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3%E7%9A%84%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="矩阵分解简介"><a href="#矩阵分解简介" class="headerlink" title="矩阵分解简介"></a>矩阵分解简介</h1><hr>
<p>矩阵分解活跃在推荐领域，基于SVD的推荐系统也是一种矩阵分解。给定一个用户评分表，通常是一个大矩阵，M行N列，M代表用户数，n代表项目数。而且这个矩阵在实践中非常稀疏。我们希望我们可以通过现有的用户评分来预测用户对未定价商品的评价。通过矩阵分解，可以挖掘用户和项目的潜在因素以估计缺失值。</p>
<h2 id="交替最小二乘法"><a href="#交替最小二乘法" class="headerlink" title="交替最小二乘法"></a>交替最小二乘法</h2><p>ALS通常用于基于矩阵分解的推荐系统中。例如：将用户（user）对商品（item）的评分矩阵分解为两个矩阵：一个用户因子矩阵X(n_user,K)，一个物品因子矩阵Y(n_item,K)。将矩阵分解后再合并，可以达到缺失值填充的效果，因此我们就可以基于这个新填充的矩阵来进行推荐。</p>
<p>以下公式取 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="24.073ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 10640.1 950" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6D"></use></g><g data-mml-node="mo" transform="translate(1155.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2211.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-75"></use></g></g><g data-mml-node="mi" transform="translate(3266, 0)"><use xlink:href="#MJX-TEX-I-73"></use></g><g data-mml-node="mi" transform="translate(3735, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(4201, 0)"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mo" transform="translate(4929.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="884px" font-family="serif">，</text></g><g data-mml-node="mi" transform="translate(6107.6, 0)"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mo" transform="translate(6985.4, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(8041.1, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mi" transform="translate(8935.1, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(9296.1, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(9762.1, 0)"><use xlink:href="#MJX-TEX-I-6D"></use></g></g></g></svg></mjx-container></p>
<p>分解的公式为：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="44.752ex" height="2.583ex" role="img" focusable="false" viewBox="0 -891.7 19780.2 1141.7" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mo" transform="translate(759, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(1148, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-75"></use></g></g><g data-mml-node="mi" transform="translate(2202.5, 0)"><use xlink:href="#MJX-TEX-I-73"></use></g><g data-mml-node="mi" transform="translate(2671.5, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(3137.5, 0)"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mo" transform="translate(3588.5, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(4033.1, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mi" transform="translate(4927.1, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(5288.1, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(5754.1, 0)"><use xlink:href="#MJX-TEX-I-6D"></use></g><g data-mml-node="mo" transform="translate(6632.1, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(7298.9, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(8354.6, 0)"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mo" transform="translate(9206.6, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(9595.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-75"></use></g></g><g data-mml-node="mi" transform="translate(10650.1, 0)"><use xlink:href="#MJX-TEX-I-73"></use></g><g data-mml-node="mi" transform="translate(11119.1, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(11585.1, 0)"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mo" transform="translate(12036.1, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(12480.8, 0)"><use xlink:href="#MJX-TEX-I-4B"></use></g><g data-mml-node="mo" transform="translate(13369.8, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(13758.8, 0)"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mo" transform="translate(14521.8, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(14910.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mi" transform="translate(600, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mi" transform="translate(15804.7, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(16165.7, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(16631.7, 0)"><use xlink:href="#MJX-TEX-I-6D"></use></g><g data-mml-node="mo" transform="translate(17509.7, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(17954.4, 0)"><use xlink:href="#MJX-TEX-I-4B"></use></g><g data-mml-node="msup" transform="translate(18843.4, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(389, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g></g></g></g></svg></mjx-container></p>
<p>其中，K称为隐含特征数，一般取<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="17.023ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7524.2 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4B"></use></g><g data-mml-node="mo" transform="translate(1166.8, 0)"><use xlink:href="#MJX-TEX-N-3C"></use><use xlink:href="#MJX-TEX-N-3C" transform="translate(778, 0)"></use></g><g data-mml-node="mi" transform="translate(3000.6, 0)"><use xlink:href="#MJX-TEX-I-6D"></use></g><g data-mml-node="mi" transform="translate(3878.6, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(4223.6, 0)"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mo" transform="translate(4823.6, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(5212.6, 0)"><use xlink:href="#MJX-TEX-I-6D"></use></g><g data-mml-node="mo" transform="translate(6090.6, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(6535.2, 0)"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mo" transform="translate(7135.2, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></svg></mjx-container>。</p>
<p>为了使低维矩阵逼近原始评分矩阵R，需要最小化平方损失函数：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.018ex" xmlns="http://www.w3.org/2000/svg" width="26.443ex" height="3.167ex" role="img" focusable="false" viewBox="0 -950 11687.6 1400" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4C"></use></g><g data-mml-node="mo" transform="translate(681, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1070, 0)"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mo" transform="translate(1922, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2366.7, 0)"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mo" transform="translate(3129.7, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(3796.4, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(4852.2, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="mo" transform="translate(6296.2, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(6685.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="TeXAtom" transform="translate(451, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g></g><g data-mml-node="mo" transform="translate(7943.7, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msubsup" transform="translate(8943.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-78"></use></g><g data-mml-node="mi" transform="translate(572, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g><g data-mml-node="mi" transform="translate(572, -247) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="msub" transform="translate(10063.7, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g><g data-mml-node="msup" transform="translate(10895.1, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></svg></mjx-container></p>
<p>其中：<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="1.959ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 866 599.8" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-78"></use></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></g></svg></mjx-container>表示用户i的偏好的隐含特征向量，维度为（1，K）；<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="1.881ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 831.3 736.2" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g></g></g></svg></mjx-container>表示商品j包含的隐含特征向量，维度为（1，K）；<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.462ex" xmlns="http://www.w3.org/2000/svg" width="2.618ex" height="1.957ex" role="img" focusable="false" viewBox="0 -661 1157 865" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(451, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mi" transform="translate(745, 0)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g></g></svg></mjx-container>表示用户i对商品j的评分；<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="4.414ex" height="2.57ex" role="img" focusable="false" viewBox="0 -841.7 1951.1 1136" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-78"></use></g><g data-mml-node="mi" transform="translate(572, 363) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g><g data-mml-node="mi" transform="translate(572, -284.4) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="msub" transform="translate(1119.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g></g></g></svg></mjx-container>表示用户i对商品j的评分的近似。</p>
<p>损失函数一般需要加入正则化项来避免过拟合，因此我们使用L2正则化：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.018ex" xmlns="http://www.w3.org/2000/svg" width="43.235ex" height="3.167ex" role="img" focusable="false" viewBox="0 -950 19109.9 1400" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4C"></use></g><g data-mml-node="mo" transform="translate(681, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1070, 0)"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mo" transform="translate(1922, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2366.7, 0)"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mo" transform="translate(3129.7, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(3796.4, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(4852.2, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="mo" transform="translate(6296.2, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(6685.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="TeXAtom" transform="translate(451, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g></g><g data-mml-node="mo" transform="translate(7943.7, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msubsup" transform="translate(8943.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-78"></use></g><g data-mml-node="mi" transform="translate(572, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g><g data-mml-node="mi" transform="translate(572, -247) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="msub" transform="translate(10063.7, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g><g data-mml-node="msup" transform="translate(10895.1, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(389, 413) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(11909.9, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(12910.1, 0)"><use xlink:href="#MJX-TEX-I-3BB"></use></g><g data-mml-node="mo" transform="translate(13493.1, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mo" transform="translate(13882.1, 0)"><use xlink:href="#MJX-TEX-N-7C"></use></g><g data-mml-node="msub" transform="translate(14160.1, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-78"></use></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="msup" transform="translate(15026, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-7C"></use></g><g data-mml-node="mn" transform="translate(278, 413) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(15929.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(16930, 0)"><use xlink:href="#MJX-TEX-N-7C"></use></g><g data-mml-node="msub" transform="translate(17208, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g><g data-mml-node="msup" transform="translate(18039.4, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-7C"></use></g><g data-mml-node="mn" transform="translate(278, 413) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(18720.9, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></svg></mjx-container></p>
<p>其中，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.027ex" xmlns="http://www.w3.org/2000/svg" width="1.319ex" height="1.597ex" role="img" focusable="false" viewBox="0 -694 583 706" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-3BB"></use></g></g></g></svg></mjx-container>是正则化项的系数。</p>
<p>交替最小二乘法的思想为：</p>
<ul>
<li>先固定X，求损失函数对Y的每一行的偏导数，令偏导数为0，得到</li>
</ul>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.441ex" height="2.583ex" role="img" focusable="false" viewBox="0 -891.7 10803 1141.7" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-78"></use></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mo" transform="translate(1143.7, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(2199.5, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(2588.5, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mi" transform="translate(849.4, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g></g><g data-mml-node="mi" transform="translate(3985.7, 0)"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mo" transform="translate(4970.9, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(5971.2, 0)"><use xlink:href="#MJX-TEX-I-3BB"></use></g><g data-mml-node="mi" transform="translate(6554.2, 0)"><use xlink:href="#MJX-TEX-I-45"></use></g><g data-mml-node="msup" transform="translate(7318.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="TeXAtom" transform="translate(389, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="msup" transform="translate(8660.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mi" transform="translate(849.4, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g></g><g data-mml-node="msub" transform="translate(10058, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(451, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></g></svg></mjx-container></p>
<ul>
<li>然后固定Y，求损失函数对X的每一行的偏导数，令偏导数为，得到</li>
</ul>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="24.931ex" height="2.683ex" role="img" focusable="false" viewBox="0 -891.7 11019.5 1186" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g><g data-mml-node="mo" transform="translate(1109.1, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(2164.9, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(2553.9, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mi" transform="translate(906.8, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g></g><g data-mml-node="mi" transform="translate(4008.5, 0)"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mo" transform="translate(5082.7, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(6082.9, 0)"><use xlink:href="#MJX-TEX-I-3BB"></use></g><g data-mml-node="mi" transform="translate(6665.9, 0)"><use xlink:href="#MJX-TEX-I-45"></use></g><g data-mml-node="msup" transform="translate(7429.9, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="TeXAtom" transform="translate(389, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(778, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="msup" transform="translate(8772.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mi" transform="translate(906.8, 413) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g></g><g data-mml-node="msub" transform="translate(10227.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(451, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-6A"></use></g></g></g></g></svg></mjx-container></p>
<ul>
<li>最后计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="16.244ex" height="2.261ex" role="img" focusable="false" viewBox="0 -841.7 7179.9 999.5" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="TeXAtom" transform="translate(759, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(706, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(1172, 0)"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(1623, 0)"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mi" transform="translate(2152, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(2513, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(2858, 0)"><use xlink:href="#MJX-TEX-I-6F"></use></g><g data-mml-node="mi" transform="translate(3343, 0)"><use xlink:href="#MJX-TEX-I-6E"></use></g></g></g><g data-mml-node="mo" transform="translate(3874.9, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(4930.7, 0)"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="msup" transform="translate(5782.7, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mi" transform="translate(849.4, 363) scale(0.707)"><use xlink:href="#MJX-TEX-I-54"></use></g></g></g></g></svg></mjx-container>，然后求出<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.961ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3518.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4C"></use></g><g data-mml-node="mo" transform="translate(681, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1070, 0)"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mo" transform="translate(1922, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2366.7, 0)"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mo" transform="translate(3129.7, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></svg></mjx-container></li>
</ul>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.162ex" xmlns="http://www.w3.org/2000/svg" width="32.385ex" height="6.923ex" role="img" focusable="false" viewBox="0 -2104.2 14314.2 3060" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mi" transform="translate(759, 0)"><use xlink:href="#MJX-TEX-I-4D"></use></g><g data-mml-node="mi" transform="translate(1810, 0)"><use xlink:href="#MJX-TEX-I-45"></use></g><g data-mml-node="mi" transform="translate(2574, 0)"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="mo" transform="translate(3496.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msqrt" transform="translate(4552.6, 0)"><g transform="translate(1020, 0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220, 710)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-SO-2211"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1222.7, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mo" transform="translate(1370.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(2370.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="TeXAtom" transform="translate(759, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(706, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(1172, 0)"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(1623, 0)"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mi" transform="translate(2152, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(2513, 0)"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(2964, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(3309, 0)"><use xlink:href="#MJX-TEX-I-6F"></use></g><g data-mml-node="mi" transform="translate(3794, 0)"><use xlink:href="#MJX-TEX-I-6E"></use></g></g></g><g data-mml-node="msup" transform="translate(6286.5, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(389, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g><g data-mml-node="mi" transform="translate(3926.8, -686)"><use xlink:href="#MJX-TEX-I-4E"></use></g><rect width="8501.7" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(0, 294.2)"><use xlink:href="#MJX-TEX-S4-221A"></use></g><rect width="8741.7" height="60" x="1020" y="1984.2"></rect></g></g></g></svg></mjx-container></p>
<p>重复以上步骤直到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.961ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3518.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4C"></use></g><g data-mml-node="mo" transform="translate(681, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1070, 0)"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mo" transform="translate(1922, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2366.7, 0)"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mo" transform="translate(3129.7, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></svg></mjx-container>收敛，画出<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.961ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3518.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4C"></use></g><g data-mml-node="mo" transform="translate(681, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1070, 0)"><use xlink:href="#MJX-TEX-I-58"></use></g><g data-mml-node="mo" transform="translate(1922, 0)"><use xlink:href="#MJX-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2366.7, 0)"><use xlink:href="#MJX-TEX-I-59"></use></g><g data-mml-node="mo" transform="translate(3129.7, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></svg></mjx-container>随迭代次数变化的曲线。</p>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><hr>
<ol>
<li>采用<a href="http://files.grouplens.org/datasets/movielens/ml-100k.zip" target="_blank" rel="noopener">MovieLens-100k</a>数据集</li>
<li>u.data – 由943个用户对1682个电影的10000条评分组成。每个用户至少评分20部电影。用户和电影从1号开始连续编号。数据是随机排序的。</li>
</ol>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0118.PNG"  alt=""></p>
<ol start="3">
<li><p>数据集u1.base / u1.test到u5.base / u5.test都是将u.data数据集按照80% / 20%的比例分割的训练集和测试集。</p>
</li>
<li><p>也可按照自己的评估方法划分训练集和验证集。</p>
</li>
</ol>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><hr>
<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_svmlight_file</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取数据，划分训练集和测试集</span></span><br><span class="line">path = <span class="string">'ml-100k/'</span></span><br><span class="line">train_set = pd.read_csv(path+<span class="string">'u1.base'</span>, names=[<span class="string">'user id'</span>,<span class="string">'item id'</span>,<span class="string">'rating'</span>,<span class="string">'timestamp'</span>], delimiter=<span class="string">'\t'</span>)</span><br><span class="line">test_set = pd.read_csv(path+<span class="string">'u1.test'</span>, names=[<span class="string">'user id'</span>,<span class="string">'item id'</span>,<span class="string">'rating'</span>,<span class="string">'timestamp'</span>], delimiter=<span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line">train_df = train_set.copy()</span><br><span class="line">train_df[<span class="string">'user_item'</span>] = train_df[<span class="string">'user id'</span>]*<span class="number">10000</span> + train_df[<span class="string">'item id'</span>]</span><br><span class="line"></span><br><span class="line">train_df.head()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0119.PNG"  alt=""></p>
<h2 id="设置下标"><a href="#设置下标" class="headerlink" title="设置下标"></a>设置下标</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置下标</span></span><br><span class="line">user_id = train_set[<span class="string">'user id'</span>].unique()</span><br><span class="line">item_id = train_set.set_index(<span class="string">'user id'</span>)</span><br><span class="line">rates = train_set.set_index([<span class="string">'user id'</span>,<span class="string">'item id'</span>])</span><br></pre></td></tr></table></figure>

<h2 id="初始化评价矩阵"><a href="#初始化评价矩阵" class="headerlink" title="初始化评价矩阵"></a>初始化评价矩阵</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化评价矩阵</span></span><br><span class="line">evaluation = np.zeros((user_id.size,<span class="number">1682</span>)) </span><br><span class="line"><span class="keyword">for</span> uid <span class="keyword">in</span> range(<span class="number">943</span>):</span><br><span class="line">    item = np.array(item_id.loc[(uid+<span class="number">1</span>),<span class="string">'item id'</span>]) - <span class="number">1</span></span><br><span class="line">    rate = np.array(rates.loc[(uid+<span class="number">1</span>),<span class="string">'rating'</span>])</span><br><span class="line">    evaluation[uid,item] = rate</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0120.PNG"  alt=""></p>
<h2 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_loss</span><span class="params">(R, X, Y, penalty)</span>:</span></span><br><span class="line">    R = np.matrix(R) <span class="comment"># m*n</span></span><br><span class="line">    X = np.matrix(X) <span class="comment"># m*k</span></span><br><span class="line">    Y = np.matrix(Y) <span class="comment"># n*k</span></span><br><span class="line">    loss = np.power((R - X.dot(Y.T)),<span class="number">2</span>)</span><br><span class="line">    reg = penalty*(np.power(X,<span class="number">2</span>).dot(np.power(Y.T,<span class="number">2</span>)))</span><br><span class="line">    loss = loss + reg</span><br><span class="line">    <span class="keyword">return</span> loss.mean()</span><br></pre></td></tr></table></figure>

<h2 id="定义交替计算函数"><a href="#定义交替计算函数" class="headerlink" title="定义交替计算函数"></a>定义交替计算函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_XY</span><span class="params">(R, X, Y, penalty, num_iters)</span>:</span></span><br><span class="line">    loss = np.zeros((num_iters,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iters):</span><br><span class="line">        X = np.linalg.inv((Y.T.dot(Y) + penalty*np.identity(K))).dot(Y.T).dot(R.T).T</span><br><span class="line">        Y = np.linalg.inv((X.T.dot(X) + penalty*np.identity(K))).dot(X.T).dot(R).T</span><br><span class="line">        loss[i] = compute_loss(R,X,Y,penalty)</span><br><span class="line"><span class="comment">#     loss[num_iters] = compute_loss(R,X,Y,penalty)</span></span><br><span class="line">    R = X.dot(Y.T)</span><br><span class="line">    <span class="keyword">return</span> loss, R</span><br></pre></td></tr></table></figure>

<h2 id="定义惩罚参数以及隐含特征量K"><a href="#定义惩罚参数以及隐含特征量K" class="headerlink" title="定义惩罚参数以及隐含特征量K"></a>定义惩罚参数以及隐含特征量K</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义惩罚参数</span></span><br><span class="line">penalty = <span class="number">0.1</span></span><br><span class="line"><span class="comment"># 定义隐含特征量K</span></span><br><span class="line">K = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h2 id="初始化用户因子矩阵P和物品因子矩阵Q"><a href="#初始化用户因子矩阵P和物品因子矩阵Q" class="headerlink" title="初始化用户因子矩阵P和物品因子矩阵Q"></a>初始化用户因子矩阵P和物品因子矩阵Q</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化用户因子矩阵P和物品因子矩阵Q</span></span><br><span class="line">user = np.random.rand(evaluation.shape[<span class="number">0</span>],K)</span><br><span class="line">item = np.random.rand(evaluation.shape[<span class="number">1</span>],K)</span><br><span class="line">user_df = pd.DataFrame(user)</span><br><span class="line">item_df = pd.DataFrame(item)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_df.head()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0121.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">item_df.head()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0122.PNG"  alt=""></p>
<h2 id="计算损失值"><a href="#计算损失值" class="headerlink" title="计算损失值"></a>计算损失值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">compute_loss(evaluation, user, item, penalty)</span><br></pre></td></tr></table></figure>

<p>6.870335800342345</p>
<h2 id="画出损失值随迭代次数变化的曲线图"><a href="#画出损失值随迭代次数变化的曲线图" class="headerlink" title="画出损失值随迭代次数变化的曲线图"></a>画出损失值随迭代次数变化的曲线图</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_iters = <span class="number">20</span></span><br><span class="line">J_history, eval_matrix = compute_XY(evaluation, user, item, penalty, num_iters)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">plt.plot(np.arange(num_iters), J_history)</span><br><span class="line">ax.set_xlabel(<span class="string">'iterations'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0123.PNG"  alt=""></p>
<h2 id="查看合并后的评价矩阵"><a href="#查看合并后的评价矩阵" class="headerlink" title="查看合并后的评价矩阵"></a>查看合并后的评价矩阵</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(eval_matrix)</span><br><span class="line">df = df.round()</span><br><span class="line">df[df&lt;=<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">df[df&gt;<span class="number">5</span>] = <span class="number">5</span></span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0124.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-I-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-75" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-TEX-I-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-TEX-I-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-TEX-I-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path id="MJX-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-TEX-I-58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path><path id="MJX-TEX-I-4B" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path><path id="MJX-TEX-I-59" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path><path id="MJX-TEX-I-54" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path><path id="MJX-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-TEX-I-4C" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-TEX-I-6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path><path id="MJX-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-TEX-I-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-TEX-I-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-TEX-I-3BB" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path><path id="MJX-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-TEX-I-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-TEX-I-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-TEX-I-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-TEX-I-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path><path id="MJX-TEX-I-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path><path id="MJX-TEX-S4-221A" d="M983 1739Q988 1750 1001 1750Q1008 1750 1013 1745T1020 1733Q1020 1726 742 244T460 -1241Q458 -1250 439 -1250H436Q424 -1250 424 -1248L410 -1166Q395 -1083 367 -920T312 -601L201 44L137 -83L111 -57L187 96L264 247Q265 246 369 -357Q470 -958 473 -963L727 384Q979 1729 983 1739Z"></path><path id="MJX-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path><path id="MJX-TEX-I-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></defs></svg>]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>基于AdaBoost的人脸识别算法</title>
    <url>/2020/04/13/%E5%9F%BA%E4%BA%8EAdaBoost%E7%9A%84%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="AdaBoost简介"><a href="#AdaBoost简介" class="headerlink" title="AdaBoost简介"></a>AdaBoost简介</h1><hr>
<p>AdaBoost是Boosting家族中最著名的算法，它是一种将多个弱学习者（也称为基础学习者）转化为强学习者的算法。AdaBoost算法的推导有很多种，最简单的一种是基于加法模型，即弱学习者的线性组合。</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0114.PNG"  alt=""></p>
<p>为了最小化loss函数，我们有</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0115.PNG"  alt=""></p>
<p>以下是AdaBoost的算法流程：</p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0116.PNG"  alt=""></p>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><hr>
<h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NPDFeature</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""It is a tool class to extract the NPD features.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        image: A two-dimension ndarray indicating grayscale image.</span></span><br><span class="line"><span class="string">        n_pixels: An integer indicating the number of image total pixels.</span></span><br><span class="line"><span class="string">        features: A one-dimension ndarray to store the extracted NPD features.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    __NPD_table__ = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, image)</span>:</span></span><br><span class="line">        <span class="string">'''Initialize NPDFeature class with an image.'''</span></span><br><span class="line">        <span class="keyword">if</span> NPDFeature.__NPD_table__ <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            NPDFeature.__NPD_table__ = NPDFeature.__calculate_NPD_table()</span><br><span class="line">        <span class="keyword">assert</span> isinstance(image, numpy.ndarray)</span><br><span class="line">        self.image = image.ravel()</span><br><span class="line">        self.n_pixels = image.size</span><br><span class="line">        self.features = numpy.empty(shape=self.n_pixels * (self.n_pixels - <span class="number">1</span>) // <span class="number">2</span>, dtype=float)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extract</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''Extract features from given image.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            A one-dimension ndarray to store the extracted NPD features.</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.n_pixels - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, self.n_pixels, <span class="number">1</span>):</span><br><span class="line">                self.features[count] = NPDFeature.__NPD_table__[self.image[i]][self.image[j]]</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.features</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__calculate_NPD_table</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="string">'''Calculate all situations table to accelerate feature extracting.'''</span></span><br><span class="line">        print(<span class="string">"Calculating the NPD table..."</span>)</span><br><span class="line">        table = numpy.empty(shape=(<span class="number">1</span> &lt;&lt; <span class="number">8</span>, <span class="number">1</span> &lt;&lt; <span class="number">8</span>), dtype=float)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span> &lt;&lt; <span class="number">8</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span> &lt;&lt; <span class="number">8</span>):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span>:</span><br><span class="line">                    table[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    table[i][j] = (i - j) / (i + j)</span><br><span class="line">        <span class="keyword">return</span> table</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn <span class="keyword">as</span> sk</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> feature <span class="keyword">import</span> NPDFeature</span><br><span class="line"><span class="keyword">from</span> ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"></span><br><span class="line">facePath = <span class="string">'F:\\VSCodeProject\\Python\\experiment\\ML2019-lab-03\\datasets\\original\\face\\'</span></span><br><span class="line">nonfacePath = <span class="string">'F:\\VSCodeProject\\Python\\experiment\\ML2019-lab-03\\datasets\\original\\nonface\\'</span></span><br><span class="line"></span><br><span class="line">face_data_file = <span class="string">'F:\\VSCodeProject\\Python\\experiment\\ML2019-lab-03\\datasets\\face_data.txt'</span></span><br><span class="line">nonface_data_file = <span class="string">'F:\\VSCodeProject\\Python\\experiment\\ML2019-lab-03\\datasets\\nonface_data.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dumpFeatures</span><span class="params">(path, label = <span class="number">1</span>)</span>:</span></span><br><span class="line">    img_names = os.listdir(path)</span><br><span class="line">    file = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> label == <span class="number">1</span>:</span><br><span class="line">        file = face_data_file</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file = nonface_data_file</span><br><span class="line">    write = open(file, <span class="string">'wb'</span>)</span><br><span class="line">    feat = []</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> img_names:</span><br><span class="line">        img_gray = cv.imread(path+name, cv.IMREAD_GRAYSCALE)</span><br><span class="line">        img_resize = cv.resize(img_gray, (<span class="number">24</span>,<span class="number">24</span>))</span><br><span class="line">        npd = NPDFeature(img_resize)</span><br><span class="line">        feat.append(npd.extract())</span><br><span class="line">    pickle.dump(feat, write)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadFeatures</span><span class="params">(filename)</span>:</span></span><br><span class="line">    read = open(filename, <span class="string">'rb'</span>)</span><br><span class="line">    data = pickle.load(file=read)</span><br><span class="line">    <span class="keyword">return</span> np.matrix(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addLabel</span><span class="params">(data, label)</span>:</span></span><br><span class="line">    data = np.matrix(data)</span><br><span class="line">    <span class="keyword">return</span> np.concatenate((np.full(shape=(data.shape[<span class="number">0</span>],<span class="number">1</span>),fill_value=label), data), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_train_valid</span><span class="params">(data, fraction = <span class="number">0.9</span>)</span>:</span></span><br><span class="line">    data = np.matrix(data)</span><br><span class="line">    <span class="keyword">return</span> sk.model_selection.train_test_split(data[:,<span class="number">0</span>],data[:,<span class="number">1</span>:data.shape[<span class="number">1</span>]],train_size=fraction, test_size=<span class="number">1</span>-fraction)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dumpFeatures(facePath, label=1)</span></span><br><span class="line"><span class="comment"># dumpFeatures(nonfacePath, label=0)</span></span><br><span class="line"></span><br><span class="line">face_data = loadFeatures(face_data_file)</span><br><span class="line">nonface_data = loadFeatures(nonface_data_file)</span><br><span class="line"></span><br><span class="line">face_data = addLabel(face_data,<span class="number">1</span>)</span><br><span class="line">nonface_data = addLabel(nonface_data,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(face_data.shape)</span><br><span class="line">print(nonface_data.shape)</span><br><span class="line"></span><br><span class="line">data = np.concatenate((face_data, nonface_data), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fraction = <span class="number">0.9</span></span><br><span class="line">X_train, X_valid, y_train, y_valid = sk.model_selection.train_test_split(data[:,<span class="number">1</span>:data.shape[<span class="number">1</span>]],data[:,<span class="number">0</span>],train_size=fraction, test_size=<span class="number">1</span>-fraction)</span><br><span class="line"></span><br><span class="line">X_train = np.matrix(X_train)</span><br><span class="line">X_valid = np.matrix(X_valid)</span><br><span class="line">y_train = np.matrix(y_train)</span><br><span class="line">y_valid = np.matrix(y_valid)</span><br><span class="line"></span><br><span class="line">print(X_train.shape, X_valid.shape, y_train.shape, y_valid.shape)</span><br><span class="line">print(np.sum(y_train==<span class="number">1</span>), np.sum(y_valid==<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">weight = np.full(shape=(X_train.shape[<span class="number">0</span>]), fill_value=<span class="number">1</span>/X_train.shape[<span class="number">0</span>])</span><br><span class="line">weak_classifier = DecisionTreeClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># weak_classifier.fit(X_train, y_train, sample_weight=weight)</span></span><br><span class="line"><span class="comment"># train_score = weak_classifier.score(X_train, y_train)</span></span><br><span class="line"><span class="comment"># valid_score = weak_classifier.score(X_valid, y_valid)</span></span><br><span class="line"></span><br><span class="line">classifier = AdaBoostClassifier(weak_classifier, <span class="number">10</span>)</span><br><span class="line">classifier.fit(X_train, y_train)</span><br><span class="line"><span class="comment"># hx = classifier.predict(X_valid)</span></span><br><span class="line">train_score = classifier.predict_scores(X_train, y_train)</span><br><span class="line">valid_score = classifier.predict_scores(X_valid, y_valid)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'{}, {}'</span>.format(train_score, valid_score))</span><br><span class="line"></span><br><span class="line">hx = classifier.predict(X_valid)</span><br><span class="line">print(hx)</span><br><span class="line">report_file = <span class="string">'F:\\VSCodeProject\\Python\\experiment\\ML2019-lab-03\\report.txt'</span></span><br><span class="line">file_write = open(report_file, <span class="string">'wb'</span>)</span><br><span class="line">print(classification_report(y_valid, hx))</span><br></pre></td></tr></table></figure>

<h2 id="加性融合"><a href="#加性融合" class="headerlink" title="加性融合"></a>加性融合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdaBoostClassifier</span>:</span></span><br><span class="line">    <span class="string">'''A simple AdaBoost Classifier.'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, weak_classifier, n_weakers_limit)</span>:</span></span><br><span class="line">        <span class="string">'''Initialize AdaBoostClassifier</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            weak_classifier: The class of weak classifier, which is recommend to be sklearn.tree.DecisionTreeClassifier.</span></span><br><span class="line"><span class="string">            n_weakers_limit: The maximum number of weak classifier the model can use.</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.weak_classifier_list = []</span><br><span class="line">        self.classifier_weight = []</span><br><span class="line">        self.n_weakers_limit = n_weakers_limit</span><br><span class="line">        self.Hx = []</span><br><span class="line">        self.pred_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_good_enough</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''Optional'''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">        <span class="string">'''Build a boosted classifier from the training set (X, y).</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            X: An ndarray indicating the samples to be trained, which shape should be (n_samples,n_features).</span></span><br><span class="line"><span class="string">            y: An ndarray indicating the ground-truth labels correspond to X, which shape should be (n_samples,1).</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line"></span><br><span class="line">        self.Hx = np.zeros((len(y), self.n_weakers_limit))</span><br><span class="line">        weight = np.full(shape=(X.shape[<span class="number">0</span>]), fill_value=<span class="number">1</span>/X.shape[<span class="number">0</span>])</span><br><span class="line">        print(weight.shape)</span><br><span class="line">        <span class="keyword">for</span> iters <span class="keyword">in</span> range(self.n_weakers_limit):</span><br><span class="line"></span><br><span class="line">            weak_classifier = DecisionTreeClassifier(</span><br><span class="line">            criterion=<span class="string">'entropy'</span>,</span><br><span class="line">            splitter=<span class="string">'random'</span>,</span><br><span class="line">            max_features=<span class="string">'log2'</span>,</span><br><span class="line">            max_depth=<span class="number">10</span>,</span><br><span class="line">            max_leaf_nodes=<span class="number">10</span>,</span><br><span class="line">            min_samples_split=<span class="number">10</span>,</span><br><span class="line">            min_samples_leaf=<span class="number">3</span>,</span><br><span class="line">            class_weight=<span class="string">'balanced'</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            weak_classifier.fit(X, y, sample_weight=weight)</span><br><span class="line">            hx = weak_classifier.predict(X)</span><br><span class="line">            score = weak_classifier.score(X, y)</span><br><span class="line"></span><br><span class="line">            print(<span class="string">'score {}: '</span>.format(iters+<span class="number">1</span>), score)</span><br><span class="line"></span><br><span class="line">            error = <span class="number">1</span> - score</span><br><span class="line">            alpha = <span class="number">0.5</span> * np.log((<span class="number">1</span>-error)/error)</span><br><span class="line"></span><br><span class="line">            exp = np.exp(-alpha * np.multiply(hx, y.flatten()))</span><br><span class="line">            exp = np.array(exp).flatten()</span><br><span class="line">            weight = np.multiply(weight, exp)</span><br><span class="line">            zm = np.sum(weight)</span><br><span class="line">            weight = weight / zm</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(score&gt;<span class="number">0.5</span>):</span><br><span class="line">                self.classifier_weight.append(alpha)</span><br><span class="line">                self.weak_classifier_list.append(weak_classifier)</span><br><span class="line">                self.Hx[:,iters] = alpha*np.array(hx)</span><br><span class="line">                self.pred_list.append(np.array(hx))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict_scores</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">        <span class="string">'''Calculate the weighted sum score of the whole base classifiers for given samples.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            X: An ndarray indicating the samples to be predicted, which shape should be (n_samples,n_features).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            An one-dimension ndarray indicating the scores of differnt samples, which shape should be (n_samples,1).</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        Hx = np.zeros((len(y), self.n_weakers_limit))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.weak_classifier_list)):</span><br><span class="line">            hx = self.weak_classifier_list[i].predict(X)</span><br><span class="line">            Hx[:,i] = self.classifier_weight[i]*np.array(hx)</span><br><span class="line">        pred = np.sum(Hx, axis=<span class="number">1</span>)</span><br><span class="line">        pred = (pred&gt;=<span class="number">1</span>)</span><br><span class="line">        accuracy = (pred==y.flatten())</span><br><span class="line">        <span class="keyword">return</span> np.mean(accuracy)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X, threshold=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">'''Predict the catagories for given samples.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            X: An ndarray indicating the samples to be predicted, which shape should be (n_samples,n_features).</span></span><br><span class="line"><span class="string">            threshold: The demarcation number of deviding the samples into two parts.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            An ndarray consists of predicted labels, which shape should be (n_samples,1).</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        Hx = np.zeros((X.shape[<span class="number">0</span>], self.n_weakers_limit))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.weak_classifier_list)):</span><br><span class="line">            hx = self.weak_classifier_list[i].predict(X)</span><br><span class="line">            Hx[:,i] = self.classifier_weight[i]*np.array(hx)</span><br><span class="line">        pred = np.sum(Hx, axis=<span class="number">1</span>)</span><br><span class="line">        pred[pred&gt;=<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        pred[pred&lt;<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> pred</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(model, filename)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(model, f)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(filename)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">return</span> pickle.load(f)</span><br></pre></td></tr></table></figure>

<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># write your code here</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h2><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0117.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑回归和支持向量机</title>
    <url>/2020/04/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%92%8C%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><hr>
<ol>
<li>对比理解梯度下降和批量随机梯度下降的区别与联系。</li>
<li>对比理解逻辑回归和线性分类的区别与联系。</li>
<li>进一步理解SVM的原理并在较大数据上实践。</li>
</ol>
<h1 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h1><hr>
<p>实验使用的是<a href="https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/" target="_blank" rel="noopener">LIBSVM Data</a>的中的<a href="https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/binary.html#a9a" target="_blank" rel="noopener">a9a</a>数据，包含32561 / 16281(testing)个样本，每个样本有123/123 (testing)个属性。请自行下载训练集和验证集。在读取数据时可能会出现维度不对的问题，是因为数据最后列全为零而被忽略，可以在下载的数据集文件后面自行添加后再读取，也可在读取数据集时指定n_features=123来解决。</p>
<h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><hr>
<p><em>逻辑回归与批量随机梯度下降</em></p>
<ol>
<li>读取实验训练集和验证集。</li>
<li>逻辑回归模型参数初始化（可以考虑全零初始化，随机初始化或者正态分布初始化）。</li>
<li>选择Loss函数及对其求导，过程详见课件ppt。</li>
<li>自行确定batch_size大小，随机取出部分样本，求得<strong>部分样本</strong>对Loss函数的梯度 。</li>
<li>使用SGD优化方法更新参数模型，鼓励额外尝试Adam优化方法。</li>
<li>选择合适的阈值，将验证集中计算结果<strong>大于阈值的标记为正类，反之为负类</strong>。在验证集上测试并得到Loss函数值 Lvalidation 。</li>
<li>重复步骤4-6若干次，画出 Lvalidation <strong>随迭代次数的变化图</strong>。</li>
</ol>
<hr>
<p><em>线性分类与批量随机梯度下降</em></p>
<ol>
<li>读取实验训练集和验证集。</li>
<li>支持向量机模型参数初始化(可以考虑全零初始化，随机初始化或者正态分布初始化)。</li>
<li>选择Loss函数并对其求导，过程详见课件ppt。</li>
<li>自行确定batch_size大小，随机取出部分样本，求得<strong>部分样本</strong>对Loss函数的梯度 。</li>
<li>使用SGD优化方法更新参数模型，鼓励额外尝试Adam优化方法。</li>
<li>选择合适的阈值，将验证集中计算结果<strong>大于阈值的标记为正类，反之为负类</strong>。在验证集上测试并得到Loss函数值 Lvalidation 。</li>
<li>重复步骤4-6若干次，画出 Lvalidation <strong>随迭代次数的变化图</strong>。</li>
</ol>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><hr>
<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn.datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> sms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<h2 id="读取数据集"><a href="#读取数据集" class="headerlink" title="读取数据集"></a>读取数据集</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取实验训练集和验证集</span></span><br><span class="line">X, y = sd.load_svmlight_file(<span class="string">'a9a.txt'</span>,n_features = <span class="number">123</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数据集切分为训练集和验证集</span></span><br><span class="line">X_train, X_valid, y_train, y_valid = sms.train_test_split(X, y)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将稀疏矩阵转为ndarray类型</span></span><br><span class="line">X_train = X_train.toarray()</span><br><span class="line">X_valid = X_valid.toarray()</span><br><span class="line">y_train = y_train.reshape(len(y_train),<span class="number">1</span>)</span><br><span class="line">y_valid = y_valid.reshape(len(y_valid),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train = np.concatenate((np.ones((X_train.shape[<span class="number">0</span>],<span class="number">1</span>)), X_train), axis = <span class="number">1</span>)</span><br><span class="line">X_valid = np.concatenate((np.ones((X_valid.shape[<span class="number">0</span>],<span class="number">1</span>)), X_valid), axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train.shape, X_valid.shape, y_train.shape, y_valid.shape</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0105.PNG"  alt=""></p>
<h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><h3 id="定义sigmoid函数"><a href="#定义sigmoid函数" class="headerlink" title="定义sigmoid函数"></a>定义sigmoid函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure>

<h3 id="定义logistic-loss函数"><a href="#定义logistic-loss函数" class="headerlink" title="定义logistic loss函数"></a>定义logistic loss函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic_loss</span><span class="params">(X, y ,theta)</span>:</span></span><br><span class="line">    hx = sigmoid(X.dot(theta))</span><br><span class="line">    cost = np.multiply((<span class="number">1</span>+y), np.log(<span class="number">1</span>+hx)) + np.multiply((<span class="number">1</span>-y), np.log(<span class="number">1</span>-hx))</span><br><span class="line">    <span class="keyword">return</span> -cost.mean()/<span class="number">2</span></span><br></pre></td></tr></table></figure>


<h3 id="计算当前loss"><a href="#计算当前loss" class="headerlink" title="计算当前loss"></a>计算当前loss</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = np.zeros((X_train.shape[<span class="number">1</span>],<span class="number">1</span>))</span><br><span class="line">logistic_loss(X_train, y_train, theta)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0106.PNG"  alt=""></p>
<h3 id="定义logistic-gradient函数"><a href="#定义logistic-gradient函数" class="headerlink" title="定义logistic gradient函数"></a>定义logistic gradient函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic_gradient</span><span class="params">(X, y, theta)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> X.T.dot(sigmoid(X.dot(theta)) - y)</span><br></pre></td></tr></table></figure>

<h3 id="定义logistic-score函数"><a href="#定义logistic-score函数" class="headerlink" title="定义logistic score函数"></a>定义logistic score函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic_score</span><span class="params">(X, y, theta)</span>:</span></span><br><span class="line">    hx = sigmoid(X.dot(theta))</span><br><span class="line">    hx[hx&gt;=<span class="number">0.5</span>] = <span class="number">1</span></span><br><span class="line">    hx[hx&lt;<span class="number">0.5</span>] = <span class="number">-1.</span><span class="number">.11</span></span><br><span class="line">    hx = (hx==y)</span><br><span class="line">    <span class="keyword">return</span> np.mean(hx)</span><br></pre></td></tr></table></figure>

<h3 id="定义logistic-decent函数"><a href="#定义logistic-decent函数" class="headerlink" title="定义logistic decent函数"></a>定义logistic decent函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logistic_descent</span><span class="params">(X, y, theta, alpha, num_iters, batch_size, X_valid, y_valid)</span>:</span></span><br><span class="line">    loss_train = np.zeros((num_iters,<span class="number">1</span>))</span><br><span class="line">    loss_valid = np.zeros((num_iters,<span class="number">1</span>))</span><br><span class="line">    data = np.concatenate((y, X), axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iters):</span><br><span class="line">        sample = np.matrix(random.sample(data.tolist(), batch_size))</span><br><span class="line">        grad = logistic_gradient(sample[:,<span class="number">1</span>:<span class="number">125</span>], sample[:,<span class="number">0</span>], theta)</span><br><span class="line">        theta = theta - alpha * grad</span><br><span class="line">        loss_train[i] = logistic_loss(X, y, theta)</span><br><span class="line">        loss_valid[i] = logistic_loss(X_valid, y_valid, theta)</span><br><span class="line">    <span class="keyword">return</span> theta, loss_train, loss_valid</span><br></pre></td></tr></table></figure>

<h3 id="执行梯度下降"><a href="#执行梯度下降" class="headerlink" title="执行梯度下降"></a>执行梯度下降</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = np.zeros((X_train.shape[<span class="number">1</span>],<span class="number">1</span>))</span><br><span class="line">alpha = <span class="number">0.0001</span></span><br><span class="line">num_iters = <span class="number">200</span></span><br><span class="line">opt_theta, loss_train, loss_valid = logistic_descent(X_train, y_train, theta, alpha, num_iters, <span class="number">64</span>, X_valid, y_valid)</span><br><span class="line">loss_train.max(), loss_train.min(), loss_valid.max(), loss_valid.min()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0107.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logistic_score(X_valid, y_valid, opt_theta)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0108.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iteration = np.arange(<span class="number">0</span>, num_iters, step = <span class="number">1</span>)</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.set_title(<span class="string">'Train vs Valid'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'iteration'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.plot(iteration, loss_train, <span class="string">'b'</span>, label=<span class="string">'Training Set Loss'</span>)</span><br><span class="line">plt.plot(iteration, loss_valid, <span class="string">'r'</span>, label=<span class="string">'Validation Set Loss'</span>)</span><br><span class="line"><span class="comment"># plt.plot(iteration, scores, 'g', label='Score on Validation Set')</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0109.PNG"  alt=""></p>
<h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2><h3 id="定义hinge-loss函数"><a href="#定义hinge-loss函数" class="headerlink" title="定义hinge loss函数"></a>定义hinge loss函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hinge_loss</span><span class="params">(X, y, theta, C)</span>:</span></span><br><span class="line">    loss = np.maximum(<span class="number">0</span>, <span class="number">1</span> - np.multiply(y, X.dot(theta))).mean()</span><br><span class="line">    reg = np.multiply(theta,theta).sum() / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> C * loss + reg</span><br></pre></td></tr></table></figure>

<h3 id="计算当前loss-1"><a href="#计算当前loss-1" class="headerlink" title="计算当前loss"></a>计算当前loss</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theta = np.random.random((X_train.shape[1],1))</span><br><span class="line">C = 0.4</span><br><span class="line">hinge_loss(X_train, y_train, theta, C)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0110.PNG"  alt=""></p>
<h3 id="定义hinge-gradient函数"><a href="#定义hinge-gradient函数" class="headerlink" title="定义hinge gradient函数"></a>定义hinge gradient函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hinge_gradient</span><span class="params">(X, y, theta, C)</span>:</span></span><br><span class="line">    error = np.maximum(<span class="number">0</span>, <span class="number">1</span> - np.multiply(y, X.dot(theta)))</span><br><span class="line">    index = np.where(error==<span class="number">0</span>)</span><br><span class="line">    x = X.copy()</span><br><span class="line">    x[index,:] = <span class="number">0</span></span><br><span class="line">    grad = theta - C * x.T.dot(y) / len(y)</span><br><span class="line">    grad[<span class="number">-1</span>] = grad[<span class="number">-1</span>] - theta[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> grad</span><br></pre></td></tr></table></figure>

<h3 id="定义svm-decent函数"><a href="#定义svm-decent函数" class="headerlink" title="定义svm decent函数"></a>定义svm decent函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svm_descent</span><span class="params">(X, y, theta, alpha, num_iters, batch_size, X_valid, y_valid, C)</span>:</span></span><br><span class="line">    loss_train = np.zeros((num_iters,<span class="number">1</span>))</span><br><span class="line">    loss_valid = np.zeros((num_iters,<span class="number">1</span>))</span><br><span class="line">    data = np.concatenate((y, X), axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iters):</span><br><span class="line">        sample = np.matrix(random.sample(data.tolist(), batch_size))</span><br><span class="line">        grad = hinge_gradient(sample[:,<span class="number">1</span>:<span class="number">125</span>], sample[:,<span class="number">0</span>], theta, C)</span><br><span class="line">        theta = theta - alpha * grad</span><br><span class="line">        loss_train[i] = hinge_loss(X, y, theta, C)</span><br><span class="line">        loss_valid[i] = hinge_loss(X_valid, y_valid, theta, C)</span><br><span class="line">    <span class="keyword">return</span> theta, loss_train, loss_valid</span><br></pre></td></tr></table></figure>

<h3 id="定义svm-score函数"><a href="#定义svm-score函数" class="headerlink" title="定义svm score函数"></a>定义svm score函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svm_score</span><span class="params">(X, y, theta)</span>:</span></span><br><span class="line">    hx = X.dot(theta)</span><br><span class="line">    hx[hx&gt;=<span class="number">5</span>] = <span class="number">1</span></span><br><span class="line">    hx[hx&lt;<span class="number">5</span>] = <span class="number">-1</span></span><br><span class="line">    hx = (hx==y)</span><br><span class="line">    <span class="keyword">return</span> np.mean(hx)</span><br></pre></td></tr></table></figure>

<h3 id="执行梯度下降-1"><a href="#执行梯度下降-1" class="headerlink" title="执行梯度下降"></a>执行梯度下降</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = np.random.random((X_train.shape[<span class="number">1</span>],<span class="number">1</span>))</span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">num_iters = <span class="number">500</span></span><br><span class="line">opt_theta, loss_train, loss_valid = svm_descent(X_train, y_train, theta, alpha, num_iters, <span class="number">64</span>, X_valid, y_valid, C)</span><br><span class="line">loss_train.max(), loss_train.min(), loss_valid.max(), loss_valid.min()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0111.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">svm_score(X_valid, y_valid, opt_theta)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0112.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iteration = np.arange(<span class="number">0</span>, num_iters, step = <span class="number">1</span>)</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.set_title(<span class="string">'Train vs Valid'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'iteration'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.plot(iteration, loss_train, <span class="string">'b'</span>, label=<span class="string">'Training Set Loss'</span>)</span><br><span class="line">plt.plot(iteration, loss_valid, <span class="string">'r'</span>, label=<span class="string">'Validation Set Loss'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0113.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>线性回归与随机梯度下降</title>
    <url>/2020/04/09/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E9%9A%8F%E6%9C%BA%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><hr>
<ol>
<li>进一步理解线性回归，闭式解和随机梯度下降的原理。</li>
<li>在小规模数据集上实践。</li>
<li>体会优化和调参的过程。</li>
</ol>
<h1 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h1><hr>
<p>线性回归使用的是<a href="https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/" target="_blank" rel="noopener">LIBSVM Data</a>中的<a href="https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/regression.html#housing" target="_blank" rel="noopener">Housing</a>数据，包含506个样本，每个样本有13个属性。请自行下载scaled版本，并将其切分为训练集，验证集。</p>
<h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><p><em>线性回归的闭式解</em></p>
<ol>
<li>读取实验数据，使用sklearn库的<a href="http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_svmlight_file.html" target="_blank" rel="noopener">load_svmlight_file</a>函数读取数据。</li>
<li>将数据集切分为训练集和验证集，本次实验不切分测试集。使用<a href="http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html" target="_blank" rel="noopener">train_test_split</a>函数切分数据集。</li>
<li>选取一个Loss函数。</li>
<li>获取闭式解的公式，过程详⻅课件ppt。</li>
<li>通过闭式解得到参数W的值。</li>
<li>在训练集上测试并获得Loss函数值loss_train，在验证集上获得Loss函数值。</li>
<li>输出Loss，Loss_train和loss_val的值。</li>
</ol>
<p><em>线性回归和随机梯度下降</em></p>
<ol>
<li>读取实验数据，使用sklearn库的<a href="http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_svmlight_file.html" target="_blank" rel="noopener">load_svmlight_file</a>函数读取数据。</li>
<li>将数据集切分为训练集和验证集，本次实验不切分测试集。使用<a href="http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html" target="_blank" rel="noopener">train_test_split</a>函数切分数据集。</li>
<li>线性模型参数初始化，可以考虑全零初始化，随机初始化或者正态分布初始化。</li>
<li>选择Loss函数及对其求导，过程详见课件ppt。</li>
<li>随机选取训练集中的一个样本，求得该样本对函数的梯度。</li>
<li>取梯度的负方向，记为。</li>
<li>更新模型参数，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="16.718ex" height="2.034ex" role="img" focusable="false" viewBox="0 -683 7389.2 899" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-57"></use></g><g data-mml-node="mi" transform="translate(944, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-74"></use></g></g><g data-mml-node="mo" transform="translate(1527, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(2582.8, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-57"></use></g><g data-mml-node="TeXAtom" transform="translate(944, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(361, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1139, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(4958, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(5958.2, 0)"><use xlink:href="#MJX-TEX-I-3BC"></use></g><g data-mml-node="mi" transform="translate(6561.2, 0)"><use xlink:href="#MJX-TEX-I-44"></use></g></g></g></svg></mjx-container>。<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-3BC"></use></g></g></g></svg></mjx-container>为学习率，是人为调整的超参数。</li>
<li>在训练集上测试并得到Loss函数值loss_train，在验证集上测试并得到Loss函数值loss_val。</li>
<li>重复步骤5-8若干次，输出loss_train和loss_val的值。</li>
</ol>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><hr>
<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn.datasets <span class="keyword">as</span> sd</span><br><span class="line"><span class="keyword">import</span> sklearn.model_selection <span class="keyword">as</span> sms</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>

<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取实验数据</span></span><br><span class="line">X, y = sd.load_svmlight_file(<span class="string">'housing_scale.txt'</span>,n_features = <span class="number">13</span>)</span><br></pre></td></tr></table></figure>

<h2 id="划分训练集与验证集"><a href="#划分训练集与验证集" class="headerlink" title="划分训练集与验证集"></a>划分训练集与验证集</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数据集切分为训练集和验证集</span></span><br><span class="line">X_train, X_valid, y_train, y_valid = sms.train_test_split(X, y)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将稀疏矩阵转为ndarray类型</span></span><br><span class="line">X_train = X_train.toarray()</span><br><span class="line">X_valid = X_valid.toarray()</span><br><span class="line">y_train = y_train.reshape(len(y_train),<span class="number">1</span>)</span><br><span class="line">y_valid = y_valid.reshape(len(y_valid),<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train.shape, X_valid.shape, y_train.shape, y_valid.shape</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0092.PNG"  alt=""></p>
<h2 id="模型参数初始化"><a href="#模型参数初始化" class="headerlink" title="模型参数初始化"></a>模型参数初始化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线性模型参数初始化，可以考虑全零初始化，随机初始化或者正态分布初始化。</span></span><br><span class="line">theta = np.zeros((<span class="number">14</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<h2 id="定义loss函数"><a href="#定义loss函数" class="headerlink" title="定义loss函数"></a>定义loss函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选取一个Loss函数，计算训练集的Loss函数值，记为loss</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_loss</span><span class="params">(X, y, theta)</span>:</span></span><br><span class="line">    hx = X.dot(theta)</span><br><span class="line">    error = np.power((hx - y), <span class="number">2</span>).mean() / <span class="number">2</span></span><br><span class="line"><span class="comment">#     reg = np.power(theta[1:theta.shape[0]],2).mean()</span></span><br><span class="line">    <span class="keyword">return</span> error</span><br></pre></td></tr></table></figure>

<h2 id="为X添加偏移量"><a href="#为X添加偏移量" class="headerlink" title="为X添加偏移量"></a>为X添加偏移量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train = np.concatenate((np.ones((X_train.shape[<span class="number">0</span>],<span class="number">1</span>)), X_train), axis = <span class="number">1</span>)</span><br><span class="line">X_valid = np.concatenate((np.ones((X_valid.shape[<span class="number">0</span>],<span class="number">1</span>)), X_valid), axis = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train.shape, X_valid.shape</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0093.PNG"  alt=""></p>
<h2 id="查看当前训练集的loss"><a href="#查看当前训练集的loss" class="headerlink" title="查看当前训练集的loss"></a>查看当前训练集的loss</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss = compute_loss(X_train, y_train, theta)</span><br><span class="line">loss</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0094.PNG"  alt=""></p>
<h2 id="闭式解"><a href="#闭式解" class="headerlink" title="闭式解"></a>闭式解</h2><h3 id="定义闭式解函数"><a href="#定义闭式解函数" class="headerlink" title="定义闭式解函数"></a>定义闭式解函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 闭式解函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normal_equation</span><span class="params">(X, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (np.linalg.inv(X.T.dot(X))).dot(X.T).dot(y)</span><br></pre></td></tr></table></figure>

<h3 id="求出闭式解"><a href="#求出闭式解" class="headerlink" title="求出闭式解"></a>求出闭式解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">theta = normal_equation(X_train, y_train)</span><br><span class="line">theta</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0095.PNG"  alt=""></p>
<h3 id="闭式解在训练集下的loss"><a href="#闭式解在训练集下的loss" class="headerlink" title="闭式解在训练集下的loss"></a>闭式解在训练集下的loss</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss_train = compute_loss(X_train, y_train, theta)</span><br><span class="line">loss_train</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0096.PNG"  alt=""></p>
<h3 id="闭式解在验证集下的loss"><a href="#闭式解在验证集下的loss" class="headerlink" title="闭式解在验证集下的loss"></a>闭式解在验证集下的loss</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss_valid = compute_loss(X_valid, y_valid, theta)</span><br><span class="line">loss_valid</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0097.PNG"  alt=""></p>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><h3 id="定义梯度函数"><a href="#定义梯度函数" class="headerlink" title="定义梯度函数"></a>定义梯度函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(X, y, theta)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> X.T.dot(X.dot(theta) - y)</span><br></pre></td></tr></table></figure>

<h3 id="定义下降函数"><a href="#定义下降函数" class="headerlink" title="定义下降函数"></a>定义下降函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">descent</span><span class="params">(X, y, theta, alpha, iters, X_valid, y_valid)</span>:</span></span><br><span class="line">    loss_train = np.zeros((iters,<span class="number">1</span>))</span><br><span class="line">    loss_valid = np.zeros((iters,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(iters):</span><br><span class="line">        grad = gradient(X, y, theta)</span><br><span class="line">        theta = theta - alpha * grad</span><br><span class="line">        loss_train[i] = compute_loss(X, y, theta)</span><br><span class="line">        loss_valid[i] = compute_loss(X_valid, y_valid, theta)</span><br><span class="line">    <span class="keyword">return</span> theta, loss_train, loss_valid</span><br></pre></td></tr></table></figure>

<h3 id="全批量梯度下降"><a href="#全批量梯度下降" class="headerlink" title="全批量梯度下降"></a>全批量梯度下降</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全批量梯度下降</span></span><br><span class="line">theta = np.zeros((<span class="number">14</span>,<span class="number">1</span>))</span><br><span class="line">alpha = <span class="number">0.001</span></span><br><span class="line">iters = <span class="number">25</span></span><br><span class="line">opt_theta, loss_train, loss_valid = descent(X_train, y_train, theta, alpha, iters, X_valid, y_valid)</span><br><span class="line">loss_train.min(), loss_valid.min()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0098.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iteration = np.arange(<span class="number">0</span>, iters, step = <span class="number">1</span>)</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.set_title(<span class="string">'Train'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'iteration'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.plot(iteration, loss_train, <span class="string">'b'</span>, label=<span class="string">'Train'</span>)</span><br><span class="line"><span class="comment"># plt.plot(iteration, loss_valid, 'r', label='Valid')</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0099.PNG"  alt=""></p>
<h2 id="尝试Adam、Momentum、RMSprop、SGD、Mini-Batch等算法"><a href="#尝试Adam、Momentum、RMSprop、SGD、Mini-Batch等算法" class="headerlink" title="尝试Adam、Momentum、RMSprop、SGD、Mini-Batch等算法"></a>尝试Adam、Momentum、RMSprop、SGD、Mini-Batch等算法</h2><h3 id="读取新数据集"><a href="#读取新数据集" class="headerlink" title="读取新数据集"></a>读取新数据集</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个新的数据，以验证Adam方法的效果</span></span><br><span class="line">X, y = sd.load_svmlight_file(<span class="string">'cpusmall_scale.txt'</span>,n_features = <span class="number">13</span>)</span><br><span class="line"><span class="comment"># 将数据集切分为训练集和验证集</span></span><br><span class="line">X_train, X_valid, y_train, y_valid = sms.train_test_split(X, y)</span><br><span class="line"><span class="comment"># 将稀疏矩阵转为ndarray类型</span></span><br><span class="line">X_train = X_train.toarray()</span><br><span class="line">X_valid = X_valid.toarray()</span><br><span class="line">y_train = y_train.reshape(len(y_train),<span class="number">1</span>)</span><br><span class="line">y_valid = y_valid.reshape(len(y_valid),<span class="number">1</span>)</span><br><span class="line">X_train = np.concatenate((np.ones((X_train.shape[<span class="number">0</span>],<span class="number">1</span>)), X_train), axis = <span class="number">1</span>)</span><br><span class="line">X_valid = np.concatenate((np.ones((X_valid.shape[<span class="number">0</span>],<span class="number">1</span>)), X_valid), axis = <span class="number">1</span>)</span><br><span class="line">X_train.shape, X_valid.shape, y_train.shape, y_valid.shape</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0100.PNG"  alt=""></p>
<h3 id="定义随机梯度下降函数"><a href="#定义随机梯度下降函数" class="headerlink" title="定义随机梯度下降函数"></a>定义随机梯度下降函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机梯度下降的执行函数 batch_size = 1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stochastic_descent</span><span class="params">(X, y, theta, alpha, iters, batch_size, X_valid, y_valid, opt = <span class="string">'None'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 参数初始化</span></span><br><span class="line">    <span class="comment"># beta1 为 Momentum参数，值越大，则之前的梯度对现在的方向影响越大</span></span><br><span class="line">    <span class="comment"># beta2 为 RMSprop的衰减速率， epsilon防止分母为0</span></span><br><span class="line">    data = pd.DataFrame(np.concatenate((y.reshape(y.size,<span class="number">1</span>),X), axis = <span class="number">1</span>))</span><br><span class="line">    loss_train = np.zeros((iters,<span class="number">1</span>))</span><br><span class="line">    loss_valid = np.zeros((iters,<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    v1= np.zeros((X.shape[<span class="number">1</span>],<span class="number">1</span>))</span><br><span class="line">    v2= np.zeros((X.shape[<span class="number">1</span>],<span class="number">1</span>))</span><br><span class="line">    beta1 = <span class="number">0.9</span></span><br><span class="line">    beta2 = <span class="number">0.999</span></span><br><span class="line">    epsilon = <span class="number">1e-8</span></span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(iters):</span><br><span class="line">        batch = data.sample(batch_size, replace=<span class="literal">True</span>)</span><br><span class="line">        batch = batch.values</span><br><span class="line">        data_X = batch[:,<span class="number">1</span>:theta.size+<span class="number">1</span>]</span><br><span class="line">        data_y = batch[:,<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">        grad = gradient(data_X, data_y, theta)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="string">'Momentum'</span>):</span><br><span class="line">            v1 = beta1 * v1 + (<span class="number">1</span>-beta1) * grad</span><br><span class="line">            theta = theta - alpha * v1</span><br><span class="line">        <span class="keyword">elif</span>(opt==<span class="string">'RMSprop'</span>):</span><br><span class="line">            v2 = beta2 * v2 + (<span class="number">1</span>-beta2) * grad * grad</span><br><span class="line">            theta = theta - alpha * grad/(np.sqrt(v2+epsilon))</span><br><span class="line">        <span class="keyword">elif</span>(opt==<span class="string">'Adam'</span>):</span><br><span class="line">            v1 = beta1 * v1 + (<span class="number">1</span>-beta1) * grad</span><br><span class="line">            v2 = beta2 * v2 + (<span class="number">1</span>-beta2) * grad * grad</span><br><span class="line"><span class="comment">#             v1 = v1 / (1 - np.power(beta1, t))</span></span><br><span class="line"><span class="comment">#             v2 = v2 / (1 - np.power(beta2, t))</span></span><br><span class="line">            t = t + <span class="number">1</span>   </span><br><span class="line">            theta = theta - alpha * v1/(np.sqrt(v2)+epsilon)</span><br><span class="line">        <span class="keyword">elif</span>(opt==<span class="string">'None'</span>):</span><br><span class="line">            theta = theta - alpha * grad</span><br><span class="line">        </span><br><span class="line">        loss_train[i] = compute_loss(X, y, theta)</span><br><span class="line">    <span class="keyword">return</span> theta, loss_train</span><br></pre></td></tr></table></figure>

<h3 id="Mini-batch和SGD的比较"><a href="#Mini-batch和SGD的比较" class="headerlink" title="Mini-batch和SGD的比较"></a>Mini-batch和SGD的比较</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha = <span class="number">0.001</span></span><br><span class="line">iters = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机梯度下降</span></span><br><span class="line">SGD_theta = np.zeros((<span class="number">14</span>,<span class="number">1</span>))</span><br><span class="line">batch_size = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">SGD_theta, SGD_train = stochastic_descent(X_train, y_train, SGD_theta, alpha, iters, batch_size, X_valid, y_valid)</span><br><span class="line">SGD_valid = compute_loss(X_valid, y_valid, SGD_theta)</span><br><span class="line">print(SGD_train.min())</span><br><span class="line">print(SGD_valid)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量梯度下降</span></span><br><span class="line">Mini_theta = np.zeros((<span class="number">14</span>,<span class="number">1</span>))</span><br><span class="line">batch_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">Mini_theta, Mini_train = stochastic_descent(X_train, y_train, Mini_theta, alpha, iters, batch_size, X_valid, y_valid)</span><br><span class="line">Mini_valid = compute_loss(X_valid, y_valid, Mini_theta)</span><br><span class="line">print(Mini_train.min())</span><br><span class="line">print(Mini_valid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iteration = np.arange(<span class="number">0</span>, iters, step = <span class="number">1</span>)</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.set_title(<span class="string">'SGD vs MiniBatch'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'iteration'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.plot(iteration, SGD_train,<span class="string">'b'</span>, label=<span class="string">'SGD_train'</span>)</span><br><span class="line">plt.plot(iteration, Mini_train,<span class="string">'r'</span>, label=<span class="string">'Mini_train'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0101.PNG"  alt=""></p>
<h3 id="Mini-batch和Momentum的比较"><a href="#Mini-batch和Momentum的比较" class="headerlink" title="Mini-batch和Momentum的比较"></a>Mini-batch和Momentum的比较</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha = <span class="number">0.0001</span></span><br><span class="line">iters = <span class="number">1000</span></span><br><span class="line">Mini_theta = np.zeros((<span class="number">14</span>,<span class="number">1</span>))</span><br><span class="line">batch_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">Mini_theta, Mini_train = stochastic_descent(X_train, y_train, Mini_theta, alpha, iters, batch_size, X_valid, y_valid)</span><br><span class="line">Mini_valid = compute_loss(X_valid, y_valid, Mini_theta)</span><br><span class="line">print(Mini_train.min())</span><br><span class="line">print(Mini_valid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Momentum_theta = np.zeros((<span class="number">14</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">Momentum_theta, Momentum_train = stochastic_descent(X_train, y_train, Momentum_theta, alpha, iters, batch_size, X_valid, y_valid, <span class="string">'Momentum'</span>)</span><br><span class="line">Momentum_valid = compute_loss(X_valid, y_valid, Momentum_theta)</span><br><span class="line">print(Momentum_train.min())</span><br><span class="line">print(Momentum_valid)</span><br><span class="line"></span><br><span class="line">right = iters</span><br><span class="line">iteration = np.arange(<span class="number">0</span>, right, step = <span class="number">1</span>)</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.set_title(<span class="string">'Momentum vs MiniBatch'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'iteration'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.plot(iteration, Momentum_train[<span class="number">0</span>:right],<span class="string">'b'</span>, label=<span class="string">'Momentum_train'</span>)</span><br><span class="line">plt.plot(iteration, Mini_train[<span class="number">0</span>:right],<span class="string">'r'</span>, label=<span class="string">'Mini_train'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0102.PNG"  alt=""></p>
<h2 id="Mini-batch和RMSprop的比较"><a href="#Mini-batch和RMSprop的比较" class="headerlink" title="Mini-batch和RMSprop的比较"></a>Mini-batch和RMSprop的比较</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">iters = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">RMSprop_theta = np.zeros((<span class="number">14</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">RMSprop_theta,RMSprop_train = stochastic_descent(X_train, y_train, RMSprop_theta, alpha, iters, batch_size, X_valid, y_valid, <span class="string">'RMSprop'</span>)</span><br><span class="line">RMSprop_valid = compute_loss(X_valid, y_valid, RMSprop_theta)</span><br><span class="line">print(RMSprop_train.min())</span><br><span class="line">print(RMSprop_valid)</span><br><span class="line"></span><br><span class="line">right = iters</span><br><span class="line">iteration = np.arange(<span class="number">0</span>, right, step = <span class="number">1</span>)</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.set_title(<span class="string">'RMSprop vs MiniBatch'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'iteration'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.plot(iteration, RMSprop_train[<span class="number">0</span>:right],<span class="string">'b'</span>, label=<span class="string">'RMSprop_train'</span>)</span><br><span class="line">plt.plot(iteration, Mini_train[<span class="number">0</span>:right],<span class="string">'r'</span>, label=<span class="string">'Mini_train'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0103.PNG"  alt=""></p>
<h3 id="Mini-batch和Adam的比较"><a href="#Mini-batch和Adam的比较" class="headerlink" title="Mini-batch和Adam的比较"></a>Mini-batch和Adam的比较</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">iters = <span class="number">500</span></span><br><span class="line">Adam_theta = np.zeros((<span class="number">14</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">Adam_theta,Adam_train = stochastic_descent(X_train, y_train, Adam_theta, alpha, iters, batch_size, X_valid, y_valid, <span class="string">'Adam'</span>)</span><br><span class="line">Adam_valid = compute_loss(X_valid, y_valid, Adam_theta)</span><br><span class="line">print(Adam_train.min())</span><br><span class="line"></span><br><span class="line">print(Adam_valid)</span><br><span class="line"></span><br><span class="line">right = iters</span><br><span class="line">iteration = np.arange(<span class="number">0</span>, right, step = <span class="number">1</span>)</span><br><span class="line">fig, ax = plt.subplots(figsize = (<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax.set_title(<span class="string">'Adam vs MiniBatch'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'iteration'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'loss'</span>)</span><br><span class="line">plt.plot(iteration, Adam_train[<span class="number">0</span>:right],<span class="string">'b'</span>, label=<span class="string">'Adam_train'</span>)</span><br><span class="line">plt.plot(iteration, Mini_train[<span class="number">0</span>:right],<span class="string">'r'</span>, label=<span class="string">'Mini_train'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0104.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-57" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path><path id="MJX-TEX-I-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-TEX-I-3BC" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-TEX-I-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></defs></svg>]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>二手车交易价格预测-建模调参</title>
    <url>/2020/03/31/%E4%BA%8C%E6%89%8B%E8%BD%A6%E4%BA%A4%E6%98%93%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B-%E5%BB%BA%E6%A8%A1%E8%B0%83%E5%8F%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><hr>
<ol>
<li>线性回归模型：<ul>
<li>线性回归对于特征的要求；</li>
<li>处理长尾分布；</li>
<li>理解线性回归模型；</li>
</ul>
</li>
<li>模型性能验证：<ul>
<li>评价函数与目标函数；</li>
<li>交叉验证方法；</li>
<li>留一验证方法；</li>
<li>针对时间序列问题的验证；</li>
<li>绘制学习率曲线；</li>
<li>绘制验证曲线；</li>
</ul>
</li>
<li>嵌入式特征选择：<ul>
<li>Lasso回归；</li>
<li>Ridge回归；</li>
<li>决策树；</li>
</ul>
</li>
<li>模型对比：<ul>
<li>常用线性模型；</li>
<li>常用非线性模型；</li>
</ul>
</li>
<li>模型调参：<ul>
<li>贪心调参方法；</li>
<li>网格调参方法；</li>
<li>贝叶斯调参方法；</li>
</ul>
</li>
</ol>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><hr>
<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reduce_mem_usage 函数通过调整数据类型，帮助我们减少数据在内存中占用的空间</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reduce_mem_usage</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="string">""" iterate through all the columns of a dataframe and modify the data type</span></span><br><span class="line"><span class="string">        to reduce memory usage.        </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    start_mem = df.memory_usage().sum() </span><br><span class="line">    print(<span class="string">'Memory usage of dataframe is {:.2f} MB'</span>.format(start_mem))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">        col_type = df[col].dtype</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> col_type != object:</span><br><span class="line">            c_min = df[col].min()</span><br><span class="line">            c_max = df[col].max()</span><br><span class="line">            <span class="keyword">if</span> str(col_type)[:<span class="number">3</span>] == <span class="string">'int'</span>:</span><br><span class="line">                <span class="keyword">if</span> c_min &gt; np.iinfo(np.int8).min <span class="keyword">and</span> c_max &lt; np.iinfo(np.int8).max:</span><br><span class="line">                    df[col] = df[col].astype(np.int8)</span><br><span class="line">                <span class="keyword">elif</span> c_min &gt; np.iinfo(np.int16).min <span class="keyword">and</span> c_max &lt; np.iinfo(np.int16).max:</span><br><span class="line">                    df[col] = df[col].astype(np.int16)</span><br><span class="line">                <span class="keyword">elif</span> c_min &gt; np.iinfo(np.int32).min <span class="keyword">and</span> c_max &lt; np.iinfo(np.int32).max:</span><br><span class="line">                    df[col] = df[col].astype(np.int32)</span><br><span class="line">                <span class="keyword">elif</span> c_min &gt; np.iinfo(np.int64).min <span class="keyword">and</span> c_max &lt; np.iinfo(np.int64).max:</span><br><span class="line">                    df[col] = df[col].astype(np.int64)  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> c_min &gt; np.finfo(np.float16).min <span class="keyword">and</span> c_max &lt; np.finfo(np.float16).max:</span><br><span class="line">                    df[col] = df[col].astype(np.float16)</span><br><span class="line">                <span class="keyword">elif</span> c_min &gt; np.finfo(np.float32).min <span class="keyword">and</span> c_max &lt; np.finfo(np.float32).max:</span><br><span class="line">                    df[col] = df[col].astype(np.float32)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    df[col] = df[col].astype(np.float64)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            df[col] = df[col].astype(<span class="string">'category'</span>)</span><br><span class="line"></span><br><span class="line">    end_mem = df.memory_usage().sum() </span><br><span class="line">    print(<span class="string">'Memory usage after optimization is: {:.2f} MB'</span>.format(end_mem))</span><br><span class="line">    print(<span class="string">'Decreased by {:.1f}%'</span>.format(<span class="number">100</span> * (start_mem - end_mem) / start_mem))</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sample_feature = reduce_mem_usage(pd.read_csv(<span class="string">'data_for_tree.csv'</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0085.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">continuous_feature_names = [x <span class="keyword">for</span> x <span class="keyword">in</span> sample_feature.columns <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'price'</span>,<span class="string">'brand'</span>,<span class="string">'model'</span>,<span class="string">'brand'</span>]]</span><br></pre></td></tr></table></figure>

<h2 id="线性回归-amp-五折交叉验证-amp-模拟真实业务情况"><a href="#线性回归-amp-五折交叉验证-amp-模拟真实业务情况" class="headerlink" title="线性回归 & 五折交叉验证 & 模拟真实业务情况"></a>线性回归 &amp; 五折交叉验证 &amp; 模拟真实业务情况</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sample_feature = sample_feature.dropna().replace(<span class="string">'-'</span>, <span class="number">0</span>).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line">sample_feature[<span class="string">'notRepairedDamage'</span>] = sample_feature[<span class="string">'notRepairedDamage'</span>].astype(np.float32)</span><br><span class="line">train = sample_feature[continuous_feature_names + [<span class="string">'price'</span>]]</span><br><span class="line"></span><br><span class="line">train_X = train[continuous_feature_names]</span><br><span class="line">train_y = train[<span class="string">'price'</span>]</span><br></pre></td></tr></table></figure>

<h3 id="简单建模"><a href="#简单建模" class="headerlink" title="简单建模"></a>简单建模</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">model = LinearRegression(normalize=<span class="literal">True</span>)</span><br><span class="line">model = model.fit(train_X, train_y)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看训练的线性回归模型的截距（intercept）与权重(coef)</span></span><br><span class="line"><span class="string">'intercept:'</span>+ str(model.intercept_)</span><br><span class="line"></span><br><span class="line">sorted(dict(zip(continuous_feature_names, model.coef_)).items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0086.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">subsample_index = np.random.randint(low=<span class="number">0</span>, high=len(train_y), size=<span class="number">50</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制特征v_9的值与标签的散点图</span></span><br><span class="line"><span class="comment"># 图片发现模型的预测结果（蓝色点）与真实标签（黑色点）的分布差异较大</span></span><br><span class="line"><span class="comment"># 且部分预测值出现了小于0的情况，说明我们的模型存在一些问题</span></span><br><span class="line">plt.scatter(train_X[<span class="string">'v_9'</span>][subsample_index], train_y[subsample_index], color=<span class="string">'black'</span>)</span><br><span class="line">plt.scatter(train_X[<span class="string">'v_9'</span>][subsample_index], model.predict(train_X.loc[subsample_index]), color=<span class="string">'blue'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'v_9'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'price'</span>)</span><br><span class="line">plt.legend([<span class="string">'True Price'</span>,<span class="string">'Predicted Price'</span>],loc=<span class="string">'upper right'</span>)</span><br><span class="line">print(<span class="string">'The predicted price is obvious different from true price'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0087.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过作图我们发现数据的标签（price）呈现长尾分布，不利于我们的建模预测。</span></span><br><span class="line"><span class="comment"># 原因是很多模型都假设数据误差项符合正态分布，而长尾分布的数据违背了这一假设。</span></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">print(<span class="string">'It is clear to see the price shows a typical exponential distribution'</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">sns.distplot(train_y)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">sns.distplot(train_y[train_y &lt; np.quantile(train_y, <span class="number">0.9</span>)])</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0088.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>DataMining</category>
      </categories>
      <tags>
        <tag>DataMining</tag>
        <tag>价格预测</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot构建REST服务</title>
    <url>/2020/03/27/SpringBoot%E6%9E%84%E5%BB%BAREST%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了RESTful以及如何在SpringBoot中构建REST服务</p>
<a id="more"></a>

<h1 id="RESTful简介"><a href="#RESTful简介" class="headerlink" title="RESTful简介"></a>RESTful简介</h1><hr>
<p>在移动互联网中，RESTful 得到了非常广泛的使用。RESTful 这个概念提出来很早，但是以前没有移动互联网时，我们做的大部分应用都是前后端不分的，在这种架构的应用中，数据基本上都是在后端渲染好返回给前端展示的，此时 RESTful 在 Web 应用中基本就没用武之地，移动互联网的兴起，让我们一套后台对应多个前端项目，因此前后端分离，RESTful 顺利走上前台。</p>
<p>RESTful的功能，通俗来讲就是：<strong>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。</strong></p>
<ul>
<li>GET：获取资源</li>
<li>POST：新建或更新资源</li>
<li>PUT：更新资源</li>
<li>DELETE：删除资源</li>
</ul>
<p>那么我们就通过一个实例来看看SpringBoot中如何使用RESTful。</p>
<h1 id="SpringBoot中构建REST服务"><a href="#SpringBoot中构建REST服务" class="headerlink" title="SpringBoot中构建REST服务"></a>SpringBoot中构建REST服务</h1><hr>
<h2 id="搭建Jpa环境"><a href="#搭建Jpa环境" class="headerlink" title="搭建Jpa环境"></a>搭建Jpa环境</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在application-properties中配置"><a href="#在application-properties中配置" class="headerlink" title="在application.properties中配置"></a>在application.properties中配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/javaboy?serverTimezone=UTC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.jpa.properties..hibernate.dialect</span>=<span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.database-platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br></pre></td></tr></table></figure>

<h3 id="创建Book实体类"><a href="#创建Book实体类" class="headerlink" title="创建Book实体类"></a>创建Book实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jparestful.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/25 18:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"t_book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", author='"</span> + author + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="创建BookDao接口"><a href="#创建BookDao接口" class="headerlink" title="创建BookDao接口"></a>创建BookDao接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jparestful.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jparestful.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.query.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/25 18:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>{</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findBookByNameContaining</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findBookByIdGreaterThan</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>至此我们的基础配置就做好了，那么我们通过postman来测试以下RESTful的默认接口</p>
<h2 id="RESTful默认的增删改查"><a href="#RESTful默认的增删改查" class="headerlink" title="RESTful默认的增删改查"></a>RESTful默认的增删改查</h2><h3 id="用GET方法查询数据"><a href="#用GET方法查询数据" class="headerlink" title="用GET方法查询数据"></a>用GET方法查询数据</h3><p>我们在postman中使用GET方法访问该网址<code>http://localhost:8080/books</code></p>
<p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0083.PNG"  alt=""></p>
<p>从图中的URL中我们还可以看到，在后面添加数据的id，即可查到特定的数据。并且page中还显示了分页信息</p>
<ul>
<li>size表示每一页的条数</li>
<li>totalElements表示总数据量</li>
<li>totalPages表示总页数</li>
<li>number表示当前页数</li>
</ul>
<h3 id="用POST方法增加数据"><a href="#用POST方法增加数据" class="headerlink" title="用POST方法增加数据"></a>用POST方法增加数据</h3><p><img src="/" class="lazyload" data-src="http://q7yezbh4o.bkt.clouddn.com/image/0084.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合MongoDB</title>
    <url>/2020/03/27/SpringBoot%E6%95%B4%E5%90%88MongoDB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了MongDB的安装以及在SpringBoot中如何使用</p>
<a id="more"></a>

<h1 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h1><hr>
<p>这里使用<strong>docker</strong>来安装MongoDB，首先进入cmd，输入以下命令拉取镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<p>将mongo的镜像拉取下来之后，输入以下命令启动mongo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 27017:27017 --name mongo --restart:always -e MONGO_INITDB_ROOT_USERNAME=username -e MONGO_INITDB_ROOT_PASSWORD=password</span><br></pre></td></tr></table></figure>

<p>启动mongo后就可以使用了，可以使用Robo 3T来连接mongo</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0082.PNG"  alt=""></p>
<h1 id="在SpringBoot中使用MongoDB"><a href="#在SpringBoot中使用MongoDB" class="headerlink" title="在SpringBoot中使用MongoDB"></a>在SpringBoot中使用MongoDB</h1><hr>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在application-properties中配置"><a href="#在application-properties中配置" class="headerlink" title="在application.properties中配置"></a>在application.properties中配置</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.data.mongodb.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.data.mongodb.authentication-database</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">spring.data.mongodb.username</span>=<span class="string">wellenzheng</span></span><br><span class="line"><span class="meta">spring.data.mongodb.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.data.mongodb.port</span>=<span class="string">27017</span></span><br><span class="line"><span class="meta">spring.data.mongodb.database</span>=<span class="string">JavaBoy</span></span><br></pre></td></tr></table></figure>

<h2 id="创建Book实体类"><a href="#创建Book实体类" class="headerlink" title="创建Book实体类"></a>创建Book实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongodb.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/25 17:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", author='"</span> + author + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="两种方式操纵MongoDB"><a href="#两种方式操纵MongoDB" class="headerlink" title="两种方式操纵MongoDB"></a>两种方式操纵MongoDB</h2><h3 id="MongoRepository-lt-T-ID-gt"><a href="#MongoRepository-lt-T-ID-gt" class="headerlink" title="MongoRepository<T, ID>"></a>MongoRepository&lt;T, ID&gt;</h3><p>MongoRepository&lt;T, ID&gt;使用的是Spring Data的处理方式</p>
<h4 id="创建BookDao接口"><a href="#创建BookDao接口" class="headerlink" title="创建BookDao接口"></a>创建BookDao接口</h4><p>我们可以看到，dao接口只需要继承自MongoRepository&lt;T, ID&gt;即可，T是实体类，ID是实体类的主键。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongodb.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mongodb.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/25 17:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>{</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findBookByNameContaining</span><span class="params">(String s)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h4 id="在Test中测试"><a href="#在Test中测试" class="headerlink" title="在Test中测试"></a>在Test中测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongodb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mongodb.bean.Book;</span><br><span class="line"><span class="keyword">import</span> com.example.mongodb.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongodbApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">"ThreeBody"</span>);</span><br><span class="line">        book.setAuthor(<span class="string">"Liu Cixin"</span>);</span><br><span class="line">        bookDao.insert(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Book&gt; bookList = bookDao.findAll();</span><br><span class="line">        System.out.println(bookList);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Book&gt; bookList = bookDao.findBookByNameContaining(<span class="string">"Three"</span>);</span><br><span class="line">        System.out.println(bookList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="MongoTemplate"><a href="#MongoTemplate" class="headerlink" title="MongoTemplate"></a>MongoTemplate</h3><p>MongoTemplate直接注入进来使用即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mongodb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mongodb.bean.Book;</span><br><span class="line"><span class="keyword">import</span> com.example.mongodb.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongodbApplicationTests</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">2</span>);</span><br><span class="line">        book.setName(<span class="string">"BallLightning"</span>);</span><br><span class="line">        book.setAuthor(<span class="string">"Liu Cixin"</span>);</span><br><span class="line">        mongoTemplate.insert(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Book&gt; bookList = mongoTemplate.findAll(Book<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(bookList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>二手车交易价格预测-特征工程</title>
    <url>/2020/03/27/%E4%BA%8C%E6%89%8B%E8%BD%A6%E4%BA%A4%E6%98%93%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B-%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：此部分为零基础入门数据挖掘的 Task3 特征工程 部分，带你来了解各种特征工程以及分析方法</p>
<a id="more"></a>

<h1 id="特征工程目标"><a href="#特征工程目标" class="headerlink" title="特征工程目标"></a>特征工程目标</h1><hr>
<ol>
<li>异常处理：<ul>
<li>通过箱线图（或 3-Sigma）分析删除异常值；</li>
<li>BOX-COX 转换（处理有偏分布）；</li>
<li>长尾截断；</li>
</ul>
</li>
<li>特征归一化/标准化：<ul>
<li>标准化（转换为标准正态分布）；</li>
<li>归一化（抓换到 [0,1] 区间）；</li>
<li>针对幂律分布，可以采用公式： <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex" xmlns="http://www.w3.org/2000/svg" width="12.991ex" height="2.878ex" role="img" focusable="false" viewBox="0 -868.9 5742 1271.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6C"></use></g><g data-mml-node="mi" transform="translate(298, 0)"><use xlink:href="#MJX-TEX-I-6F"></use></g><g data-mml-node="mi" transform="translate(783, 0)"><use xlink:href="#MJX-TEX-I-67"></use></g><g data-mml-node="mo" transform="translate(1260, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mfrac" transform="translate(1649, 0)"><g data-mml-node="mrow" transform="translate(1197.9, 398) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1278, 0)"><use xlink:href="#MJX-TEX-I-78"></use></g></g><g data-mml-node="mrow" transform="translate(220, -345) scale(0.707)"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(500, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1278, 0)"><use xlink:href="#MJX-TEX-I-6D"></use></g><g data-mml-node="mi" transform="translate(2156, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(2622, 0)"><use xlink:href="#MJX-TEX-I-64"></use></g><g data-mml-node="mi" transform="translate(3142, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(3487, 0)"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mi" transform="translate(4016, 0)"><use xlink:href="#MJX-TEX-I-6E"></use></g></g><rect width="3464" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(5353, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></svg></mjx-container></li>
</ul>
</li>
<li>数据分桶：<ul>
<li>等频分桶；</li>
<li>等距分桶；</li>
<li>Best-KS 分桶（类似利用基尼指数进行二分类）；</li>
<li>卡方分桶；</li>
</ul>
</li>
<li>缺失值处理：<ul>
<li>不处理（针对类似 XGBoost 等树模型）；</li>
<li>删除（缺失数据太多）；</li>
<li>插值补全，包括均值/中位数/众数/建模预测/多重插补/压缩感知补全/矩阵补全等；</li>
<li>分箱，缺失值一个箱；</li>
</ul>
</li>
<li>特征构造：<ul>
<li>构造统计量特征，报告计数、求和、比例、标准差等；</li>
<li>时间特征，包括相对时间和绝对时间，节假日，双休日等；</li>
<li>地理信息，包括分箱，分布编码等方法；</li>
<li>非线性变换，包括 log/ 平方/ 根号等；</li>
<li>特征组合，特征交叉；</li>
<li>仁者见仁，智者见智。</li>
</ul>
</li>
<li>特征筛选<ul>
<li>过滤式（filter）：先对数据进行特征选择，然后在训练学习器，常见的方法有 Relief/方差选择发/相关系数法/卡方检验法/互信息法；</li>
<li>包裹式（wrapper）：直接把最终将要使用的学习器的性能作为特征子集的评价准则，常见方法有 LVM（Las Vegas Wrapper） ；</li>
<li>嵌入式（embedding）：结合过滤式和包裹式，学习器训练过程中自动进行了特征选择，常见的有 lasso 回归；</li>
</ul>
</li>
<li>降维<ul>
<li>PCA/ LDA/ ICA；</li>
<li>特征选择也是一种降维。</li>
</ul>
</li>
</ol>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><hr>
<h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train = pd.read_csv(<span class="string">'data/train.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">test = pd.read_csv(<span class="string">'data/testA.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">print(train.shape)</span><br><span class="line">print(test.shape)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train.columns</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0067.PNG"  alt=""></p>
<h2 id="删除异常值"><a href="#删除异常值" class="headerlink" title="删除异常值"></a>删除异常值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里我包装了一个异常值处理的代码，可以随便调用。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outliers_proc</span><span class="params">(data, col_name, scale=<span class="number">3</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用于清洗异常值，默认用 box_plot（scale=3）进行清洗</span></span><br><span class="line"><span class="string">    :param data: 接收 pandas 数据格式</span></span><br><span class="line"><span class="string">    :param col_name: pandas 列名</span></span><br><span class="line"><span class="string">    :param scale: 尺度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">box_plot_outliers</span><span class="params">(data_ser, box_scale)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        利用箱线图去除异常值</span></span><br><span class="line"><span class="string">        :param data_ser: 接收 pandas.Series 数据格式</span></span><br><span class="line"><span class="string">        :param box_scale: 箱线图尺度，</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 四分位间距：Delta(Q) = (Q3 - Q1) * scale</span></span><br><span class="line">        <span class="comment"># 下界：low = Q1 - Delta(Q)</span></span><br><span class="line">        <span class="comment"># 上界：up = Q3 + Delta(Q)</span></span><br><span class="line">        <span class="comment"># 在上下界之外的值则视为异常值</span></span><br><span class="line">        </span><br><span class="line">        iqr = box_scale * (data_ser.quantile(<span class="number">0.75</span>) - data_ser.quantile(<span class="number">0.25</span>))</span><br><span class="line">        val_low = data_ser.quantile(<span class="number">0.25</span>) - iqr</span><br><span class="line">        val_up = data_ser.quantile(<span class="number">0.75</span>) + iqr</span><br><span class="line">        rule_low = (data_ser &lt; val_low)</span><br><span class="line">        rule_up = (data_ser &gt; val_up)</span><br><span class="line">        <span class="keyword">return</span> (rule_low, rule_up), (val_low, val_up)</span><br><span class="line"></span><br><span class="line">    data_n = data.copy()</span><br><span class="line">    data_series = data_n[col_name]</span><br><span class="line">    <span class="comment"># 获取异常值的范围</span></span><br><span class="line">    rule, value = box_plot_outliers(data_series, box_scale=scale)</span><br><span class="line">    <span class="comment"># 获取异常值的下标</span></span><br><span class="line">    index = np.arange(data_series.shape[<span class="number">0</span>])[rule[<span class="number">0</span>] | rule[<span class="number">1</span>]]</span><br><span class="line">    print(<span class="string">"Delete number is: {}"</span>.format(len(index)))</span><br><span class="line">    <span class="comment"># 删除异常值</span></span><br><span class="line">    data_n = data_n.drop(index)</span><br><span class="line">    data_n.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    print(<span class="string">"Now column number is: {}"</span>.format(data_n.shape[<span class="number">0</span>]))</span><br><span class="line">    index_low = np.arange(data_series.shape[<span class="number">0</span>])[rule[<span class="number">0</span>]]</span><br><span class="line">    outliers = data_series.iloc[index_low]</span><br><span class="line">    print(<span class="string">"Description of data less than the lower bound is:"</span>)</span><br><span class="line">    print(pd.Series(outliers).describe())</span><br><span class="line">    index_up = np.arange(data_series.shape[<span class="number">0</span>])[rule[<span class="number">1</span>]]</span><br><span class="line">    outliers = data_series.iloc[index_up]</span><br><span class="line">    print(<span class="string">"Description of data larger than the upper bound is:"</span>)</span><br><span class="line">    print(pd.Series(outliers).describe())</span><br><span class="line">    </span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">7</span>))</span><br><span class="line">    sns.boxplot(y=data[col_name], data=data, palette=<span class="string">"Set1"</span>, ax=ax[<span class="number">0</span>])</span><br><span class="line">    sns.boxplot(y=data_n[col_name], data=data_n, palette=<span class="string">"Set1"</span>, ax=ax[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> data_n</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们可以删掉一些异常数据，以 power 为例。  </span></span><br><span class="line"><span class="comment"># 这里删不删同学可以自行判断</span></span><br><span class="line"><span class="comment"># 但是要注意 test 的数据不能删 = = 不能掩耳盗铃是不是</span></span><br><span class="line"></span><br><span class="line">train = outliers_proc(train, <span class="string">'power'</span>, scale=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0068.PNG"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0069.PNG"  alt=""></p>
<h2 id="特征构造"><a href="#特征构造" class="headerlink" title="特征构造"></a>特征构造</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 训练集和测试集放在一起，方便构造特征</span></span><br><span class="line">train[<span class="string">'train'</span>]=<span class="number">1</span></span><br><span class="line">test[<span class="string">'train'</span>]=<span class="number">0</span></span><br><span class="line">data = pd.concat([train, test], ignore_index=<span class="literal">True</span>, sort=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用时间：data['creatDate'] - data['regDate']，反应汽车使用时间，一般来说价格与使用时间成反比</span></span><br><span class="line"><span class="comment"># 不过要注意，数据里有时间出错的格式，所以我们需要 errors='coerce'</span></span><br><span class="line">data[<span class="string">'used_time'</span>] = (pd.to_datetime(data[<span class="string">'creatDate'</span>], format=<span class="string">'%Y%m%d'</span>, errors=<span class="string">'coerce'</span>) - </span><br><span class="line">                            pd.to_datetime(data[<span class="string">'regDate'</span>], format=<span class="string">'%Y%m%d'</span>, errors=<span class="string">'coerce'</span>)).dt.days</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看一下空数据，有 15k 个样本的时间是有问题的，我们可以选择删除，也可以选择放着。</span></span><br><span class="line"><span class="comment"># 但是这里不建议删除，因为删除缺失数据占总样本量过大，7.5%</span></span><br><span class="line"><span class="comment"># 我们可以先放着，因为如果我们 XGBoost 之类的决策树，其本身就能处理缺失值，所以可以不用管；</span></span><br><span class="line">data[<span class="string">'used_time'</span>].isnull().sum()</span><br></pre></td></tr></table></figure>

<p>15072</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从邮编中提取城市信息，因为是德国的数据，所以参考德国的邮编，相当于加入了先验知识</span></span><br><span class="line">data[<span class="string">'city'</span>] = data[<span class="string">'regionCode'</span>].apply(<span class="keyword">lambda</span> x : str(x)[:<span class="number">-3</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算某品牌的销售统计量，同学们还可以计算其他特征的统计量</span></span><br><span class="line"><span class="comment"># 这里要以 train 的数据计算统计量</span></span><br><span class="line">train_gb = train.groupby(<span class="string">"brand"</span>)</span><br><span class="line">all_info = {}</span><br><span class="line"><span class="keyword">for</span> kind, kind_data <span class="keyword">in</span> train_gb:</span><br><span class="line">    info = {}</span><br><span class="line">    kind_data = kind_data[kind_data[<span class="string">'price'</span>] &gt; <span class="number">0</span>]</span><br><span class="line">    info[<span class="string">'brand_amount'</span>] = len(kind_data)</span><br><span class="line">    info[<span class="string">'brand_price_max'</span>] = kind_data.price.max()</span><br><span class="line">    info[<span class="string">'brand_price_median'</span>] = kind_data.price.median()</span><br><span class="line">    info[<span class="string">'brand_price_min'</span>] = kind_data.price.min()</span><br><span class="line">    info[<span class="string">'brand_price_sum'</span>] = kind_data.price.sum()</span><br><span class="line">    info[<span class="string">'brand_price_std'</span>] = kind_data.price.std()</span><br><span class="line">    info[<span class="string">'brand_price_average'</span>] = round(kind_data.price.sum() / (len(kind_data) + <span class="number">1</span>), <span class="number">2</span>)</span><br><span class="line">    all_info[kind] = info</span><br><span class="line">brand_fe = pd.DataFrame(all_info).T.reset_index().rename(columns={<span class="string">"index"</span>: <span class="string">"brand"</span>})</span><br><span class="line">data = data.merge(brand_fe, how=<span class="string">'left'</span>, on=<span class="string">'brand'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据分桶 以 power 为例</span></span><br><span class="line"><span class="comment"># 这时候我们的缺失值也进桶了，</span></span><br><span class="line"><span class="comment"># 为什么要做数据分桶呢，原因有很多，= =</span></span><br><span class="line"><span class="comment"># 1. 离散后稀疏向量内积乘法运算速度更快，计算结果也方便存储，容易扩展；</span></span><br><span class="line"><span class="comment"># 2. 离散后的特征对异常值更具鲁棒性，如 age&gt;30 为 1 否则为 0，对于年龄为 200 的也不会对模型造成很大的干扰；</span></span><br><span class="line"><span class="comment"># 3. LR 属于广义线性模型，表达能力有限，经过离散化后，每个变量有单独的权重，这相当于引入了非线性，能够提升模型的表达能力，加大拟合；</span></span><br><span class="line"><span class="comment"># 4. 离散后特征可以进行特征交叉，提升表达能力，由 M+N 个变量编程 M*N 个变量，进一步引入非线形，提升了表达能力；</span></span><br><span class="line"><span class="comment"># 5. 特征离散后模型更稳定，如用户年龄区间，不会因为用户年龄长了一岁就变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然还有很多原因，LightGBM 在改进 XGBoost 时就增加了数据分桶，增强了模型的泛化性</span></span><br><span class="line"></span><br><span class="line">bin = [i*<span class="number">10</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>)]</span><br><span class="line">data[<span class="string">'power_bin'</span>] = pd.cut(data[<span class="string">'power'</span>], bin, labels=<span class="literal">False</span>)</span><br><span class="line">data[[<span class="string">'power_bin'</span>, <span class="string">'power'</span>]].head()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0070.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用好了，就可以删掉原始数据了</span></span><br><span class="line">data = data.drop([<span class="string">'creatDate'</span>, <span class="string">'regDate'</span>, <span class="string">'regionCode'</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(data.shape)</span><br><span class="line">data.columns</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0071.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目前的数据其实已经可以给树模型使用了，所以我们导出一下</span></span><br><span class="line">data.to_csv(<span class="string">'data_for_tree.csv'</span>, index=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们可以再构造一份特征给 LR NN 之类的模型用</span></span><br><span class="line"><span class="comment"># 之所以分开构造是因为，不同模型对数据集的要求不同</span></span><br><span class="line"><span class="comment"># 我们看下数据分布：</span></span><br><span class="line">data[<span class="string">'power'</span>].plot.hist()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0072.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们刚刚已经对 train 进行异常值处理了，但是现在还有这么奇怪的分布是因为 test 中的 power 异常值，</span></span><br><span class="line"><span class="comment"># 所以我们其实刚刚 train 中的 power 异常值不删为好，可以用长尾分布截断来代替</span></span><br><span class="line">train[<span class="string">'power'</span>].plot.hist()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们对其取 log，在做归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line">min_max_scaler = preprocessing.MinMaxScaler()</span><br><span class="line">data[<span class="string">'power'</span>] = np.log(data[<span class="string">'power'</span>] + <span class="number">1</span>) </span><br><span class="line">data[<span class="string">'power'</span>] = ((data[<span class="string">'power'</span>] - np.min(data[<span class="string">'power'</span>])) / (np.max(data[<span class="string">'power'</span>]) - np.min(data[<span class="string">'power'</span>])))</span><br><span class="line">data[<span class="string">'power'</span>].plot.hist()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0074.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># km 的比较正常，应该是已经做过分桶了</span></span><br><span class="line">data[<span class="string">'kilometer'</span>].plot.hist()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0075.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所以我们可以直接做归一化</span></span><br><span class="line">data[<span class="string">'kilometer'</span>] = ((data[<span class="string">'kilometer'</span>] - np.min(data[<span class="string">'kilometer'</span>])) / </span><br><span class="line">                        (np.max(data[<span class="string">'kilometer'</span>]) - np.min(data[<span class="string">'kilometer'</span>])))</span><br><span class="line">data[<span class="string">'kilometer'</span>].plot.hist()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0076.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 除此之外 还有我们刚刚构造的统计量特征：</span></span><br><span class="line"><span class="comment"># 'brand_amount', 'brand_price_average', 'brand_price_max',</span></span><br><span class="line"><span class="comment"># 'brand_price_median', 'brand_price_min', 'brand_price_std',</span></span><br><span class="line"><span class="comment"># 'brand_price_sum'</span></span><br><span class="line"><span class="comment"># 这里不再一一举例分析了，直接做变换，</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_min</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x - np.min(x)) / (np.max(x) - np.min(x))</span><br><span class="line"></span><br><span class="line">data[<span class="string">'brand_amount'</span>] = ((data[<span class="string">'brand_amount'</span>] - np.min(data[<span class="string">'brand_amount'</span>])) / </span><br><span class="line">                        (np.max(data[<span class="string">'brand_amount'</span>]) - np.min(data[<span class="string">'brand_amount'</span>])))</span><br><span class="line">data[<span class="string">'brand_price_average'</span>] = ((data[<span class="string">'brand_price_average'</span>] - np.min(data[<span class="string">'brand_price_average'</span>])) / </span><br><span class="line">                               (np.max(data[<span class="string">'brand_price_average'</span>]) - np.min(data[<span class="string">'brand_price_average'</span>])))</span><br><span class="line">data[<span class="string">'brand_price_max'</span>] = ((data[<span class="string">'brand_price_max'</span>] - np.min(data[<span class="string">'brand_price_max'</span>])) / </span><br><span class="line">                           (np.max(data[<span class="string">'brand_price_max'</span>]) - np.min(data[<span class="string">'brand_price_max'</span>])))</span><br><span class="line">data[<span class="string">'brand_price_median'</span>] = ((data[<span class="string">'brand_price_median'</span>] - np.min(data[<span class="string">'brand_price_median'</span>])) /</span><br><span class="line">                              (np.max(data[<span class="string">'brand_price_median'</span>]) - np.min(data[<span class="string">'brand_price_median'</span>])))</span><br><span class="line">data[<span class="string">'brand_price_min'</span>] = ((data[<span class="string">'brand_price_min'</span>] - np.min(data[<span class="string">'brand_price_min'</span>])) / </span><br><span class="line">                           (np.max(data[<span class="string">'brand_price_min'</span>]) - np.min(data[<span class="string">'brand_price_min'</span>])))</span><br><span class="line">data[<span class="string">'brand_price_std'</span>] = ((data[<span class="string">'brand_price_std'</span>] - np.min(data[<span class="string">'brand_price_std'</span>])) / </span><br><span class="line">                           (np.max(data[<span class="string">'brand_price_std'</span>]) - np.min(data[<span class="string">'brand_price_std'</span>])))</span><br><span class="line">data[<span class="string">'brand_price_sum'</span>] = ((data[<span class="string">'brand_price_sum'</span>] - np.min(data[<span class="string">'brand_price_sum'</span>])) / </span><br><span class="line">                           (np.max(data[<span class="string">'brand_price_sum'</span>]) - np.min(data[<span class="string">'brand_price_sum'</span>])))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对类别特征进行 OneEncoder</span></span><br><span class="line">data = pd.get_dummies(data, columns=[<span class="string">'model'</span>, <span class="string">'brand'</span>, <span class="string">'bodyType'</span>, <span class="string">'fuelType'</span>,</span><br><span class="line">                                     <span class="string">'gearbox'</span>, <span class="string">'notRepairedDamage'</span>, <span class="string">'power_bin'</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(data.shape)</span><br><span class="line">data.columns</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0081.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这份数据可以给 LR 用</span></span><br><span class="line">data.to_csv(<span class="string">'data_for_lr.csv'</span>, index=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="特征筛选"><a href="#特征筛选" class="headerlink" title="特征筛选"></a>特征筛选</h2><h3 id="过滤式"><a href="#过滤式" class="headerlink" title="过滤式"></a>过滤式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相关性分析</span></span><br><span class="line">print(data[<span class="string">'power'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'kilometer'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'brand_amount'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'brand_price_average'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'brand_price_max'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br><span class="line">print(data[<span class="string">'brand_price_median'</span>].corr(data[<span class="string">'price'</span>], method=<span class="string">'spearman'</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0077.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当然也可以直接看图</span></span><br><span class="line">data_numeric = data[[<span class="string">'power'</span>, <span class="string">'kilometer'</span>, <span class="string">'brand_amount'</span>, <span class="string">'brand_price_average'</span>, </span><br><span class="line">                     <span class="string">'brand_price_max'</span>, <span class="string">'brand_price_median'</span>]]</span><br><span class="line">correlation = data_numeric.corr()</span><br><span class="line"></span><br><span class="line">f , ax = plt.subplots(figsize = (<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">plt.title(<span class="string">'Correlation of Numeric Features with Price'</span>,y=<span class="number">1</span>,size=<span class="number">16</span>)</span><br><span class="line">sns.heatmap(correlation,square = <span class="literal">True</span>,  vmax=<span class="number">0.8</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0078.PNG"  alt=""></p>
<h3 id="包裹式"><a href="#包裹式" class="headerlink" title="包裹式"></a>包裹式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># k_feature 太大会很难跑，没服务器，所以提前 interrupt 了</span></span><br><span class="line"><span class="keyword">from</span> mlxtend.feature_selection <span class="keyword">import</span> SequentialFeatureSelector <span class="keyword">as</span> SFS</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">sfs = SFS(LinearRegression(),</span><br><span class="line">           k_features=<span class="number">10</span>,</span><br><span class="line">           forward=<span class="literal">True</span>,</span><br><span class="line">           floating=<span class="literal">False</span>,</span><br><span class="line">           scoring = <span class="string">'r2'</span>,</span><br><span class="line">           cv = <span class="number">0</span>)</span><br><span class="line">x = data.drop([<span class="string">'price'</span>], axis=<span class="number">1</span>)</span><br><span class="line">x = x.fillna(<span class="number">0</span>)</span><br><span class="line">y = data[<span class="string">'price'</span>]</span><br><span class="line">sfs.fit(x, y)</span><br><span class="line">sfs.k_feature_names_</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0079.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 画出来，可以看到边际效益</span></span><br><span class="line"><span class="keyword">from</span> mlxtend.plotting <span class="keyword">import</span> plot_sequential_feature_selection <span class="keyword">as</span> plot_sfs</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig1 = plot_sfs(sfs.get_metric_dict(), kind=<span class="string">'std_dev'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0080.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-TEX-I-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-TEX-I-67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path><path id="MJX-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-TEX-I-78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-TEX-I-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-TEX-I-64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-TEX-I-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-TEX-I-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs></svg>]]></content>
      <categories>
        <category>DataMining</category>
      </categories>
      <tags>
        <tag>DataMining</tag>
        <tag>价格预测</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合redis</title>
    <url>/2020/03/24/SpringBoot%E6%95%B4%E5%90%88redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了SpringBoot中如何整合redis以及如何操作redis</p>
<a id="more"></a>

<h1 id="SpringBoot整合redis"><a href="#SpringBoot整合redis" class="headerlink" title="SpringBoot整合redis"></a>SpringBoot整合redis</h1><hr>
<h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><p>首先我们来到redis文件夹下打开cmd窗口，运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure>

<p>然后再打开另一个cmd窗口，运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli.exe -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>

<p>这样我们就打开redis了，那么我们先创建一个项目。</p>
<h2 id="创建redis项目"><a href="#创建redis项目" class="headerlink" title="创建redis项目"></a>创建redis项目</h2><h3 id="添加redis和spring-security依赖"><a href="#添加redis和spring-security依赖" class="headerlink" title="添加redis和spring security依赖"></a>添加redis和spring security依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在application-properties中配置"><a href="#在application-properties中配置" class="headerlink" title="在application.properties中配置"></a>在application.properties中配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string">11215858</span></span><br></pre></td></tr></table></figure>

<h3 id="创建HelloController"><a href="#创建HelloController" class="headerlink" title="创建HelloController"></a>创建HelloController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/24 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/set"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>{</span><br><span class="line">        ValueOperations&lt;String, String&gt; operations = stringRedisTemplate.opsForValue();</span><br><span class="line">        operations.set(<span class="string">"name"</span>, <span class="string">"william"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>{</span><br><span class="line">        ValueOperations&lt;String, String&gt; operations = stringRedisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operations.get(<span class="string">"name"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>这样我们就可以操作redis了，首先我们访问一下<code>http://localhost:8080/set</code>，我们进入登陆页面，使用spring security的默认用户名和密码登录，这样就在redis中插入数据了。然后我们来查看redis中的数据变化。</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0065.PNG"  alt=""></p>
<p>然后我们再访问一下<code>http://localhost:8080/get</code>，我们就可以在前端页面访问到数据了。</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0066.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Jpa</title>
    <url>/2020/03/23/SpringBoot%E6%95%B4%E5%90%88Jpa/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文主要介绍了SpringBoot如何整合Jpa、Jpa关键字定义查询方法、Jpa自定义查询、Jpa自定义数据源以及Jpa整合多数据源等。</p>
<a id="more"></a>

<h1 id="Jpa"><a href="#Jpa" class="headerlink" title="Jpa"></a>Jpa</h1><h2 id="Jpa是什么"><a href="#Jpa是什么" class="headerlink" title="Jpa是什么"></a>Jpa是什么</h2><ol>
<li>Java Persistence API：用于对象持久化的 API</li>
<li>Java EE 5.0 平台标准的 ORM 规范，使得应用程序以统一的方式访问持久层</li>
</ol>
<h2 id="Jpa与Hibernate的关系"><a href="#Jpa与Hibernate的关系" class="headerlink" title="Jpa与Hibernate的关系"></a>Jpa与Hibernate的关系</h2><ol>
<li>JPA 是 Hibernate 的一个抽象（就像JDBC和JDBC驱动的关系）；</li>
<li>JPA 是规范：JPA 本质上就是一种 ORM 规范，不是ORM 框架，这是因为 JPA 并未提供 ORM 实现，它只是制订了一些规范，提供了一些编程的 API 接口，但具体实现则由 ORM 厂商提供实现；</li>
<li>Hibernate 是实现：Hibernate 除了作为 ORM 框架之外，它也是一种 JPA 实现</li>
<li>从功能上来说， JPA 是 Hibernate 功能的一个子集</li>
</ol>
<h2 id="Jpa的优势"><a href="#Jpa的优势" class="headerlink" title="Jpa的优势"></a>Jpa的优势</h2><ol>
<li>标准化: 提供相同的 API，这保证了基于JPA 开发的企业应用能够经过少量的修改就能够在不同的 JPA 框架下运行。</li>
<li>简单易用，集成方便: JPA 的主要目标之一就是提供更加简单的编程模型，在 JPA 框架下创建实体和创建 Java 类一样简单，只需要使用 javax.persistence.Entity 进行注解；JPA 的框架和接口也都非常简单。</li>
<li>可媲美JDBC的查询能力: JPA的查询语言是面向对象的，JPA定义了独特的JPQL，而且能够支持批量更新和修改、JOIN、GROUP BY、HAVING 等通常只有 SQL 才能够提供的高级查询特性，甚至还能够支持子查询。</li>
<li>支持面向对象的高级特性: JPA 中能够支持面向对象的高级特性，如类之间的继承、多态和类之间的复杂关系，最大限度的使用面向对象的模型</li>
</ol>
<h1 id="SpringBoot整合Jpa"><a href="#SpringBoot整合Jpa" class="headerlink" title="SpringBoot整合Jpa"></a>SpringBoot整合Jpa</h1><h2 id="在application-properties中配置"><a href="#在application-properties中配置" class="headerlink" title="在application.properties中配置"></a>在application.properties中配置</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.bookname</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/javaboy?serverTimezone=UTC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序运行的时候，在控制台中打印SQL语句</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.database-platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment"># 该属性表示项目启动时，若实体类对应的表不存在，则自动创建出来，若存在则更新表的数据</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br></pre></td></tr></table></figure>

<h2 id="创建Book实体类"><a href="#创建Book实体类" class="headerlink" title="创建Book实体类"></a>创建Book实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 21:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//需要添加@Entity注解来告诉Jpa这是一个实体类</span></span><br><span class="line"><span class="comment">//name属性对应数据库里表的名字</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"t_book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="comment">//每一个表都需要一个主键，因此我们需要添加@Id注解来告诉Jpa该属性对应表中的主键</span></span><br><span class="line">    <span class="comment">//同时我们希望该主键自增长，我们可以通过@GeneratedValue注解来实现</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String auther;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", auther='"</span> + auther + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuther</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> auther;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuther</span><span class="params">(String auther)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.auther = auther;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="创建BookDao接口"><a href="#创建BookDao接口" class="headerlink" title="创建BookDao接口"></a>创建BookDao接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jpa.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 21:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//dao接口是用于操作数据的，同时需要继承JpaRepository&lt;T,ID&gt;，其中T是对应的实体类，ID是该实体类的Id属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="在Test中测试"><a href="#在Test中测试" class="headerlink" title="在Test中测试"></a>在Test中测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jpa.bean.Book;</span><br><span class="line"><span class="keyword">import</span> com.example.jpa.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JpaApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">"Three Body"</span>);</span><br><span class="line">        book.setAuther(<span class="string">"Liu"</span>);</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        book.setName(<span class="string">"Ball Lightning"</span>);</span><br><span class="line">        bookDao.saveAndFlush(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">1</span>);</span><br><span class="line">        bookDao.delete(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span> </span>{</span><br><span class="line">        Optional&lt;Book&gt; byId = bookDao.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(byId.get());</span><br><span class="line">        List&lt;Book&gt; all = bookDao.findAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findPageable</span><span class="params">()</span> </span>{</span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        Page&lt;Book&gt; bookPage = bookDao.findAll(pageable);</span><br><span class="line">        System.out.println(<span class="string">"总记录数："</span> + bookPage.getTotalElements());</span><br><span class="line">        System.out.println(<span class="string">"当前页记录数："</span> + bookPage.getNumberOfElements());</span><br><span class="line">        System.out.println(<span class="string">"每页记录数："</span> + bookPage.getSize());</span><br><span class="line">        System.out.println(<span class="string">"总页数："</span> + bookPage.getTotalPages());</span><br><span class="line">        System.out.println(<span class="string">"当前页数："</span> + bookPage.getNumber());</span><br><span class="line">        System.out.println(<span class="string">"查询结果："</span> + bookPage.getContent());</span><br><span class="line">        System.out.println(<span class="string">"是否为首页："</span> + bookPage.isFirst());</span><br><span class="line">        System.out.println(<span class="string">"是否为尾页："</span> + bookPage.isLast());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubbookcontent.com/wellenzheng/gittalk/master/images/0044.PNG"  alt=""></p>
<h1 id="Jpa关键字定义查询方法"><a href="#Jpa关键字定义查询方法" class="headerlink" title="Jpa关键字定义查询方法"></a>Jpa关键字定义查询方法</h1><hr>
<h2 id="方法定义规范"><a href="#方法定义规范" class="headerlink" title="方法定义规范"></a>方法定义规范</h2><ul>
<li>按照 Spring Data 的规范，查询方法以 find | read | get 开头</li>
<li>涉及条件查询时，条件的属性用条件关键字连接，要注意的是：条件属性以首字母大写</li>
<li>支持属性的级联查询。若当前类有符合条件的属性，则优先使用，而不使用级联属性。若需要使用级联属性，则属性之间使用 _ 进行连接。</li>
</ul>
<h2 id="支持的关键字"><a href="#支持的关键字" class="headerlink" title="支持的关键字"></a>支持的关键字</h2><p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0053.png"  alt=""></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="在dao中定义方法"><a href="#在dao中定义方法" class="headerlink" title="在dao中定义方法"></a>在dao中定义方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jpa.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 21:44</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>{</span><br><span class="line">    <span class="function">Book <span class="title">findBookById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findBookByIdGreaterThan</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">findBookByNameContaining</span><span class="params">(String name)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="在Test中测试-1"><a href="#在Test中测试-1" class="headerlink" title="在Test中测试"></a>在Test中测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>{</span><br><span class="line">    System.out.println(bookDao.findBookById(<span class="number">1</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">    System.out.println(bookDao.findBookByIdGreaterThan(<span class="number">3</span>));</span><br><span class="line">    System.out.println(bookDao.findBookByNameContaining(<span class="string">"Three"</span>));</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0055.PNG"  alt=""></p>
<h2 id="查询方法流程解析"><a href="#查询方法流程解析" class="headerlink" title="查询方法流程解析"></a>查询方法流程解析</h2><p>为什么写上方法名，JPA就知道你想干嘛了呢？假如创建如下的查询：<code>findByBookDepUuid()</code>，框架在解析该方法时，首先剔除 findBy，然后对剩下的属性进行解析，假设查询实体为Doc：</p>
<ol>
<li>先判断 bookDepUuid （根据 POJO 规范，首字母变为小写）是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，继续第二步；</li>
<li>从右往左截取第一个大写字母开头的字符串(此处为Uuid)，然后检查剩下的字符串是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，则重复第二步，继续从右往左截取；最后假设 book 为查询实体的一个属性；</li>
<li>接着处理剩下部分（DepUuid），先判断 book 所对应的类型是否有depUuid属性，如果有，则表示该方法最终是根据 “ Doc.book.depUuid” 的取值进行查询；否则继续按照步骤 2 的规则从右往左截取，最终表示根据 “Doc.book.dep.uuid” 的值进行查询。</li>
<li>可能会存在一种特殊情况，比如 Doc包含一个 book 的属性，也有一个 bookDep 属性，此时会存在混淆。可以明确在属性之间加上 “_” 以显式表达意图，比如 <code>findByBook_DepUuid()</code> 或者 <code>findByBookDep_uuid()</code></li>
<li>还有一些特殊的参数：例如分页或排序的参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Page&lt;BookModel&gt; <span class="title">findByName</span><span class="params">(String name, Pageable pageable)</span></span>;  </span><br><span class="line"><span class="function">List&lt;BookModel&gt; <span class="title">findByName</span><span class="params">(String name, Sort sort)</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="Jpa自定义SQL"><a href="#Jpa自定义SQL" class="headerlink" title="Jpa自定义SQL"></a>Jpa自定义SQL</h1><h2 id="Query注解"><a href="#Query注解" class="headerlink" title="@Query注解"></a>@Query注解</h2><p>有的时候，这里提供的查询关键字并不能满足我们的查询需求，这个时候就可以使用 @Query 关键字，来自定义查询 SQL，例如查询Id最大的Book：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from t_book where id = (select max(id) from t_book)"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">Book <span class="title">findMaxIdBook</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>如果查询有参数的话，参数有两种不同的传递方式：</p>
<ol>
<li><strong>利用下标索引传参</strong>：索引值从1开始，查询中 ”?X” 个数需要与方法定义的参数个数相一致，并且顺序也要一致</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"insert into t_book (id, name , author) values (?1,?2,?3)"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addBook2</span><span class="params">(Integer id, String name, String author)</span></span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>命名参数</strong>：这种方式可以定义好参数名，赋值时采用@Param(“参数名”)，而不用管顺序</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Query</span>(value = <span class="string">"insert into t_book(id, name, author) values(:id, :name, :author)"</span>, nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"author"</span>)</span> String author)</span>;</span><br></pre></td></tr></table></figure>

<p>还可以使用原生SQL语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value = <span class="string">"select * from t_book"</span>,nativeQuery = <span class="keyword">true</span>)</span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="Modifying注解"><a href="#Modifying注解" class="headerlink" title="@Modifying注解"></a>@Modifying注解</h2><p>涉及到数据修改操作，可以使用 @Modifying 注解，@Query 与 @Modifying 这两个 annotation一起声明，可定义个性化更新操作，例如涉及某些字段更新时最为常用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"update t_book set age=:age where id&gt;:id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updatebookById</span><span class="params">(@Param(<span class="string">"age"</span>)</span> Long age, @<span class="title">Param</span><span class="params">(<span class="string">"id"</span>)</span> Long id)</span>;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>可以通过自定义的 JPQL 完成 UPDATE 和 DELETE 操作. 注意: JPQL 不支持使用 INSERT</li>
<li>方法的返回值应该是 int，表示更新语句所影响的行数</li>
<li>在调用的地方必须加事务，没有事务不能正常执行</li>
<li>默认情况下, Spring Data 的每个方法上有事务, 但都是一个只读事务. 他们不能完成修改操作</li>
</ol>
<h2 id="SpringData中的事务问题"><a href="#SpringData中的事务问题" class="headerlink" title="SpringData中的事务问题"></a>SpringData中的事务问题</h2><ol>
<li>Spring Data 提供了默认的事务处理方式，即所有的查询均声明为只读事务。</li>
<li>对于自定义的方法，如需改变 Spring Data 提供的事务默认方式，可以在方法上添加 @Transactional 注解。</li>
<li>进行多个 Repository 操作时，也应该使它们在同一个事务中处理，按照分层架构的思想，这部分属于业务逻辑层，因此，需要在Service 层实现对多个 Repository 的调用，并在相应的方法上声明事务。</li>
</ol>
<h1 id="Jpa多数据源"><a href="#Jpa多数据源" class="headerlink" title="Jpa多数据源"></a>Jpa多数据源</h1><hr>
<h2 id="在application-properties中配置-1"><a href="#在application-properties中配置-1" class="headerlink" title="在application.properties中配置"></a>在application.properties中配置</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.one.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.one.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.one.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.datasource.one.url</span>=<span class="string">jdbc:mysql://localhost:3306/javaboy?serverTimezone=UTC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.two.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.two.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.two.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.datasource.two.url</span>=<span class="string">jdbc:mysql://localhost:3306/javaboy2?serverTimezone=UTC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.jpa.properties.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.jpa.properties.database</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.properties.database-platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.dialect</span>=<span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br></pre></td></tr></table></figure>

<h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/24 15:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span> <span class="comment">//该注解表示如果数据源冲突了，优先选择该数据源</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.one"</span>)</span><br><span class="line">    <span class="function">DataSource <span class="title">dataSourceOne</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.two"</span>)</span><br><span class="line">    <span class="function">DataSource <span class="title">dataSourceTwo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="配置Jpa"><a href="#配置Jpa" class="headerlink" title="配置Jpa"></a>配置Jpa</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/24 15:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.jpa2.dao1"</span>,entityManagerFactoryRef =</span><br><span class="line">        <span class="string">"localContainerEntityManagerFactoryBeanOne"</span>,transactionManagerRef =</span><br><span class="line">        <span class="string">"platformTransactionManagerOne"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigOne</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"dataSourceOne"</span>)</span><br><span class="line">    DataSource dataSourceOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function">LocalContainerEntityManagerFactoryBean <span class="title">localContainerEntityManagerFactoryBeanOne</span><span class="params">(EntityManagerFactoryBuilder builder)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(dataSourceOne)</span><br><span class="line">                .properties(jpaProperties.getProperties())</span><br><span class="line">                .persistenceUnit(<span class="string">"pu1"</span>)</span><br><span class="line">                .packages(<span class="string">"com.example.jpa2"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PlatformTransactionManager <span class="title">platformTransactionManagerOne</span><span class="params">(EntityManagerFactoryBuilder builder)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(localContainerEntityManagerFactoryBeanOne(builder).getObject());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.orm.jpa.JpaProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.orm.jpa.EntityManagerFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/24 15:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.example.jpa2.dao2"</span>,entityManagerFactoryRef =</span><br><span class="line">        <span class="string">"localContainerEntityManagerFactoryBeanTwo"</span>,transactionManagerRef =</span><br><span class="line">        <span class="string">"platformTransactionManagerTwo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaConfigTwo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"dataSourceTwo"</span>)</span><br><span class="line">    DataSource dataSourceTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JpaProperties jpaProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">LocalContainerEntityManagerFactoryBean <span class="title">localContainerEntityManagerFactoryBeanTwo</span><span class="params">(EntityManagerFactoryBuilder builder)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> builder.dataSource(dataSourceTwo)</span><br><span class="line">                .properties(jpaProperties.getProperties())</span><br><span class="line">                .persistenceUnit(<span class="string">"pu2"</span>)</span><br><span class="line">                .packages(<span class="string">"com.example.jpa2"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PlatformTransactionManager <span class="title">platformTransactionManagerTwo</span><span class="params">(EntityManagerFactoryBuilder builder)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(localContainerEntityManagerFactoryBeanTwo(builder).getObject());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa2.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 21:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"t_book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String auther;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", auther='"</span> + auther + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuther</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> auther;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuther</span><span class="params">(String auther)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.auther = auther;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa2.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.annotations.GeneratorType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/24 16:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="创建dao接口"><a href="#创建dao接口" class="headerlink" title="创建dao接口"></a>创建dao接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa2.dao1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jpa2.bean.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/24 16:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa2.dao2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jpa2.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/24 16:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h2 id="在Test中测试-2"><a href="#在Test中测试-2" class="headerlink" title="在Test中测试"></a>在Test中测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jpa2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jpa2.dao1.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.example.jpa2.dao2.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jpa2ApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(bookDao.findAll());</span><br><span class="line">        System.out.println(userDao.findAll());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="C:/Users/11792/AppData/Roaming/Typora/typora-user-images/image-20200324162535777.png"  alt="image-20200324162535777"></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <url>/2020/03/23/SpringBoot%E6%95%B4%E5%90%88Mybatis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了如何在SpringBoot中整合Mybatis</p>
<a id="more"></a>

<h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h1><hr>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在application-properties中进行配置"><a href="#在application-properties中进行配置" class="headerlink" title="在application.properties中进行配置"></a>在application.properties中进行配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/javaboy?serverTimezone=UTC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis.mapper-locations=classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<h3 id="创建User实体类"><a href="#创建User实体类" class="headerlink" title="创建User实体类"></a>创建User实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 18:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="创建UserMapper接口"><a href="#创建UserMapper接口" class="headerlink" title="创建UserMapper接口"></a>创建UserMapper接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 18:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Mapper</span></span><br><span class="line"><span class="comment">//MyBatis既支持通过注解来配置Mapper，也支持通过XML文件来配置</span></span><br><span class="line"><span class="comment">//若通过注解来配置Mapper，只需添加@Mapper即可</span></span><br><span class="line"><span class="comment">//对于SQL语句，有@Insert, @Select, @Update, @Delete等注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAllUser</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="创建UserMapper-xml配置文件"><a href="#创建UserMapper-xml配置文件" class="headerlink" title="创建UserMapper.xml配置文件"></a>创建UserMapper.xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllUser"</span> <span class="attr">resultType</span>=<span class="string">"com.example.mybatis.bean.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么创建了XML文件后，如何告诉SpringBoot该配置文件在哪里呢？可以在主类中添加<strong>@MapperScan</strong>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.mybatis.mapper"</span>) <span class="comment">//该注解配置的是java目录下的，而不是resource目录</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(MybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="在Test中测试"><a href="#在Test中测试" class="headerlink" title="在Test中测试"></a>在Test中测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.example.mybatis.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectAllUser();</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h1 id="MyBatis多数据源"><a href="#MyBatis多数据源" class="headerlink" title="MyBatis多数据源"></a>MyBatis多数据源</h1><hr>
<h3 id="在application-properties中进行配置-1"><a href="#在application-properties中进行配置-1" class="headerlink" title="在application.properties中进行配置"></a>在application.properties中进行配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.one.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.one.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.one.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.datasource.one.url</span>=<span class="string">jdbc:mysql://localhost:3306/javaboy?serverTimezone=UTC</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.datasource.two.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.two.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.two.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.datasource.two.url</span>=<span class="string">jdbc:mysql://localhost:3306/javaboy2?serverTimezone=UTC</span></span><br></pre></td></tr></table></figure>

<h3 id="创建DataSource配置类"><a href="#创建DataSource配置类" class="headerlink" title="创建DataSource配置类"></a>创建DataSource配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 19:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.one"</span>)</span><br><span class="line">    <span class="function">DataSource <span class="title">dataSourceOne</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.two"</span>)</span><br><span class="line">    <span class="function">DataSource <span class="title">dataSourceTwo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="创建MyBatis配置类"><a href="#创建MyBatis配置类" class="headerlink" title="创建MyBatis配置类"></a>创建MyBatis配置类</h3><p>两个数据源需要分别创建一个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 19:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.mybatis2.mapperOne"</span>, sqlSessionFactoryRef =</span><br><span class="line">        <span class="string">"sqlSessionFactoryOne"</span>, sqlSessionTemplateRef = <span class="string">"sqlSessionTemplateOne"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfigOne</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"dataSourceOne"</span>)</span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionFactory <span class="title">sqlSessionFactoryOne</span><span class="params">()</span></span>{</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            bean.setDataSource(dataSource);</span><br><span class="line">            <span class="keyword">return</span> bean.getObject();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionTemplate <span class="title">sqlSessionTemplateOne</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactoryOne());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 19:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.example.mybatis2.mapperTwo"</span>, sqlSessionFactoryRef =</span><br><span class="line">        <span class="string">"sqlSessionFactoryTwo"</span>, sqlSessionTemplateRef = <span class="string">"sqlSessionTemplateTwo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfigTwo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"dataSourceTwo"</span>)</span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionFactory <span class="title">sqlSessionFactoryTwo</span><span class="params">()</span></span>{</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            bean.setDataSource(dataSource);</span><br><span class="line">            <span class="keyword">return</span> bean.getObject();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">SqlSessionTemplate <span class="title">sqlSessionTemplateTwo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactoryTwo());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="创建Mapper接口以及XML配置文件"><a href="#创建Mapper接口以及XML配置文件" class="headerlink" title="创建Mapper接口以及XML配置文件"></a>创建Mapper接口以及XML配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis2.mapperOne;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis2.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 20:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapperOne</span> </span>{</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.mybatis2.mapperOne.UserMapperOne"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"com.example.mybatis2.bean.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis2.mapperTwo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis2.bean.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 20:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapperTwo</span> </span>{</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.mybatis2.mapperTwo.UserMapperTwo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"com.example.mybatis2.bean.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="在Test中进行测试"><a href="#在Test中进行测试" class="headerlink" title="在Test中进行测试"></a>在Test中进行测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis2.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.example.mybatis2.mapperOne.UserMapperOne;</span><br><span class="line"><span class="keyword">import</span> com.example.mybatis2.mapperTwo.UserMapperTwo;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mybatis2ApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapperOne userMapperOne;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapperTwo userMapperTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;User&gt; users1 = userMapperOne.selectAll();</span><br><span class="line">        System.out.println(users1);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users2 = userMapperTwo.selectAll();</span><br><span class="line">        System.out.println(users2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合JdbcTemplate</title>
    <url>/2020/03/23/SpringBoot%E6%95%B4%E5%90%88JdbcTemplate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了如何在SpringBoot中使用JdbcTemplate以及JdbcTemplate添加多数据源。</p>
<a id="more"></a>

<h1 id="整合JdbcTemplate"><a href="#整合JdbcTemplate" class="headerlink" title="整合JdbcTemplate"></a>整合JdbcTemplate</h1><hr>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-properties配置文件中进行配置"><a href="#application-properties配置文件中进行配置" class="headerlink" title="application.properties配置文件中进行配置"></a>application.properties配置文件中进行配置</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">11215858</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/javaboy?serverTimezone=Asia/Shanghai</span></span><br></pre></td></tr></table></figure>

<h3 id="创建实体类User"><a href="#创建实体类User" class="headerlink" title="创建实体类User"></a>创建实体类User</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbctemplate.bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 14:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User{"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="创建UserService，并注入JdbcTemplate"><a href="#创建UserService，并注入JdbcTemplate" class="headerlink" title="创建UserService，并注入JdbcTemplate"></a>创建UserService，并注入JdbcTemplate</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbctemplate.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jdbctemplate.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 15:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">addUser</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        String sql = <span class="string">"insert into user (name, address) value (?,?)"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, user.getName(), user.getAddress());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">updateUserById</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        String sql = <span class="string">"update user set name = ?, address = ? where id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, user.getName(), user.getAddress(), user.getId());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">deleteUserById</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        String sql = <span class="string">"delete from user where id = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, user.getId());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>{</span><br><span class="line">        String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> RowMapper&lt;User&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">                User user = <span class="keyword">new</span> User();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">                String address = rs.getString(<span class="string">"address"</span>);</span><br><span class="line">                user.setId(id);</span><br><span class="line">                user.setName(name);</span><br><span class="line">                user.setAddress(address);</span><br><span class="line">                <span class="keyword">return</span> user;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当数据库表的列名和实体类的属性名相同时，可以直接使用这种方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAllUser</span><span class="params">()</span> </span>{</span><br><span class="line">        String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="在Test中进行测试"><a href="#在Test中进行测试" class="headerlink" title="在Test中进行测试"></a>在Test中进行测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbctemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jdbctemplate.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.example.jdbctemplate.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JdbctemplateApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"ZWJ"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"wellenzheng.github.io"</span>);</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span></span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setName(<span class="string">"hahaha"</span>);</span><br><span class="line">        user.setAddress(<span class="string">"home"</span>);</span><br><span class="line">        userService.updateUserById(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span></span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        userService.deleteUserById(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectAllUser</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;User&gt; userList = userService.selectAllUser();</span><br><span class="line">        <span class="keyword">for</span>(User user:userList)</span><br><span class="line">            System.out.println(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h1 id="JdbcTemplate多数据源"><a href="#JdbcTemplate多数据源" class="headerlink" title="JdbcTemplate多数据源"></a>JdbcTemplate多数据源</h1><hr>
<h3 id="application-properties配置文件中进行配置-1"><a href="#application-properties配置文件中进行配置-1" class="headerlink" title="application.properties配置文件中进行配置"></a>application.properties配置文件中进行配置</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">spring.datasource.one.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.one.username=root</span><br><span class="line">spring.datasource.one.password=<span class="number">11215858</span></span><br><span class="line">spring.datasource.one.url=jdbc:mysql:<span class="comment">//localhost:3306/javaboy?serverTimezone=Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line">spring.datasource.two.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">spring.datasource.two.username=root</span><br><span class="line">spring.datasource.two.password=<span class="number">11215858</span></span><br><span class="line">spring.datasource.two.url=jdbc:mysql:<span class="comment">//localhost:3306/javaboy2?serverTimezone=Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"># 在我们加了.one和.two之后，自动话配置就失效了，因此需要我们需要手动去配置</span><br></pre></td></tr></table></figure>

<h3 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbctemplate2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 17:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.one"</span>)</span><br><span class="line">    <span class="function">DataSource <span class="title">dataSourceOne</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.two"</span>)</span><br><span class="line">    <span class="function">DataSource <span class="title">dataSourceTwo</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbctemplate2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/18 17:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JdbcTemplate <span class="title">jdbcTemplateOne</span><span class="params">(@Qualifier(<span class="string">"dataSourceOne"</span>)</span> DataSource one) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(one);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">JdbcTemplate <span class="title">jdbcTemplateTwo</span><span class="params">(@Qualifier(<span class="string">"dataSourceTwo"</span>)</span> DataSource two) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(two);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h3 id="在Test中进行测试-1"><a href="#在Test中进行测试-1" class="headerlink" title="在Test中进行测试"></a>在Test中进行测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbctemplate2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jdbctemplate2.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jdbctemplate2ApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"jdbcTemplateOne"</span>)</span><br><span class="line">    JdbcTemplate jdbcTemplateOne;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两种方式</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"jdbcTemplateTwo"</span>)</span><br><span class="line">    JdbcTemplate jdbcTemplateTwo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">        List&lt;User&gt; userList1 = jdbcTemplateOne.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(userList1);</span><br><span class="line">        List&lt;User&gt; userList2 = jdbcTemplateTwo.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        System.out.println(userList2);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中实现系统启动任务</title>
    <url>/2020/03/23/SpringBoot%E4%B8%AD%E5%AE%9E%E7%8E%B0%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了如何通过CommanLineRunner和ApplicationRunner来实现系统启动任务。</p>
<a id="more"></a>

<h1 id="CommanLineRunner"><a href="#CommanLineRunner" class="headerlink" title="CommanLineRunner"></a>CommanLineRunner</h1><hr>
<p>我们来创建自定义的MyCommanLineRunner类，并实现<strong>CommanLineRunner</strong>接口即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commandlinerunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 11:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">99</span>) <span class="comment">//如果有多个CommanLineRunner，则需要指定优先级，数字越小优先级越高</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//run方法里面的args参数就是SpringBoot主类中main方法传递的args</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.toString() + Arrays.toString(args));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commandlinerunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 11:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner2</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.toString() + Arrays.toString(args));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>我们在Terminal中运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>

<p>将项目打包成jar包，然后运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar commandlinerunner-0.0.1-SNAPSHOT.jar ThreeBody BallLightning ChineseSun</span><br></pre></td></tr></table></figure>

<p>通过命令行的方式传递args参数，在控制台我们可以看到以下信息，即系统启动的时候会自动运行两个CommanLineRunner类的run方法。</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0050.PNG"  alt=""></p>
<h1 id="ApplicatinoRunner"><a href="#ApplicatinoRunner" class="headerlink" title="ApplicatinoRunner"></a>ApplicatinoRunner</h1><hr>
<p>我们再通过ApplicationRunner来实现系统启动，与上面一样创建自定义类，并实现<strong>ApplicationRunner</strong>接口即可。我们同样也可以通过<strong>@Order</strong>来设置其优先级。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commandlinerunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 11:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">99</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner1</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//获取启动的所有参数</span></span><br><span class="line">        String[] sourceArgs = args.getSourceArgs();</span><br><span class="line">        System.out.println(<span class="string">"sourceArgs: "</span> + Arrays.toString(sourceArgs));</span><br><span class="line">        List&lt;String&gt; noOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        System.out.println(<span class="string">"nonOptionArgs: "</span> + noOptionArgs);</span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name : optionNames) {</span><br><span class="line">            System.out.println(name + <span class="string">": "</span> + args.getOptionValues(name));</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"End: "</span> + <span class="keyword">this</span>.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commandlinerunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 11:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner2</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//获取启动的所有参数</span></span><br><span class="line">        String[] sourceArgs = args.getSourceArgs();</span><br><span class="line">        System.out.println(<span class="string">"sourceArgs: "</span> + Arrays.toString(sourceArgs));</span><br><span class="line">        <span class="comment">//ApplicationRunner可以获取两种不同的参数，一种是noOptionArgs，一种是OptionArgs</span></span><br><span class="line">        List&lt;String&gt; noOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        System.out.println(<span class="string">"nonOptionArgs: "</span> + noOptionArgs);</span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        System.out.println(<span class="string">"--------------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name : optionNames) {</span><br><span class="line">            System.out.println(name + <span class="string">": "</span> + args.getOptionValues(name));</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"End: "</span> + <span class="keyword">this</span>.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>同时CommanLineRunner与ApplicationRunner不冲突，两者可以共存，ApplicationRunner优先级高于CommanLineRunner。我们来运行验证一下，同样先打包成jar包，然后在Terminal运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar commandlinerunner-0.0.1-SNAPSHOT.jar ThreeBody BallLightning ChineseSun</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0051.PNG"  alt=""></p>
<p>我们再来看看若设置参数名称会怎么样，在Terminal运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar commandlinerunner-0.0.1-SNAPSHOT.jar --name=ThreeBody --name=BallLightning --name=ChineseSun --author=LiuCiXin Spring SpringBoot SpringMVC</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0052.PNG"  alt=""></p>
<p>我们可以看到，ApplicationRunner可以识别OptionArgs，但CommanLineRunner不能识别，而将其全部视为noOptionArgs</p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot加载XML配置以及注册拦截器</title>
    <url>/2020/03/23/SpringBoot%E5%8A%A0%E8%BD%BDXML%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E6%B3%A8%E5%86%8C%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文主要介绍了在SpringBoot中如何加载XML配置文件，以及如何注册拦截器。</p>
<a id="more"></a>

<h1 id="加载XML配置"><a href="#加载XML配置" class="headerlink" title="加载XML配置"></a>加载XML配置</h1><hr>
<p>其实在SpringBoot中加载XML配置有点鸡肋，因为SpringBoot一般是不用XML配置的，但是在这里我们还是说明一下吧。首先我们创建一个SayHello类，但是不为其添加注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 10:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHello</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>然后创建一个XML配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.example.xml.SayHello"</span> <span class="attr">id</span>=<span class="string">"sayHello"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后再创建一个配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 10:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource</span>(locations = <span class="string">"classpath:beans.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>那么至此XML配置就已经加载完成了，我们再通过单元测试来看看是否成功加载了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SayHello sayHello;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(sayHello.sayHello());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0048.PNG"  alt=""></p>
<h1 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h1><hr>
<p>首先创建一个自定义拦截器类，然后实现<strong>HandlerInterceptor</strong>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 10:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"preHandle"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"postHandle"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>再创建一个配置类来注册自定义的拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 10:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{</span><br><span class="line">        registry.addInterceptor(myInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MyInterceptor <span class="title">myInterceptor</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyInterceptor();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>最后呢创建一个HelloController来进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 10:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>即可看到拦截器的方法被调用了</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0049.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>二手车交易价格预测-数据分析</title>
    <url>/2020/03/23/%E4%BA%8C%E6%89%8B%E8%BD%A6%E4%BA%A4%E6%98%93%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：此部分为零基础入门数据挖掘的 Task2 EDA-数据探索性分析 部分，带你来了解数据，熟悉数据，和数据做朋友。</p>
<a id="more"></a>

<h1 id="EDA目标"><a href="#EDA目标" class="headerlink" title="EDA目标"></a>EDA目标</h1><hr>
<ul>
<li>EDA的价值主要在于熟悉数据集，了解数据集，对数据集进行验证来确定所获得数据集可以用于接下来的机器学习或者深度学习使用。</li>
<li>当了解了数据集之后我们下一步就是要去了解变量间的相互关系以及变量与预测值之间的存在关系。</li>
<li>引导数据科学从业者进行数据处理以及特征工程的步骤,使数据集的结构和特征集让接下来的预测问题更加可靠。</li>
<li>完成对于数据的探索性分析，并对于数据进行一些图表或者文字总结并打卡。</li>
</ul>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><hr>
<h2 id="载入各种数据科学以及可视化库"><a href="#载入各种数据科学以及可视化库" class="headerlink" title="载入各种数据科学以及可视化库"></a>载入各种数据科学以及可视化库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 导入warnings包，利用过滤器来实现忽略警告语句。</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> msno</span><br></pre></td></tr></table></figure>

<h2 id="载入数据"><a href="#载入数据" class="headerlink" title="载入数据"></a>载入数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 载入训练集和测试集；</span></span><br><span class="line">Train_data = pd.read_csv(<span class="string">'train.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">Test_data = pd.read_csv(<span class="string">'testA.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">print(Train_data.shape)</span><br><span class="line">print(Test_data.shape)</span><br></pre></td></tr></table></figure>

<h2 id="简略观察数据"><a href="#简略观察数据" class="headerlink" title="简略观察数据"></a>简略观察数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简略观察数据(head()+tail())</span></span><br><span class="line">Train_data.head().append(Train_data.tail())</span><br></pre></td></tr></table></figure>

<h2 id="总览数据概况"><a href="#总览数据概况" class="headerlink" title="总览数据概况"></a>总览数据概况</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Train_data.describe()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Train_data.info()</span><br></pre></td></tr></table></figure>

<h2 id="缺失值可视化"><a href="#缺失值可视化" class="headerlink" title="缺失值可视化"></a>缺失值可视化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nan可视化</span></span><br><span class="line">missing = Train_data.isnull().sum()</span><br><span class="line">missing = missing[missing &gt; <span class="number">0</span>]</span><br><span class="line">missing.sort_values(inplace=<span class="literal">True</span>)</span><br><span class="line">missing.plot.bar()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0024.PNG"  alt=""></p>
<p>通过以上两句可以很直观的了解哪些列存在 “nan”, 并可以把nan的个数打印，主要的目的在于 nan存在的个数是否真的很大，如果很小一般选择填充，如果使用lgb等树模型可以直接空缺，让树自己去优化，但如果nan存在的过多、可以考虑删掉。</p>
<h2 id="可视化查看缺省值"><a href="#可视化查看缺省值" class="headerlink" title="可视化查看缺省值"></a>可视化查看缺省值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可视化看下缺省值</span></span><br><span class="line">msno.matrix(Train_data.sample(<span class="number">250</span>))</span><br><span class="line">msno.matrix(Train_data.sample(<span class="number">250</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0026.PNG"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0027.PNG"  alt=""></p>
<p>测试集的缺省和训练集的差不多情况, 可视化有四列有缺省，notRepairedDamage缺省得最多。</p>
<h2 id="查看一些离散特征值的分布情况"><a href="#查看一些离散特征值的分布情况" class="headerlink" title="查看一些离散特征值的分布情况"></a>查看一些离散特征值的分布情况</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对一些离散值进行查看</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">1</span>, <span class="number">3</span>, figsize=(<span class="number">16</span>, <span class="number">4</span>))</span><br><span class="line">sns.countplot(x=Train_data[<span class="string">'notRepairedDamage'</span>],ax=axs[<span class="number">0</span>])</span><br><span class="line">sns.countplot(x=Train_data[<span class="string">'seller'</span>],ax=axs[<span class="number">1</span>])</span><br><span class="line">sns.countplot(x=Train_data[<span class="string">'offerType'</span>],ax=axs[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0028.PNG"  alt=""></p>
<p>可以看出来在<strong>notRepairedDamage</strong>中‘ - ’也为空缺值，因为很多模型对nan有直接的处理，这里我们先不做处理，先替换成nan</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Train_data[<span class="string">'notRepairedDamage'</span>].replace(<span class="string">'-'</span>, np.nan, inplace=<span class="literal">True</span>)</span><br><span class="line">Test_data[<span class="string">'notRepairedDamage'</span>].replace(<span class="string">'-'</span>, np.nan, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>然后我们还能看到<strong>seller</strong>和<strong>offerType</strong>这两个特征严重倾斜，对预测没有什么帮助，因此我们先删掉。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> Train_data[<span class="string">"seller"</span>]</span><br><span class="line"><span class="keyword">del</span> Train_data[<span class="string">"offerType"</span>]</span><br><span class="line"><span class="keyword">del</span> Test_data[<span class="string">"seller"</span>]</span><br><span class="line"><span class="keyword">del</span> Test_data[<span class="string">"offerType"</span>]</span><br></pre></td></tr></table></figure>

<h2 id="了解预测值的分布"><a href="#了解预测值的分布" class="headerlink" title="了解预测值的分布"></a>了解预测值的分布</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 总体分布概况（无界约翰逊分布等）</span></span><br><span class="line"><span class="comment"># 价格不服从正态分布，所以在进行回归之前，它必须进行转换。虽然对数变换做得很好，但最佳拟合是无界约翰逊分布</span></span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st</span><br><span class="line">y = Train_data[<span class="string">'price'</span>]</span><br><span class="line">plt.figure(<span class="number">1</span>); plt.title(<span class="string">'Johnson SU'</span>)</span><br><span class="line">sns.distplot(y, kde=<span class="literal">False</span>, fit=st.johnsonsu)</span><br><span class="line">plt.figure(<span class="number">2</span>); plt.title(<span class="string">'Normal'</span>)</span><br><span class="line">sns.distplot(y, kde=<span class="literal">False</span>, fit=st.norm)</span><br><span class="line">plt.figure(<span class="number">3</span>); plt.title(<span class="string">'Log Normal'</span>)</span><br><span class="line">sns.distplot(y, kde=<span class="literal">False</span>, fit=st.lognorm)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0035.PNG"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0030.PNG"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0031.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看skewness and kurtosis</span></span><br><span class="line">sns.distplot(Train_data[<span class="string">'price'</span>]);</span><br><span class="line">print(<span class="string">"Skewness: %f"</span> % Train_data[<span class="string">'price'</span>].skew())</span><br><span class="line">print(<span class="string">"Kurtosis: %f"</span> % Train_data[<span class="string">'price'</span>].kurt())</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0034.PNG"  alt=""></p>
<h2 id="查看训练集的偏度和峰度"><a href="#查看训练集的偏度和峰度" class="headerlink" title="查看训练集的偏度和峰度"></a>查看训练集的偏度和峰度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.distplot(Train_data.skew(),color=<span class="string">'blue'</span>,axlabel =<span class="string">'Skewness'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0032.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.distplot(Train_data.kurt(),color=<span class="string">'orange'</span>,axlabel =<span class="string">'Kurtness'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0033.PNG"  alt=""></p>
<h2 id="查看预测值的具体频数"><a href="#查看预测值的具体频数" class="headerlink" title="查看预测值的具体频数"></a>查看预测值的具体频数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看预测值的具体频数</span></span><br><span class="line">plt.hist(Train_data[<span class="string">'price'</span>], orientation = <span class="string">'vertical'</span>,histtype = <span class="string">'bar'</span>, color =<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0036.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># log变换 z之后的分布较均匀，可以进行log变换进行预测，这也是预测问题常用的trick</span></span><br><span class="line">plt.hist(np.log(Train_data[<span class="string">'price'</span>]), orientation = <span class="string">'vertical'</span>,histtype = <span class="string">'bar'</span>, color =<span class="string">'red'</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0037.PNG"  alt=""></p>
<h2 id="特征分为类别特征和数字特征，并对类别特征查看unique分布"><a href="#特征分为类别特征和数字特征，并对类别特征查看unique分布" class="headerlink" title="特征分为类别特征和数字特征，并对类别特征查看unique分布"></a>特征分为类别特征和数字特征，并对类别特征查看unique分布</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分离label即预测值</span></span><br><span class="line">Y_train = Train_data[<span class="string">'price'</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numeric_features = [<span class="string">'power'</span>, <span class="string">'kilometer'</span>, <span class="string">'v_0'</span>, <span class="string">'v_1'</span>, <span class="string">'v_2'</span>, <span class="string">'v_3'</span>, <span class="string">'v_4'</span>, <span class="string">'v_5'</span>, <span class="string">'v_6'</span>, <span class="string">'v_7'</span>, <span class="string">'v_8'</span>, <span class="string">'v_9'</span>, <span class="string">'v_10'</span>, <span class="string">'v_11'</span>, <span class="string">'v_12'</span>, <span class="string">'v_13'</span>,<span class="string">'v_14'</span> ]</span><br><span class="line"></span><br><span class="line">categorical_features = [<span class="string">'name'</span>, <span class="string">'model'</span>, <span class="string">'brand'</span>, <span class="string">'bodyType'</span>, <span class="string">'fuelType'</span>, <span class="string">'gearbox'</span>, <span class="string">'notRepairedDamage'</span>, <span class="string">'regionCode'</span>,]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 特征nunique分布</span></span><br><span class="line">Train_cate = Train_data[categorical_features]</span><br><span class="line">Train_cate.nunique()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0038.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 特征nunique分布</span></span><br><span class="line">Test_cate = Test_data[categorical_features]</span><br><span class="line">Test_cate.nunique()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0039.PNG"  alt=""></p>
<h2 id="数字特征分析"><a href="#数字特征分析" class="headerlink" title="数字特征分析"></a>数字特征分析</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numeric_features.append(<span class="string">'price'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="相关性分析"><a href="#相关性分析" class="headerlink" title="相关性分析"></a>相关性分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相关性分析</span></span><br><span class="line">price_numeric = Train_data[numeric_features]</span><br><span class="line">correlation = price_numeric.corr()</span><br><span class="line">correlation[<span class="string">'price'</span>].sort_values(ascending = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0040.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f , ax = plt.subplots(figsize = (<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Correlation of Numeric Features with Price'</span>,y=<span class="number">1</span>,size=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">sns.heatmap(correlation,square = <span class="literal">True</span>,  vmax=<span class="number">0.8</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0041.PNG"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> price_numeric[<span class="string">'price'</span>]</span><br></pre></td></tr></table></figure>
<h3 id="查看几个特征的偏度和峰值"><a href="#查看几个特征的偏度和峰值" class="headerlink" title="查看几个特征的偏度和峰值"></a>查看几个特征的偏度和峰值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看几个特征得 偏度和峰值</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> numeric_features:</span><br><span class="line">    print(<span class="string">'{:15}'</span>.format(col), </span><br><span class="line">          <span class="string">'Skewness: {:05.2f}'</span>.format(Train_data[col].skew()) , </span><br><span class="line">          <span class="string">'   '</span> ,</span><br><span class="line">          <span class="string">'Kurtosis: {:06.2f}'</span>.format(Train_data[col].kurt())  </span><br><span class="line">         )</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0042.PNG"  alt=""></p>
<h3 id="每个数字特征得分布可视化"><a href="#每个数字特征得分布可视化" class="headerlink" title="每个数字特征得分布可视化"></a>每个数字特征得分布可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个数字特征得分布可视化，可以看出匿名特征相对分布均匀</span></span><br><span class="line">f = pd.melt(Train_data, value_vars=numeric_features)</span><br><span class="line">g = sns.FacetGrid(f, col=<span class="string">"variable"</span>,  col_wrap=<span class="number">6</span>, sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>)</span><br><span class="line">g = g.map(sns.distplot, <span class="string">"value"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0043.PNG"  alt=""></p>
<h3 id="数字特征相互之间的关系可视化"><a href="#数字特征相互之间的关系可视化" class="headerlink" title="数字特征相互之间的关系可视化"></a>数字特征相互之间的关系可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数字特征相互之间的关系可视化</span></span><br><span class="line">sns.set()</span><br><span class="line">columns = [<span class="string">'price'</span>, <span class="string">'v_12'</span>, <span class="string">'v_8'</span> , <span class="string">'v_0'</span>, <span class="string">'power'</span>, <span class="string">'v_5'</span>,  <span class="string">'v_2'</span>, <span class="string">'v_6'</span>, <span class="string">'v_1'</span>, <span class="string">'v_14'</span>]</span><br><span class="line">sns.pairplot(Train_data[columns],size = <span class="number">2</span> ,kind =<span class="string">'scatter'</span>,diag_kind=<span class="string">'kde'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0064.PNG"  alt=""></p>
<h3 id="多变量互相回归关系可视化"><a href="#多变量互相回归关系可视化" class="headerlink" title="多变量互相回归关系可视化"></a>多变量互相回归关系可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多变量互相回归关系可视化</span></span><br><span class="line">fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6), (ax7, ax8), (ax9, ax10)) = plt.subplots(nrows=<span class="number">5</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">24</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># ['v_12', 'v_8' , 'v_0', 'power', 'v_5',  'v_2', 'v_6', 'v_1', 'v_14']</span></span><br><span class="line">v_12_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_12'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_12'</span>,y = <span class="string">'price'</span>, data = v_12_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax1)</span><br><span class="line"></span><br><span class="line">v_8_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_8'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_8'</span>,y = <span class="string">'price'</span>,data = v_8_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax2)</span><br><span class="line"></span><br><span class="line">v_0_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_0'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_0'</span>,y = <span class="string">'price'</span>,data = v_0_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax3)</span><br><span class="line"></span><br><span class="line">power_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'power'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'power'</span>,y = <span class="string">'price'</span>,data = power_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax4)</span><br><span class="line"></span><br><span class="line">v_5_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_5'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_5'</span>,y = <span class="string">'price'</span>,data = v_5_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax5)</span><br><span class="line"></span><br><span class="line">v_2_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_2'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_2'</span>,y = <span class="string">'price'</span>,data = v_2_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax6)</span><br><span class="line"></span><br><span class="line">v_6_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_6'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_6'</span>,y = <span class="string">'price'</span>,data = v_6_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax7)</span><br><span class="line"></span><br><span class="line">v_1_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_1'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_1'</span>,y = <span class="string">'price'</span>,data = v_1_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax8)</span><br><span class="line"></span><br><span class="line">v_14_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_14'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_14'</span>,y = <span class="string">'price'</span>,data = v_14_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax9)</span><br><span class="line"></span><br><span class="line">v_13_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_13'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_13'</span>,y = <span class="string">'price'</span>,data = v_13_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax10)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0058.PNG"  alt=""></p>
<h2 id="类别特征分析"><a href="#类别特征分析" class="headerlink" title="类别特征分析"></a>类别特征分析</h2><h3 id="相关性分析-1"><a href="#相关性分析-1" class="headerlink" title="相关性分析"></a>相关性分析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相关性分析</span></span><br><span class="line">categorical_features.append(<span class="string">'price'</span>)</span><br><span class="line">price_cate = Train_data[categorical_features]</span><br><span class="line">cate_correlation = price_cate.corr()</span><br><span class="line">cate_correlation[<span class="string">'price'</span>].sort_values(ascending = <span class="literal">False</span>)</span><br><span class="line">categorical_features.pop()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0057.PNG"  alt=""></p>
<h3 id="类别特征箱形图可视化"><a href="#类别特征箱形图可视化" class="headerlink" title="类别特征箱形图可视化"></a>类别特征箱形图可视化</h3><p>箱形图（Box-plot）又称为盒须图、盒式图或箱线图，是一种用作显示一组数据分散情况资料的统计图。因形状如箱子而得名。在各种领域也经常被使用，常见于品质管理。它主要用于反映原始数据分布的特征，还可以进行多组数据分布特征的比 较。箱线图的绘制方法是：先找出一组数据的上边缘、下边缘、中位数和两个四分位数；然后， 连接两个四分位数画出箱体；再将上边缘和下边缘与箱体相连接，中位数在箱体中间。</p>
<p>箱形图可以用来观察数据整体的分布情况，利用中位数，25/%分位数，75/%分位数，上边界，下边界等统计量来来描述数据的整体分布情况。通过计算这些统计量，生成一个箱体图，箱体包含了大部分的正常数据，而在箱体上边界和下边界之外的，就是异常数据。</p>
<p>其中上下边界的计算公式如下：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="52.332ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 23130.9 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-55"></use></g><g data-mml-node="mi" transform="translate(767, 0)"><use xlink:href="#MJX-TEX-I-70"></use></g><g data-mml-node="mi" transform="translate(1270, 0)"><use xlink:href="#MJX-TEX-I-70"></use></g><g data-mml-node="mi" transform="translate(1773, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(2239, 0)"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(2690, 0)"><use xlink:href="#MJX-TEX-I-4C"></use></g><g data-mml-node="mi" transform="translate(3371, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(3716, 0)"><use xlink:href="#MJX-TEX-I-6D"></use></g><g data-mml-node="mi" transform="translate(4594, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(4939, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(5577.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(6633.6, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mn" transform="translate(7424.6, 0)"><use xlink:href="#MJX-TEX-N-33"></use></g><g data-mml-node="mo" transform="translate(8146.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mn" transform="translate(9147, 0)"><use xlink:href="#MJX-TEX-N-31"></use><use xlink:href="#MJX-TEX-N-2E" transform="translate(500, 0)"></use><use xlink:href="#MJX-TEX-N-35" transform="translate(778, 0)"></use></g><g data-mml-node="mi" transform="translate(10425, 0)"><use xlink:href="#MJX-TEX-I-49"></use></g><g data-mml-node="mi" transform="translate(10929, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mi" transform="translate(11720, 0)"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mo" transform="translate(12756.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(13812.6, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mn" transform="translate(14603.6, 0)"><use xlink:href="#MJX-TEX-N-33"></use></g><g data-mml-node="mo" transform="translate(15325.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(16326, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(16715, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mn" transform="translate(17506, 0)"><use xlink:href="#MJX-TEX-N-33"></use></g><g data-mml-node="mo" transform="translate(18228.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(19228.4, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mn" transform="translate(20019.4, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(20519.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(21130.7, 0)"><use xlink:href="#MJX-TEX-N-2217"></use></g><g data-mml-node="mn" transform="translate(21852.9, 0)"><use xlink:href="#MJX-TEX-N-31"></use><use xlink:href="#MJX-TEX-N-2E" transform="translate(500, 0)"></use><use xlink:href="#MJX-TEX-N-35" transform="translate(778, 0)"></use></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="52.579ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 23239.9 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4C"></use></g><g data-mml-node="mi" transform="translate(681, 0)"><use xlink:href="#MJX-TEX-I-6F"></use></g><g data-mml-node="mi" transform="translate(1166, 0)"><use xlink:href="#MJX-TEX-I-77"></use></g><g data-mml-node="mi" transform="translate(1882, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(2348, 0)"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(2799, 0)"><use xlink:href="#MJX-TEX-I-4C"></use></g><g data-mml-node="mi" transform="translate(3480, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(3825, 0)"><use xlink:href="#MJX-TEX-I-6D"></use></g><g data-mml-node="mi" transform="translate(4703, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(5048, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(5686.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(6742.6, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mn" transform="translate(7533.6, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(8255.8, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(9256, 0)"><use xlink:href="#MJX-TEX-N-31"></use><use xlink:href="#MJX-TEX-N-2E" transform="translate(500, 0)"></use><use xlink:href="#MJX-TEX-N-35" transform="translate(778, 0)"></use></g><g data-mml-node="mi" transform="translate(10534, 0)"><use xlink:href="#MJX-TEX-I-49"></use></g><g data-mml-node="mi" transform="translate(11038, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mi" transform="translate(11829, 0)"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mo" transform="translate(12865.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(13921.6, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mn" transform="translate(14712.6, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(15434.8, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mo" transform="translate(16435, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(16824, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mn" transform="translate(17615, 0)"><use xlink:href="#MJX-TEX-N-33"></use></g><g data-mml-node="mo" transform="translate(18337.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(19337.4, 0)"><use xlink:href="#MJX-TEX-I-51"></use></g><g data-mml-node="mn" transform="translate(20128.4, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(20628.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(21239.7, 0)"><use xlink:href="#MJX-TEX-N-2217"></use></g><g data-mml-node="mn" transform="translate(21961.9, 0)"><use xlink:href="#MJX-TEX-N-31"></use><use xlink:href="#MJX-TEX-N-2E" transform="translate(500, 0)"></use><use xlink:href="#MJX-TEX-N-35" transform="translate(778, 0)"></use></g></g></g></svg></mjx-container></p>
<p>（将数据由小到大排序，处于中间的为中位数，即50%分位数，在75%位置的即为75%分位数或四分之三分位数——Q3，在25%位置的即为25%分位数或四分之一分位数——Q1）</p>
<p>参数说明：</p>
<ol>
<li>Q1表示下四分位数，即25%分位数；Q3为上四分位数，即75%分位数；IQR表示上下四分位差，系数1.5是一种经过大量分析和经验积累起来的标准，一般情况下不做调整。</li>
<li>分位数的参数可根据具体预警结果调整：25%和75%，是比较灵敏的条件，在这种条件下，多达25%的数据可以变得任意远而不会很大地扰动四分位。具体业务中可结合拟合结果自行调整为其他分位。</li>
</ol>
<p>——出自知乎用户星星贝</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0062.jpg"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类别特征箱形图可视化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为name和 regionCode的类别太稀疏了，这里我们把不稀疏的几类画一下</span></span><br><span class="line">categorical_features = [<span class="string">'model'</span>,</span><br><span class="line"> <span class="string">'brand'</span>,</span><br><span class="line"> <span class="string">'bodyType'</span>,</span><br><span class="line"> <span class="string">'fuelType'</span>,</span><br><span class="line"> <span class="string">'gearbox'</span>,</span><br><span class="line"> <span class="string">'notRepairedDamage'</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> categorical_features:</span><br><span class="line">    Train_data[c] = Train_data[c].astype(<span class="string">'category'</span>)</span><br><span class="line">    <span class="keyword">if</span> Train_data[c].isnull().any():</span><br><span class="line">        Train_data[c] = Train_data[c].cat.add_categories([<span class="string">'MISSING'</span>])</span><br><span class="line">        Train_data[c] = Train_data[c].fillna(<span class="string">'MISSING'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boxplot</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">    sns.boxplot(x=x, y=y)</span><br><span class="line">    x=plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">f = pd.melt(Train_data, id_vars=[<span class="string">'price'</span>], value_vars=categorical_features)</span><br><span class="line">g = sns.FacetGrid(f, col=<span class="string">"variable"</span>,  col_wrap=<span class="number">2</span>, sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>, size=<span class="number">5</span>)</span><br><span class="line">g = g.map(boxplot, <span class="string">"value"</span>, <span class="string">"price"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0059.PNG"  alt=""></p>
<h3 id="类别特征的小提琴图可视化"><a href="#类别特征的小提琴图可视化" class="headerlink" title="类别特征的小提琴图可视化"></a>类别特征的小提琴图可视化</h3><p>小提琴图 (Violin Plot) 用于显示数据分布及其概率密度。这种图表结合了箱形图和密度图的特征，主要用来显示数据的分布形状。中间的黑色粗条表示四分位数范围，从其延伸的幼细黑线代表 95% 置信区间，而白点则为中位数。</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0063.jpg"  alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类别特征的小提琴图可视化</span></span><br><span class="line">catg_list = categorical_features</span><br><span class="line">target = <span class="string">'price'</span></span><br><span class="line"><span class="keyword">for</span> catg <span class="keyword">in</span> catg_list :</span><br><span class="line">    sns.violinplot(x=catg, y=target, data=Train_data)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0060.PNG"  alt=""></p>
<h3 id="类别特征的柱形图可视化"><a href="#类别特征的柱形图可视化" class="headerlink" title="类别特征的柱形图可视化"></a>类别特征的柱形图可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类别特征的柱形图可视化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar_plot</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">    sns.barplot(x=x, y=y)</span><br><span class="line">    x=plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">f = pd.melt(Train_data, id_vars=[<span class="string">'price'</span>], value_vars=categorical_features)</span><br><span class="line">g = sns.FacetGrid(f, col=<span class="string">"variable"</span>,  col_wrap=<span class="number">2</span>, sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>, size=<span class="number">5</span>)</span><br><span class="line">g = g.map(bar_plot, <span class="string">"value"</span>, <span class="string">"price"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0061.PNG"  alt=""></p>
<h3 id="类别特征的每个类别频数可视化-countplot"><a href="#类别特征的每个类别频数可视化-countplot" class="headerlink" title="类别特征的每个类别频数可视化(countplot)"></a>类别特征的每个类别频数可视化(countplot)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类别特征的每个类别频数可视化(countplot)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_plot</span><span class="params">(x,  **kwargs)</span>:</span></span><br><span class="line">    sns.countplot(x=x)</span><br><span class="line">    x=plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">f = pd.melt(Train_data,  value_vars=categorical_features)</span><br><span class="line">g = sns.FacetGrid(f, col=<span class="string">"variable"</span>,  col_wrap=<span class="number">1</span>, sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>, size=<span class="number">5</span>)</span><br><span class="line">g = g.map(count_plot, <span class="string">"value"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="使用pandas-profiling生成数据报告"><a href="#使用pandas-profiling生成数据报告" class="headerlink" title="使用pandas_profiling生成数据报告"></a>使用pandas_profiling生成数据报告</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas_profiling</span><br><span class="line">pfr = pandas_profiling.ProfileReport(Train_data)</span><br><span class="line">pfr.to_file(<span class="string">"./example.html"</span>)</span><br></pre></td></tr></table></figure>

<svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-55" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path><path id="MJX-TEX-I-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-TEX-I-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-TEX-I-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-4C" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path><path id="MJX-TEX-I-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-I-51" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path><path id="MJX-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-TEX-N-2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path id="MJX-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-TEX-I-49" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path><path id="MJX-TEX-I-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path><path id="MJX-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-TEX-N-2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path><path id="MJX-TEX-I-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-TEX-I-77" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></defs></svg>]]></content>
      <categories>
        <category>DataMining</category>
      </categories>
      <tags>
        <tag>DataMining</tag>
        <tag>价格预测</tag>
      </tags>
  </entry>
  <entry>
    <title>二手车交易价格预测-赛题理解</title>
    <url>/2020/03/22/%E4%BA%8C%E6%89%8B%E8%BD%A6%E4%BA%A4%E6%98%93%E4%BB%B7%E6%A0%BC%E9%A2%84%E6%B5%8B-%E8%B5%9B%E9%A2%98%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了二手车价格预测的赛题理解部分，主要包括了赛题概况、数据概况、预测指标以及赛题分析等。</p>
<a id="more"></a>

<h1 id="赛题概况"><a href="#赛题概况" class="headerlink" title="赛题概况"></a>赛题概况</h1><hr>
<p>比赛要求参赛选手根据给定的数据集，建立模型，二手汽车的交易价格。</p>
<p>来自 Ebay Kleinanzeigen （这个似乎是美国的二手车数据）报废的二手车，数量超过 370,000，包含 20 列变量信息，为了保证比赛的公平性，将会从中抽取10万条作为训练集，5 万条作为测试集 A，5 万条作为测试集 B。同时会对名称、车辆类型、变速箱、model、燃油类型、品牌、公里数、价格等信息进行脱敏。</p>
<p>通过这道赛题来引导大家走进 AI 数据竞赛的世界，主要针对竞赛新人进行自我练习、自我提高。</p>
<h1 id="数据概况"><a href="#数据概况" class="headerlink" title="数据概况"></a>数据概况</h1><hr>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0023.PNG"  alt=""></p>
<p>已对name、model、brand和regionCode等信息进行了脱敏，即转化为数字形式。</p>
<h1 id="预测指标"><a href="#预测指标" class="headerlink" title="预测指标"></a>预测指标</h1><hr>
<p><strong>本赛题的评价标准为MAE(Mean Absolute Error):</strong></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex" xmlns="http://www.w3.org/2000/svg" width="22.634ex" height="5.181ex" role="img" focusable="false" viewBox="0 -1592.9 10004.1 2289.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4D"></use></g><g data-mml-node="mi" transform="translate(1051, 0)"><use xlink:href="#MJX-TEX-I-41"></use></g><g data-mml-node="mi" transform="translate(1801, 0)"><use xlink:href="#MJX-TEX-I-45"></use></g><g data-mml-node="mo" transform="translate(2842.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3898.6, 0)"><g data-mml-node="mrow" transform="translate(220, 803.3)"><g data-mml-node="munderover"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-SO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(1056, 477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-6E"></use></g></g><g data-mml-node="TeXAtom" transform="translate(1056, -285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g><g data-mml-node="mrow" transform="translate(2253.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-7C"></use></g><g data-mml-node="msub" transform="translate(278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(1284.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(2284.4, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(5, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(55.6, -29)"><use xlink:href="#MJX-TEX-N-5E"></use></g></g></g><g data-mml-node="TeXAtom" transform="translate(555.6, -240.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(3133.9, 0)"><use xlink:href="#MJX-TEX-N-7C"></use></g></g></g><g data-mml-node="mi" transform="translate(2752.8, -686)"><use xlink:href="#MJX-TEX-I-6E"></use></g><rect width="5865.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.774ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 784 647" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></g></g></svg></mjx-container>代表第<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></svg></mjx-container>个样本的真实值，其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.561ex" xmlns="http://www.w3.org/2000/svg" width="1.922ex" height="2.292ex" role="img" focusable="false" viewBox="0 -765 849.6 1013.1" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(5, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(55.6, -29)"><use xlink:href="#MJX-TEX-N-5E"></use></g></g></g><g data-mml-node="TeXAtom" transform="translate(555.6, -240.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></g></g></svg></mjx-container>代表第<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></svg></mjx-container>个样本的预测值。</p>
<hr>
<p><strong>一般问题评价指标说明:</strong></p>
<p>什么是评估指标：</p>
<blockquote>
<p>评估指标即是我们对于一个模型效果的数值型量化。（有点类似与对于一个商品评价打分，而这是针对于模型效果和理想效果之间的一个打分）</p>
</blockquote>
<p>一般来说分类和回归问题的评价指标有如下一些形式：</p>
<h4 id="分类算法常见的评估指标如下："><a href="#分类算法常见的评估指标如下：" class="headerlink" title="分类算法常见的评估指标如下："></a>分类算法常见的评估指标如下：</h4><ul>
<li>对于二类分类器/分类算法，评价指标主要有accuracy， [Precision，Recall，F-score，Pr曲线]，ROC-AUC曲线。</li>
<li>对于多类分类器/分类算法，评价指标主要有accuracy， [宏平均和微平均，F-score]。</li>
</ul>
<h4 id="对于回归预测类常见的评估指标如下"><a href="#对于回归预测类常见的评估指标如下" class="headerlink" title="对于回归预测类常见的评估指标如下:"></a>对于回归预测类常见的评估指标如下:</h4><ul>
<li>平均绝对误差（Mean Absolute Error，MAE），均方误差（Mean Squared Error，MSE），平均绝对百分误差（Mean Absolute Percentage Error，MAPE），均方根误差（Root Mean Squared Error）， R2（R-Square）</li>
</ul>
<p><strong>平均绝对误差</strong><br><strong>平均绝对误差（Mean Absolute Error，MAE）</strong>:平均绝对误差，其能更好地反映预测值与真实值误差的实际情况，其计算公式如下：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="23.188ex" height="6.74ex" role="img" focusable="false" viewBox="0 -1733 10249.2 2978.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4D"></use></g><g data-mml-node="mi" transform="translate(1051, 0)"><use xlink:href="#MJX-TEX-I-41"></use></g><g data-mml-node="mi" transform="translate(1801, 0)"><use xlink:href="#MJX-TEX-I-45"></use></g><g data-mml-node="mo" transform="translate(2842.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3898.6, 0)"><g data-mml-node="mn" transform="translate(414, 676)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mi" transform="translate(220, -686)"><use xlink:href="#MJX-TEX-I-4E"></use></g><rect width="1088" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(5393.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(408, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4E"></use></g></g></g><g data-mml-node="mrow" transform="translate(6837.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-7C"></use></g><g data-mml-node="msub" transform="translate(278, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(1284.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(2284.4, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(5, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(55.6, -29)"><use xlink:href="#MJX-TEX-N-5E"></use></g></g></g><g data-mml-node="TeXAtom" transform="translate(555.6, -240.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(3133.9, 0)"><use xlink:href="#MJX-TEX-N-7C"></use></g></g></g></g></svg></mjx-container></p>
<p><strong>均方误差</strong><br><strong>均方误差（Mean Squared Error，MSE）</strong>,均方误差,其计算公式为：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="24.743ex" height="6.74ex" role="img" focusable="false" viewBox="0 -1733 10936.4 2978.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4D"></use></g><g data-mml-node="mi" transform="translate(1051, 0)"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="mi" transform="translate(1696, 0)"><use xlink:href="#MJX-TEX-I-45"></use></g><g data-mml-node="mo" transform="translate(2737.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mfrac" transform="translate(3793.6, 0)"><g data-mml-node="mn" transform="translate(414, 676)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mi" transform="translate(220, -686)"><use xlink:href="#MJX-TEX-I-4E"></use></g><rect width="1088" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(5288.2, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(408, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-4E"></use></g></g></g><g data-mml-node="msup" transform="translate(6898.9, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(1395.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(2395.4, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(5, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(55.6, -29)"><use xlink:href="#MJX-TEX-N-5E"></use></g></g></g><g data-mml-node="TeXAtom" transform="translate(555.6, -240.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(3244.9, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g><g data-mml-node="TeXAtom" transform="translate(3633.9, 492.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></g></svg></mjx-container></p>
<p><strong>R2（R-Square）的公式为</strong>：<br>残差平方和：</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.018ex" xmlns="http://www.w3.org/2000/svg" width="21.966ex" height="3.197ex" role="img" focusable="false" viewBox="0 -963 9708.8 1413" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="mi" transform="translate(645, 0)"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1290, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(451, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(917, 0)"><use xlink:href="#MJX-TEX-I-73"></use></g></g><g data-mml-node="mo" transform="translate(2953.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(4009.6, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="msup" transform="translate(5620.2, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(879, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mo" transform="translate(1446.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(2446.4, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(5, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(55.6, -29)"><use xlink:href="#MJX-TEX-N-5E"></use></g></g></g><g data-mml-node="TeXAtom" transform="translate(555.6, -240.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(3296, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g><g data-mml-node="TeXAtom" transform="translate(3685, 492.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></g></svg></mjx-container></p>
<p>总平均值:</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.018ex" xmlns="http://www.w3.org/2000/svg" width="21.412ex" height="3.218ex" role="img" focusable="false" viewBox="0 -972.5 9464.2 1422.5" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="mi" transform="translate(645, 0)"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1290, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(361, 0)"><use xlink:href="#MJX-TEX-I-6F"></use></g><g data-mml-node="mi" transform="translate(846, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g></g><g data-mml-node="mo" transform="translate(2774.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(3830.6, 0)"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="msup" transform="translate(5441.2, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(879, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mo" transform="translate(1446.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msub" transform="translate(2446.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(0, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(0, 257.3) scale(0.707)"><svg width="693" height="246" x="0" y="444" viewBox="173.2 444 693 246"><use xlink:href="#MJX-TEX-S4-AF" transform="scale(2.079, 1)"></use></svg></g></g><g data-mml-node="TeXAtom" transform="translate(490, -240.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(3230.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g><g data-mml-node="TeXAtom" transform="translate(3619.4, 501.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></g></svg></mjx-container></p>
<p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="2.216ex" role="img" focusable="false" viewBox="0 -774.5 490 979.5" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(0, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(0, 257.3) scale(0.707)"><svg width="693" height="246" x="0" y="444" viewBox="173.2 444 693 246"><use xlink:href="#MJX-TEX-S4-AF" transform="scale(2.079, 1)"></use></svg></g></g></g></g></svg></mjx-container>表示<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 490 647" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g></g></g></svg></mjx-container>的平均值<br>得到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex" xmlns="http://www.w3.org/2000/svg" width="2.63ex" height="1.934ex" role="img" focusable="false" viewBox="0 -833.9 1162.6 854.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mn" transform="translate(759, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></svg></mjx-container>表达式为：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.675ex" xmlns="http://www.w3.org/2000/svg" width="36.635ex" height="6.46ex" role="img" focusable="false" viewBox="0 -1673 16192.8 2855.5" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="TeXAtom" transform="translate(759, 413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g><g data-mml-node="mo" transform="translate(1440.3, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2496.1, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(3218.3, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mfrac" transform="translate(4218.6, 0)"><g data-mml-node="mrow" transform="translate(220, 676)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="mi" transform="translate(645, 0)"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1290, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-72"></use></g><g data-mml-node="mi" transform="translate(451, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(917, 0)"><use xlink:href="#MJX-TEX-I-73"></use></g></g></g><g data-mml-node="mrow" transform="translate(309.5, -686)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="mi" transform="translate(645, 0)"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1290, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(361, 0)"><use xlink:href="#MJX-TEX-I-6F"></use></g><g data-mml-node="mi" transform="translate(846, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g></g></g><rect width="2876" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7612.3, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(8668.1, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(9390.3, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mfrac" transform="translate(10390.6, 0)"><g data-mml-node="mrow" transform="translate(220, 710)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-SO-2211"></use></g><g data-mml-node="msup" transform="translate(1222.7, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(879, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mo" transform="translate(1446.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2446.4, 0)"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(5, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(55.6, -29)"><use xlink:href="#MJX-TEX-N-5E"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3002, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mo" transform="translate(3347, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g><g data-mml-node="TeXAtom" transform="translate(3736, 492.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g><g data-mml-node="mrow" transform="translate(450.8, -932.5)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-SO-2211"></use></g><g data-mml-node="msup" transform="translate(1222.7, 0)"><g data-mml-node="mrow"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(389, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" transform="translate(490, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g><g data-mml-node="mo" transform="translate(1395.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="mover" transform="translate(2395.4, 0)"><g data-mml-node="mi" transform="translate(0, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(0, 257.3) scale(0.707)"><svg width="693" height="246" x="0" y="444" viewBox="173.2 444 693 246"><use xlink:href="#MJX-TEX-S4-AF" transform="scale(2.079, 1)"></use></svg></g></g><g data-mml-node="mo" transform="translate(2885.4, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g><g data-mml-node="TeXAtom" transform="translate(3274.4, 501.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g><rect width="5562.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br>而<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex" xmlns="http://www.w3.org/2000/svg" width="2.63ex" height="1.934ex" role="img" focusable="false" viewBox="0 -833.9 1162.6 854.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mn" transform="translate(759, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></svg></mjx-container>用于度量因变量的变异中可由自变量解释部分所占的比例，取值范围是 0~1，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex" xmlns="http://www.w3.org/2000/svg" width="2.63ex" height="1.934ex" role="img" focusable="false" viewBox="0 -833.9 1162.6 854.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mn" transform="translate(759, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></svg></mjx-container>越接近1,表明回归平方和占总平方和的比例越大,回归线与各观测点越接近，用x的变化来解释y值变化的部分就越多,回归的拟合程度就越好。所以<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex" xmlns="http://www.w3.org/2000/svg" width="2.63ex" height="1.934ex" role="img" focusable="false" viewBox="0 -833.9 1162.6 854.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-52"></use></g><g data-mml-node="mn" transform="translate(759, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></svg></mjx-container>也称为拟合优度（Goodness of Fit）的统计量。</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.889ex" height="1.959ex" role="img" focusable="false" viewBox="0 -661 835 866" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(490, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></g></svg></mjx-container>表示真实值，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="2.038ex" height="2.195ex" role="img" focusable="false" viewBox="0 -765 900.6 970" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(5, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(55.6, -29)"><use xlink:href="#MJX-TEX-N-5E"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(555.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></g></svg></mjx-container>表示预测值，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.561ex" xmlns="http://www.w3.org/2000/svg" width="1.774ex" height="2.314ex" role="img" focusable="false" viewBox="0 -774.5 784 1022.7" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mover"><g data-mml-node="mi" transform="translate(0, 0)"><use xlink:href="#MJX-TEX-I-79"></use></g><g data-mml-node="mo" transform="translate(0, 257.3) scale(0.707)"><svg width="693" height="246" x="0" y="444" viewBox="173.2 444 693 246"><use xlink:href="#MJX-TEX-S4-AF" transform="scale(2.079, 1)"></use></svg></g></g><g data-mml-node="TeXAtom" transform="translate(490, -240.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g></g></g></g></g></svg></mjx-container>表示样本均值。得分越高拟合效果越好。</p>
<h1 id="赛题分析"><a href="#赛题分析" class="headerlink" title="赛题分析"></a>赛题分析</h1><hr>
<h2 id="价格影响因素"><a href="#价格影响因素" class="headerlink" title="价格影响因素"></a>价格影响因素</h2><p>首先我们来看一下二手车的价格受到什么因素的影响？根据影响因素可以构造有用的特征。</p>
<ul>
<li><p>品牌和车型：对应数据列（brand，bodyType），在同等条件下，保有量大（一个地区拥有汽车的数量）、品牌知名度高的二手车型价格可能会比较高些。因此还需要和地区regionCode结合起来。</p>
</li>
<li><p>汽车注册时间：对应数据列（regDate），简单来说就是汽车使用多久了。新车前五年的折旧率分别是：16%、12%、10%、8%、6%，逐年递减，因此选购3到4年左右的二手车比较划算，当然不同品牌不同车型的折旧率也不一样。因此，使用年限是二手车价格的决定性因素。</p>
</li>
<li><p>车况和里程数：对应数据列（notRepairDamage，kilometer），车况即看是否有过大维修，以及目前是否有损坏等。里程数也是一项重要的指标，比如两年6万公里，算较为正常，两年10万公里，价格会明显低于前者，但也要根据车型的不同来衡量。</p>
</li>
<li><p>配置和颜色：对应数据列（fuelType，gearBox，power，color竟然没有？），高配高价。对于家用车来说，黑色和银色的保值率会比较高。而对于跑车来说，鲜艳色的保值率可能会比较高。</p>
</li>
<li><p>新车价格：对应数据列（没有？）新车价格如果下降，势必会引起二手车价格的降低。</p>
</li>
<li><p>购车时间：对应数据列（createDate），但是我感觉不是，上架时间和购车时间应该不同吧。二手车也有淡旺季。旺季价格都会上涨。这个是Ebay Kleinanzeigen的二手车数据，似乎是美国的，我也⑧知道美国购车的淡旺季是什么时候？</p>
</li>
</ul>
<h2 id="估值方法"><a href="#估值方法" class="headerlink" title="估值方法"></a>估值方法</h2><h3 id="公平价重置成本法"><a href="#公平价重置成本法" class="headerlink" title="公平价重置成本法"></a>公平价重置成本法</h3><p>重置成本法是指在现时条件下重新购置一辆全新状态的被评估车辆所需的全部成本（即完全重置成本。简称重置全价），减去该被评估车辆的各种陈旧贬值后的差额作为被评估车辆现时价格的一种评估方法。一般来讲，一辆车一年之内二手车价格较其新车价格相比损失20%左右，一年之后按每年折价10%来进行计算。</p>
<p>计算公式：评估价 = 当前新车价 x ( 180 - 已使用月份 ) ÷ 180</p>
<h3 id="公平价现行估价法"><a href="#公平价现行估价法" class="headerlink" title="公平价现行估价法"></a>公平价现行估价法</h3><p>现行估价法是指以同款式、同年份、同使用期限的车辆在二手车市场上的平均价格为基础，再考虑所评估车辆的现时技术状况评定系数，以平均价格乘以系数从而判定车辆价格。这种方法是最贴近于市场真实价格的方法，不过有一个前提条件是具备大量的市场真实交易数据作为样本，这样的平均价格更具代表性。</p>
<h3 id="残值法"><a href="#残值法" class="headerlink" title="残值法"></a>残值法</h3><p>新车使用10年视为报废，把15%作为不折旧的固定部分为残值，其余85%为浮动折旧值。可分三个阶段：3年<del>4年</del>3年来折旧，折旧率分别为11%、10%和9%，前三年每年折11%。</p>
<p>计算公式：评估价=市场现行新车售价×[15%（不动残值）+85%（浮动值）×（分阶段折旧率）]+评估值。</p>
<p>评估值：应考虑该车在当地的保有量和车况（外观、保养程度），酌情给出评估值（一般为新车价的2%~5%）。</p>
<h3 id="里程法"><a href="#里程法" class="headerlink" title="里程法"></a>里程法</h3><p>具体为：一部车有效寿命30万公里，将其分为5段，每段6万公里，每段价值依序为新车价的5/15、4/15、3/15、2/15、1/15。假设新车价12万元，已行驶7.5万公里（5年左右），那么该车估值为12万元×（3+3+2+1）÷15=7.2万元。</p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-4D" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path><path id="MJX-TEX-I-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-TEX-I-45" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-SO-2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path><path id="MJX-TEX-I-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-TEX-I-79" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-TEX-N-5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path><path id="MJX-TEX-I-4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path><path id="MJX-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-TEX-I-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path><path id="MJX-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-TEX-I-72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-TEX-I-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-TEX-I-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-TEX-I-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-TEX-S4-AF" d="M69 544V590H430V544H69Z"></path><path id="MJX-TEX-I-52" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></defs></svg>]]></content>
      <categories>
        <category>DataMining</category>
      </categories>
      <tags>
        <tag>DataMining</tag>
        <tag>价格预测</tag>
      </tags>
  </entry>
  <entry>
    <title>MachineVision-Ⅱ</title>
    <url>/2020/03/19/MachineVision-%E2%85%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p>This post introduce the the concept of convolution, Linear System and the Linear Filters.</p>
<a id="more"></a>

<h1 id="Convolution"><a href="#Convolution" class="headerlink" title="Convolution"></a>Convolution</h1><hr>
<h2 id="Linear-System"><a href="#Linear-System" class="headerlink" title="Linear System"></a>Linear System</h2><h4 id="What-is-a-system"><a href="#What-is-a-system" class="headerlink" title="What is a system?"></a>What is a system?</h4><p>A <em>system</em> is defined as a method that modifies a signal. </p>
<h4 id="How-to-define-a-Linear-system"><a href="#How-to-define-a-Linear-system" class="headerlink" title="How to define a Linear system?"></a>How to define a Linear system?</h4><p>Linear systems satisfy some conducive properties of linearity.</p>
<h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul>
<li><strong>Homogeneity</strong>（齐次性）：If the input to a linear system is scaled, the output would also be scaled by the same factor.</li>
</ul>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0017.PNG"  alt=""></p>
<ul>
<li><strong>Additivity</strong>（可加性）：The independent responses (output) of multiple different input signals are added when the inputs are added. This implies that each signal is passed through the system independently without interacting with others.</li>
</ul>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0018.PNG"  alt=""></p>
<ul>
<li><strong>Shift Invariance</strong>（平移不变性）：Finally, the output of a shifted input is also shifted.</li>
</ul>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0019.PNG"  alt=""></p>
<p><strong>When that data passes through multiple systems, the properties of linearity assures the following.</strong></p>
<ul>
<li><strong>Commutative</strong>（可交换性）：If two linear systems are applied to a signal in a cascaded manner (i.e. in series), the order of their application does not matter. Given two linear systems <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.345ex" xmlns="http://www.w3.org/2000/svg" width="2.7ex" height="1.94ex" role="img" focusable="false" viewBox="0 -705 1193.3 857.7" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="mi" transform="translate(613, -152.7) scale(0.707)"><use xlink:href="#MJX-TEX-I-41"></use></g></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.714ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 1199.7 855" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-53"></use></g><g data-mml-node="mi" transform="translate(613, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-42"></use></g></g></g></g></svg></mjx-container>,</li>
</ul>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0020.PNG"  alt=""></p>
<ul>
<li><strong>Superposition</strong>（叠加性）：If each input generates multiple outputs in a linear system, the addition of the inputs will generate an additions of the outputs.</li>
</ul>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0021.PNG"  alt=""></p>
<h3 id="Response-of-a-Linear-System"><a href="#Response-of-a-Linear-System" class="headerlink" title="Response of a Linear System"></a>Response of a Linear System</h3><h4 id="What-is-an-impulse"><a href="#What-is-an-impulse" class="headerlink" title="What is an impulse?"></a>What is an impulse?</h4><p>An <em>impulse</em>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="2.855ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1262 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(623, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(984, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container>, is a discrete signal with only one non-zero sample. </p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.69ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3399 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-44"></use></g><g data-mml-node="mi" transform="translate(828, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(1294, 0)"><use xlink:href="#MJX-TEX-I-6C"></use></g><g data-mml-node="mi" transform="translate(1592, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(1953, 0)"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mo" transform="translate(2482, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(2760, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(3121, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container> is a special kind of impulse whose non-zero sample is at <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="4.965ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2194.6 748" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(638.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1694.6, 0)"><use xlink:href="#MJX-TEX-N-30"></use></g></g></g></svg></mjx-container> and has a value <strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="12.153ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5371.6 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-44"></use></g><g data-mml-node="mi" transform="translate(828, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(1294, 0)"><use xlink:href="#MJX-TEX-I-6C"></use></g><g data-mml-node="mi" transform="translate(1592, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(1953, 0)"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mo" transform="translate(2482, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mn" transform="translate(2760, 0)"><use xlink:href="#MJX-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(3260, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g><g data-mml-node="mo" transform="translate(3815.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(4871.6, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g></g></svg></mjx-container></strong>. Therefore, <strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.69ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3399 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-44"></use></g><g data-mml-node="mi" transform="translate(828, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(1294, 0)"><use xlink:href="#MJX-TEX-I-6C"></use></g><g data-mml-node="mi" transform="translate(1592, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(1953, 0)"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mo" transform="translate(2482, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(2760, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(3121, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container> has a normalized spike at 0</strong>. Considering each sample to be of unit width and height proportional to its value, the area covered by a delta is therefore 1. <strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.69ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3399 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-44"></use></g><g data-mml-node="mi" transform="translate(828, 0)"><use xlink:href="#MJX-TEX-I-65"></use></g><g data-mml-node="mi" transform="translate(1294, 0)"><use xlink:href="#MJX-TEX-I-6C"></use></g><g data-mml-node="mi" transform="translate(1592, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mi" transform="translate(1953, 0)"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mo" transform="translate(2482, 0)"><use xlink:href="#MJX-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(2760, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(3121, 0)"><use xlink:href="#MJX-TEX-N-5D"></use></g></g></g></svg></mjx-container> is considered the simplest signal.</strong></p>
<h4 id="Linear-System-Decomposition-and-Synthesis"><a href="#Linear-System-Decomposition-and-Synthesis" class="headerlink" title="Linear System Decomposition and Synthesis"></a>Linear System Decomposition and Synthesis</h4><p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0022.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path><path id="MJX-TEX-I-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-TEX-I-42" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path><path id="MJX-TEX-I-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-TEX-I-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path><path id="MJX-TEX-I-44" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path><path id="MJX-TEX-I-65" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path><path id="MJX-TEX-I-6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-TEX-I-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs></svg>]]></content>
      <categories>
        <category>机器视觉</category>
      </categories>
      <tags>
        <tag>机器视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot通过CORS实现跨域</title>
    <url>/2020/03/17/SpringBoot%E9%80%9A%E8%BF%87CORS%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文主要介绍了在SpringBoot中使用CORS（跨域源资源共享）实现跨域操作，CORS是以W3C为标准的一份浏览器技术的规范。</p>
<a id="more"></a>

<h1 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h1><hr>
<p>首先创建两个普通的SpringBoot项目，第一个命名为provider提供服务，第二个命名为consumer消费服务，第一个配置端口为8080，第二个配置配置为8081。</p>
<p>首先在provider上创建一个HelloController，提供两个hello接口，一个get，一个put。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cors1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 08:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://localhost:8081"</span>) <span class="comment">//该注释允许来自8081域的请求，该注释可以加在类上，也可以加在方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConroller</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello cors1"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/putting"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putting</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"putting"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>那么如果我们希望进行全局配置呢？我们可以创建一个WebMvcConfig来配置允许访问的域以及请求方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cors1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 10:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>{</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"http://localhost:8081"</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">"*"</span>) <span class="comment">//表示允许所有请求头</span></span><br><span class="line">                .allowedMethods(<span class="string">"*"</span>) <span class="comment">//表示允许所有请求方法</span></span><br><span class="line">                .maxAge(<span class="number">30</span> * <span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>然后在costumer中创建一个请求页面indx.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"GET"</span> <span class="attr">onclick</span>=<span class="string">"getData()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"PUT"</span> <span class="attr">onclick</span>=<span class="string">"putData()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getData</span><span class="params">()</span> </span>{</span></span><br><span class="line"><span class="actionscript">        $.get(<span class="string">'http://localhost:8080/hello'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> </span>{</span></span><br><span class="line"><span class="javascript">           $(<span class="string">"#app"</span>).html(msg);</span></span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">putData</span><span class="params">()</span> </span>{</span></span><br><span class="line"><span class="javascript">        $.ajax({</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'put'</span>,</span></span><br><span class="line"><span class="actionscript">            url: <span class="string">'http://localhost:8080/putting'</span>,</span></span><br><span class="line"><span class="actionscript">            success: <span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> </span>{</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#app"</span>).html(msg);</span></span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行两个项目，在index.html点击按钮即可跨域发送请求了。</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0045.PNG"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0046.PNG"  alt=""></p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0047.PNG"  alt=""></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自定义异常</title>
    <url>/2020/03/17/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文主要介绍了Springboot里面如何自定义错误页面、异常数据、异常视图以及异常的源码分析。</p>
<a id="more"></a>

<h1 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h1><hr>
<p>当我们没有自定义错误页面时，Springboot会为我们自动配置一个异常页面。如果我们想自定义错误页面，则需要提供 /error 路径 ，不过在 Spring Boot 中，提供 /error 路径实际上是下下策，Spring Boot 本身在处理异常时，也是当所有条件都不满足时，才会去找 /error 路径。那么我们就先来看看，在 Spring Boot 中，如何自定义 error 页面，整体上来说，可以分为两种，一种是静态页面，另一种是动态页面。</p>
<h2 id="静态页面"><a href="#静态页面" class="headerlink" title="静态页面"></a>静态页面</h2><p>自定义静态异常页面，又分为两种，第一种 是使用 HTTP 响应码来命名页面，例如 404.html、405.html、500.html ….，另一种就是直接定义一个 4xx.html，表示400-499 的状态都显示这个异常页面，5xx.html 表示 500-599 的状态显示这个异常页面。默认是在<code>classpath:/static/error/</code>路径下定义静态页面。</p>
<h2 id="动态页面"><a href="#动态页面" class="headerlink" title="动态页面"></a>动态页面</h2><p>动态的异常页面定义方式和静态的基本 一致，可以采用的页面模板有 jsp、freemarker、thymeleaf。动态异常页面，也支持 404.html 或者 4xx.html ，但是一般来说，由于动态异常页面可以直接展示异常详细信息，所以就没有必要挨个枚举错误了 ，直接定义 4xx.html（这里使用thymeleaf模板）或者 5xx.html 即可。</p>
<h2 id="错误页面显示的优先级"><a href="#错误页面显示的优先级" class="headerlink" title="错误页面显示的优先级"></a>错误页面显示的优先级</h2><p>那么自定义的错误页面也是有优先级的，<strong>精确 &gt; 模糊，动态 &gt; 静态</strong>。</p>
<h1 id="自定义异常数据"><a href="#自定义异常数据" class="headerlink" title="自定义异常数据"></a>自定义异常数据</h1><hr>
<p>我们首先来看一下<strong>ErrorMvcAutoConfiguration</strong>这个类，这里有一个方法叫<strong>errorAttributes</strong>，返回一个<strong>DefaultErrorAttributes</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(value = ErrorAttributes<span class="class">.<span class="keyword">class</span>, <span class="title">search</span> </span>= SearchStrategy.CURRENT)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> DefaultErrorAttributes <span class="title">errorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorAttributes(<span class="keyword">this</span>.serverProperties.getError().isIncludeException());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>该方法为我们创建了默认的异常数据，其生效的条件是<strong>@ConditionalOnMissingBean</strong>，即没有提供自定义的异常数据。而我们再看DefaultErrorAttributes类中获取异常信息的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">		Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">		errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">		addStatus(errorAttributes, webRequest);</span><br><span class="line">		addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">		addPath(errorAttributes, webRequest);</span><br><span class="line">		<span class="keyword">return</span> errorAttributes;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>因此如果我们需要自定义异常数据，只需要继承这个<strong>DefaultErrorAttributes</strong>类，并重写<strong>getErrorAttributes</strong>方法即可。因此我们创建一个<strong>MyErrorAttribute</strong>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 01:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttribute</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取到默认的异常数据，再根据原有的异常数据加上自己的配置</span></span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">        errorAttributes.put(<span class="string">"myerror"</span>, <span class="string">"这是我的异常类"</span>);</span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们在相应的错误页面上添加异常数据的显示。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My500<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>path<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;path&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>timestamp<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;timestamp&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>message<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>status<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;status&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>myerror<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;myerror&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="自定义异常视图"><a href="#自定义异常视图" class="headerlink" title="自定义异常视图"></a>自定义异常视图</h1><hr>
<p>在<strong>ErrorMvcAutoConfiguration</strong>类中有一个名为<strong>conventionErrorViewResolver</strong>的方法定义了异常视图，并返回一个<strong>DefaultErrorViewResolver</strong>类，该类定义了默认的异常视图。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnBean</span>(DispatcherServlet<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">		@<span class="title">ConditionalOnMissingBean</span>(<span class="title">ErrorViewResolver</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">		<span class="title">DefaultErrorViewResolver</span> <span class="title">conventionErrorViewResolver</span>() </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorViewResolver(<span class="keyword">this</span>.applicationContext, <span class="keyword">this</span>.resourceProperties);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>因此我们只需要继承自<strong>DefaultErrorViewResolver</strong>类即可自定义异常视图。因此我们创建一个<strong>MyErrorViewResolver</strong>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.ResourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/17 01:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorViewResolver</span> <span class="keyword">extends</span> <span class="title">DefaultErrorViewResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new &#123;<span class="doctag">@link</span> DefaultErrorViewResolver&#125; instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationContext the source application context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceProperties resource properties</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyErrorViewResolver</span><span class="params">(ApplicationContext applicationContext, ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(applicationContext, resourceProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"my500"</span>);</span><br><span class="line">        modelAndView.addAllObjects(model);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义完异常数据和异常视图后，我们来启动一下项目来看看效果</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0015.PNG"  alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>@ControllerAdvice的使用</title>
    <url>/2020/03/16/ControllerAdvice%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="处理全局异常"><a href="#处理全局异常" class="headerlink" title="处理全局异常"></a>处理全局异常</h1><hr>
<p>我们使用fileupload项目来进行测试，首先我们设置上传文件的大小限制</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.servlet.multipart.max-file-size</span>=<span class="string">1KB</span></span><br></pre></td></tr></table></figure>

<p>测试一下，我们可以看到出现了<strong>FileSizeLimitExceededException</strong>，同时还有一个提示信息This application has no explicit mapping for /error, so you are seeing this as a fallback. 那么我们如何自定义一个错误提示呢？我们创建一个MyException类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fileupload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MaxUploadSizeExceededException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 16:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MaxUploadSizeExceededException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">myException</span>(<span class="title">MaxUploadSizeExceededException</span> <span class="title">e</span>, <span class="title">HttpServletResponse</span> <span class="title">response</span>) <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(<span class="string">"上传文件大小超出限制"</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们再来做一次文件上传，我们可以看到自定义的错误提示了</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0011.PNG"  alt=""></p>
<p>那么如果我们想自定义一个错误页面呢？首先我们添加thymeleaf依赖，然后添加一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fileupload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MaxUploadSizeExceededException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 16:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @ExceptionHandler(MaxUploadSizeExceededException.class)</span></span><br><span class="line"><span class="comment">//    public void myException(MaxUploadSizeExceededException e, HttpServletResponse response) throws IOException &#123;</span></span><br><span class="line"><span class="comment">//        response.setContentType("text/html;charset=utf-8");</span></span><br><span class="line"><span class="comment">//        PrintWriter writer = response.getWriter();</span></span><br><span class="line"><span class="comment">//        writer.write("上传文件大小超出限制");</span></span><br><span class="line"><span class="comment">//        writer.flush();</span></span><br><span class="line"><span class="comment">//        writer.close();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MaxUploadSizeExceededException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">myException</span>(<span class="title">MaxUploadSizeExceededException</span> <span class="title">e</span>) <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"error"</span>,<span class="string">"上传文件大小超出限制"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在template目录下创建一个error.html文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;error&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传一个超出1KB的文件后就会看到自定义的错误提示页面了</p>
<h1 id="预设全局数据"><a href="#预设全局数据" class="headerlink" title="预设全局数据"></a>预设全局数据</h1><hr>
<p>我们先创建一个GlobalData类，该类定义了一个全局数据，即任意一个Controller都可以获取到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controlleradvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 16:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalData</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里的key就是info，value就是该方法的返回值</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span>(value = <span class="string">"info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">myData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"WJZheng"</span>);</span><br><span class="line">        map.put(<span class="string">"address"</span>,<span class="string">"https://wellenzheng.github.io/"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们创建一个Controller，通过Model来获取数据并在控制台输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controlleradvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 16:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/data"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">data</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = model.asMap();</span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">":"</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"data"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="请求参数预处理"><a href="#请求参数预处理" class="headerlink" title="请求参数预处理"></a>请求参数预处理</h1><hr>
<p>我们首先创建一个Book类和一个Author类，他们都有一个同名的属性name。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controlleradvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 17:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> +</span><br><span class="line">                <span class="string">"id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", price="</span> + price +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controlleradvice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 17:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Author&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在Controller里添加一个方法来post数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controlleradvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 17:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(@ModelAttribute(<span class="string">"book"</span>)</span> Book book, @<span class="title">ModelAttribute</span><span class="params">(<span class="string">"author"</span>)</span> Author author)</span>&#123; <span class="comment">//@ModelAttribute是为参数创建一个别名</span></span><br><span class="line">        System.out.println(book);</span><br><span class="line">        System.out.println(author);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后在GlobalData中为这两个参数绑定一个前缀</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controlleradvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.InitBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ModelAttribute;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 16:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalData</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span>(<span class="string">"author"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAuthor</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">"a."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span>(<span class="string">"book"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBook</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">        binder.setFieldDefaultPrefix(<span class="string">"b."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在postman中进行测试，我们就可以在提交的数据中加上前缀来区别这两个类的同名属性</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0014.PNG"  alt=""></p>
<p>若未加预处理之前，springboot会把两个同名属性合并在一起</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0012.PNG"  alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot文件上传</title>
    <url>/2020/03/16/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了在Springboot中如何进行文件上传，以及使用Ajax上传，以及多文件上传的方式</p>
<a id="more"></a>

<h1 id="SpringBoot文件上传"><a href="#SpringBoot文件上传" class="headerlink" title="SpringBoot文件上传"></a>SpringBoot文件上传</h1><hr>
<p>使用SpringBoot的文件上传，只需要编写好后台逻辑即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fileupload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 14:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"/yyyy/MM/dd/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile file, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String format = dateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//完整的路径</span></span><br><span class="line">        String realPath = request.getServletContext().getRealPath(<span class="string">"/img"</span>) + format;</span><br><span class="line">        <span class="comment">//创建一个保存的文件夹</span></span><br><span class="line">        File folder = <span class="keyword">new</span> File(realPath);</span><br><span class="line">        <span class="comment">//若文件夹不存在，则创建该文件夹</span></span><br><span class="line">        <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">            folder.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//为了避免重名，需要修改上传文件的名字</span></span><br><span class="line">        String oldName = file.getOriginalFilename();</span><br><span class="line">        String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> File(folder, newName));</span><br><span class="line">            <span class="comment">//动态获取上传文件的url</span></span><br><span class="line">            String url = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + <span class="string">"/img"</span> + format + newName;</span><br><span class="line">            System.out.println(<span class="string">"submit success!"</span>);</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"errors"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后创建一个HTML页面用于上传</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传成功后返回文件的url，访问url即可看到上传的文件。</p>
<h1 id="使用Ajax进行文件上传"><a href="#使用Ajax进行文件上传" class="headerlink" title="使用Ajax进行文件上传"></a>使用Ajax进行文件上传</h1><hr>
<p>使用Ajax进行文件上传，后台代码还是使用上面的代码，只是前端需要修改一下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"submit"</span> <span class="attr">onclick</span>=<span class="string">"upload()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//$("#file")[0]把jQuery对象转成JavaScript对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> fileElement = $(<span class="string">"#file"</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="actionscript">            formData.append(<span class="string">"file"</span>,fileElement);</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                type:<span class="string">'post'</span>,</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">'/upload'</span>,</span></span><br><span class="line"><span class="actionscript">                processData: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">                contentType: <span class="literal">false</span>,</span></span><br><span class="line">                data: formData,</span><br><span class="line"><span class="actionscript">                success: <span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#result"</span>).html(msg);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot多文件上传"><a href="#SpringBoot多文件上传" class="headerlink" title="SpringBoot多文件上传"></a>SpringBoot多文件上传</h1><hr>
<p>多文件上传并不难，首先在前端页面的input标签里添加一个<strong>multiple</strong>属性，然后在后台代码中使用一个<strong>MultipartFile</strong>数组来处理即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fileupload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/16 14:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"/yyyy/MM/dd/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/uploads"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploads</span><span class="params">(MultipartFile[] files, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String format = dateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        String realPath = request.getServletContext().getRealPath(<span class="string">"/img"</span>) + format;</span><br><span class="line">        File folder = <span class="keyword">new</span> File(realPath);</span><br><span class="line">        <span class="keyword">if</span> (!folder.exists()) &#123;</span><br><span class="line">            folder.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">            String oldName = file.getOriginalFilename();</span><br><span class="line">            String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.transferTo(<span class="keyword">new</span> File(folder, newName));</span><br><span class="line">                String url = request.getScheme() + <span class="string">"://"</span> + request.getServerName() + <span class="string">":"</span> + request.getServerPort() + <span class="string">"/img"</span> + format + newName;</span><br><span class="line">                System.out.println(url);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/uploads"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行程序，然后选择多个文件并上传，我们可以看到控制台输出了上传文件的URL。</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0010.PNG"  alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的静态资源访问方案</title>
    <url>/2020/03/15/SpringBoot%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BF%E9%97%AE%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了Springboot的静态资源访问方案，包括设置静态资源路径以及自定义静态资源目录等</p>
<a id="more"></a>

<h1 id="SpringBoot默认的静态资源访问方案"><a href="#SpringBoot默认的静态资源访问方案" class="headerlink" title="SpringBoot默认的静态资源访问方案"></a>SpringBoot默认的静态资源访问方案</h1><hr>
<p>当我们使用 SpringMVC 框架时，静态资源会被拦截，需要添加额外配置。要讲 Spring Boot 中的问题，我们得先回到 SSM 环境搭建中，一般来说，我们可以通过 <code>&lt;mvc:resources /&gt;</code> 节点来配置不拦截静态资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/**"</span> <span class="attr">location</span>=<span class="string">"/"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>/**表示可以匹配任意层级的路径，以上配置是在XML中的配置，若在Java代码中进行配置，则需要自定义一个类，并继承自WebMvcConfigurationSupport，然后实现addResourceHandlers方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"org.sang.javassm"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMVCConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么在SpringBoot中是如何实现自动配置的呢？我们来看<strong>WebMvcAutoConfiguration</strong>类里面的<strong>addResourceHandlers</strong>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过ctrl+左键点击，我们可以查看<strong>staticPathPattern</strong>的值其实是/**，并通过<strong>addResourceHandler</strong>方法加载到配置中去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Path pattern used for static resources.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String staticPathPattern = <span class="string">"/**"</span>;</span><br></pre></td></tr></table></figure>

<p>然后我们再来看<strong>getStaticLocations()</strong>中的返回值是什么，一路查找下去我们发现其返回值是一个数组，定义了静态资源的访问路径，并且具有优先级。然后通过<strong>addResourceLocations</strong>方法加载到配置中去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">"classpath:/META-INF/resources/"</span>,</span><br><span class="line">			<span class="string">"classpath:/resources/"</span>, <span class="string">"classpath:/static/"</span>, <span class="string">"classpath:/public/"</span> &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>classpath:/META-INF/resources/</p>
</li>
<li><p>classpath:/resources/</p>
</li>
<li><p>classpath:/static/</p>
</li>
<li><p>classpath:/public/</p>
</li>
<li><p>/</p>
</li>
</ul>
<p>前四个目录好理解，分别对应了resources目录下不同的目录，第5个 <code>/</code> 是啥意思呢？我们知道，在 Spring Boot 项目中，默认是没有 webapp 这个目录的，当然我们也可以自己添加（例如在需要使用JSP的时候），这里第5个 <code>/</code> 其实就是表示 webapp 目录中的静态资源也不被拦截。如果同一个文件分别出现在五个目录下，那么优先级也是按照上面列出的顺序。</p>
<h1 id="自定义静态资源位置"><a href="#自定义静态资源位置" class="headerlink" title="自定义静态资源位置"></a>自定义静态资源位置</h1><hr>
<p>那么如果我们想自定义静态资源的位置呢？我们可以通过application.properties或Java代码来自定义。</p>
<h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/myStatic</span></span><br><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/**</span></span><br></pre></td></tr></table></figure>

<h2 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/myStatic/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的JSON解析方案</title>
    <url>/2020/03/15/SpringBoot%E7%9A%84JSON%E8%A7%A3%E6%9E%90%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：本文介绍了Springboot的JSON解析方案，包括自动化配置的Jackson和Gson，以及阿里的fastjson</p>
<a id="more"></a>

<h1 id="SpringBoot的默认JSON解析方案"><a href="#SpringBoot的默认JSON解析方案" class="headerlink" title="SpringBoot的默认JSON解析方案"></a>SpringBoot的默认JSON解析方案</h1><hr>
<p>SpringBoot默认使用的是Jackson，在项目的maven依赖里面可以看到。同时SpringBoot也为我们自动配置好了Jackson和Gson的HttpMessageConverter。因此，如果用户使用Jackson和Gson时没有额外的自定义配置，则只需要引入依赖即可。</p>
<p><strong>HttpMessageConverter</strong>是一个消息转换工具，其主要功能有：</p>
<ul>
<li>将服务端返回的对象序列化成JSON字符串</li>
<li>将前端传来的JSON字符串反序列化为Java对象</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jackson依赖已经内嵌到starter里面了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么我们使用一个简单的User类和UserController来测试一下SpringBoot的默认JSON解析方案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.json.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/15 16:18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd:"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.json.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.json.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/15 16:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(i);</span><br><span class="line">            user.setUsername(<span class="string">"user:"</span> + i);</span><br><span class="line">            user.setAddress(<span class="string">"home:"</span> + i);</span><br><span class="line">            user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后我们可以看到，使用默认的解析方案已经可以自动序列化JSON了</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0008.PNG"  alt=""></p>
<p>那么这些自动化配置是在哪里实现的呢？我们可以找到一个<strong>JacksonHttpMessageConvertersConfiguration</strong>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JacksonHttpMessageConvertersConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">	<span class="meta">@ConditionalOnClass</span>(ObjectMapper<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	@<span class="title">ConditionalOnBean</span>(<span class="title">ObjectMapper</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">	@<span class="title">ConditionalOnProperty</span>(<span class="title">name</span> </span>= HttpMessageConvertersAutoConfiguration.PREFERRED_MAPPER_PROPERTY,</span><br><span class="line">			havingValue = <span class="string">"jackson"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MappingJackson2HttpMessageConverterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span>(value = MappingJackson2HttpMessageConverter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">				<span class="title">ignoredType</span> </span>= &#123;</span><br><span class="line">						<span class="string">"org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter"</span>,</span><br><span class="line">						<span class="string">"org.springframework.data.rest.webmvc.alps.AlpsJsonHttpMessageConverter"</span> &#125;)</span><br><span class="line">		<span class="function">MappingJackson2HttpMessageConverter <span class="title">mappingJackson2HttpMessageConverter</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> MappingJackson2HttpMessageConverter(objectMapper);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    ······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们看到，该配置首先需要一个<strong>ObjectMapper</strong>，这是一个JSON序列化工具。然后再为其自动配置一个<strong>MappingJackson2HttpMessageConverter</strong>转换工具类。</p>
<p>那么如果我们想自己配置JSON的格式呢？比如说日期的格式，我们可以通过在User类中的birthday属性上添加<strong>@JsonFormat</strong>注解来局部格式化JSON，又或者我们可以通过创建一个配置类来自定义一个全局的JSON解析方案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.json.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/15 16:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMVCConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行全局配置，如编码方式</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MappingJackson2HttpMessageConverter <span class="title">messageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MappingJackson2HttpMessageConverter converter = <span class="keyword">new</span> MappingJackson2HttpMessageConverter();</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyy-MM-dd"</span>));</span><br><span class="line">        converter.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行全局配置，如日期</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ObjectMapper <span class="title">objectMapper</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyy-MM-dd"</span>));</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次运行我们可以发现日期的格式改变了</p>
<p><img src="/" class="lazyload" data-src="https://raw.githubusercontent.com/wellenzheng/gittalk/master/images/0009.PNG"  alt=""></p>
<h1 id="SpringBoot整合Gson"><a href="#SpringBoot整合Gson" class="headerlink" title="SpringBoot整合Gson"></a>SpringBoot整合Gson</h1><hr>
<p>现在我们来使用Gson的解析方案，我们已经说过SpringBoot已经为我们自动配置好了Gson，因此我们只需要引入依赖即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在引入Gson的依赖之前，我们首先需要将jackson的依赖排除掉--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加完了依赖即可像上面使用Jackson那样使用Gson了。那么Gson的自动化配置又在哪里呢？我们找到一个<strong>GsonHttpMessageConvertersConfiguration</strong>类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Gson<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">GsonHttpMessageConvertersConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">	<span class="meta">@ConditionalOnBean</span>(Gson<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	@<span class="title">Conditional</span>(<span class="title">PreferGsonOrJacksonAndJsonbUnavailableCondition</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">static</span> <span class="title">class</span> <span class="title">GsonHttpMessageConverterConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">		<span class="function">GsonHttpMessageConverter <span class="title">gsonHttpMessageConverter</span><span class="params">(Gson gson)</span> </span>&#123;</span><br><span class="line">			GsonHttpMessageConverter converter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">			converter.setGson(gson);</span><br><span class="line">			<span class="keyword">return</span> converter;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里我们可以看到若用户没有自定义一个<strong>GsonHttpMessageConverter</strong>的话，SpringBoot会自动为我们提供一个转换器。那么我们同样可以创建一个配置类来自定义Gson配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.gson.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.GsonHttpMessageConverter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/15 17:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">GsonHttpMessageConverter <span class="title">httpMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        GsonHttpMessageConverter converter = <span class="keyword">new</span> GsonHttpMessageConverter();</span><br><span class="line">        converter.setGson(<span class="keyword">new</span> GsonBuilder().setDateFormat(<span class="string">"yyyy-MM-dd"</span>).create());</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Gson <span class="title">gson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GsonBuilder().setDateFormat(<span class="string">"yyyy-MM-dd"</span>).create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SpringBoot整合fastjson"><a href="#SpringBoot整合fastjson" class="headerlink" title="SpringBoot整合fastjson"></a>SpringBoot整合fastjson</h1><hr>
<p>SpringBoot没有自动配置fastjson的<strong>HttpMessageConverter</strong>，因此需要用户自己额外配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.gson.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.config.FastJsonConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.GsonHttpMessageConverter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WJZheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/3/15 17:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> </span>&#123;</span><br><span class="line">    <span class="function">FastJsonHttpMessageConverter <span class="title">httpMessageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FastJsonHttpMessageConverter converter=<span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">        FastJsonConfig config = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">        config.setDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        converter.setFastJsonConfig(config);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode594-643</title>
    <url>/2020/03/09/leetcode594-643/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="LeetCode-探索：发散你的思维"><a href="#LeetCode-探索：发散你的思维" class="headerlink" title="LeetCode 探索：发散你的思维"></a>LeetCode 探索：发散你的思维</h1><a id="more"></a>

<h2 id="594-最长和谐子序列"><a href="#594-最长和谐子序列" class="headerlink" title="[594] 最长和谐子序列"></a>[594] 最长和谐子序列</h2><p><strong>和谐数组是指一个数组里元素的最大值和最小值之间的差别正好是1。</strong></p>
<p><strong>现在，给定一个整数数组，你需要在所有可能的子序列中找到最长的和谐子序列的长度。</strong></p>
<blockquote>
<p>解题思路：使用Hash-Map，以元素值作为key，元素的个数作为value存到map中，然后使用迭代器遍历map，若当前key+1存在，则更新res</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=594 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [594] 最长和谐子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findLHS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums)</span><br><span class="line">            table[n]++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : table)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (table.count(i.first + <span class="number">1</span>))</span><br><span class="line">            {</span><br><span class="line">                res = max(res, table[i.first] + table[i.first + <span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="598-范围求和-II"><a href="#598-范围求和-II" class="headerlink" title="[598] 范围求和 II"></a>[598] 范围求和 II</h2><p><strong>给定一个初始元素全部为 0，大小为 m*n 的矩阵 M 以及在 M 上的一系列更新操作。</strong></p>
<p><strong>操作用二维数组表示，其中的每个操作用一个含有两个正整数 a 和 b的数组表示，含义是将所有符合 0 &lt;= i &lt; a 以及 0 &lt;= j &lt; b 的元素 M[i][j] 的值都增加 1。</strong></p>
<p><strong>在执行给定的一系列操作后，你需要返回矩阵中含有最大整数的元素个数。</strong></p>
<blockquote>
<p>解题思路：只需返回所有操作的坐标的交集即可，即每个操作坐标的最小值</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=598 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [598] 范围求和 II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;ops)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (ops.size() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> m * n;</span><br><span class="line">        <span class="keyword">int</span> x = INT_MAX, y = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; op : ops)</span><br><span class="line">        {</span><br><span class="line">            x = min(x, op[<span class="number">0</span>]);</span><br><span class="line">            y = min(y, op[<span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x * y;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="599-两个列表的最小索引总和"><a href="#599-两个列表的最小索引总和" class="headerlink" title="[599] 两个列表的最小索引总和"></a>[599] 两个列表的最小索引总和</h2><p><strong>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</strong></p>
<p><strong>你需要帮助他们用<u>最少的索引</u>和找出他们<u>共同喜爱的</u>餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</strong></p>
<blockquote>
<p>解题思路：创建一个HashMap，餐厅名字作为key，餐厅出现的次数和其下标作为value。然后用迭代器遍历该HashMap，若餐厅出现的次数大于1时，则进行判断：如果该餐厅的下标小于当前最小下标minIndex时，则将结果清空，并将该餐厅推入结果中；或若该餐厅的下标等于当前最小下标minIndex时，则简单地将其推入结果中。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=599 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [599] 两个列表的最小索引总和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">findRestaurant</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;list1, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;list2)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; table;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> minIndex = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list1.size(); i++)</span><br><span class="line">        {</span><br><span class="line">            table[list1[i]].first++;</span><br><span class="line">            table[list1[i]].second += i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list2.size(); i++)</span><br><span class="line">        {</span><br><span class="line">            table[list2[i]].first++;</span><br><span class="line">            table[list2[i]].second += i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i : table)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (i.second.first &gt; <span class="number">1</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (i.second.second &lt; minIndex)</span><br><span class="line">                {</span><br><span class="line">                    res.clear();</span><br><span class="line">                    res.push_back(i.first);</span><br><span class="line">                    minIndex = i.second.second;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (i.second.second == minIndex)</span><br><span class="line">                    res.push_back(i.first);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="[605] 种花问题"></a>[605] 种花问题</h2><p><strong>假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。</strong></p>
<p><strong>给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。</strong></p>
<blockquote>
<p>解题思路：首先定义一个函数，用于找到当前下标后第一个“1”的位置。</p>
<p>算法步骤：</p>
<ul>
<li><code>front</code>记录的是当前1的位置。<code>front</code>从-2开始，是为了给第一段连续的0预留位置，即当第一段的情况是[0,0,1]时，第一个位置可以种花</li>
<li><code>back</code>是从<code>front+1</code>往后第一个1出现的位置</li>
<li>当<code>back</code>不为-1时，即当前位置后面还有1时，则执行循环</li>
<li>当<code>back - front &gt; 1</code>时，则<code>n -= ((back - front) / 2 - 1)</code></li>
<li>然后更新<code>back</code>和<code>front</code></li>
<li>在最后判断尾部[1,0,0]的情况</li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=605 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [605] 种花问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findOne</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;flowerbed, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; flowerbed.size(); i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (flowerbed[i] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canPlaceFlowers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;flowerbed, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">int</span> front = <span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">int</span> back = findOne(flowerbed, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (back != <span class="number">-1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (back - front &gt; <span class="number">1</span>)</span><br><span class="line">                n -= ((back - front) / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">            front = back;</span><br><span class="line">            back = findOne(flowerbed, front + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (front != flowerbed.size() - <span class="number">1</span> &amp;&amp; back == <span class="number">-1</span>)</span><br><span class="line">            n -= ((flowerbed.size() + <span class="number">1</span> - front) / <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> n &lt;= <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="606-根据二叉树创建字符串"><a href="#606-根据二叉树创建字符串" class="headerlink" title="[606] 根据二叉树创建字符串"></a>[606] 根据二叉树创建字符串</h2><p><strong>你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。</strong></p>
<p><strong>空节点则用一对空括号 “()” 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。</strong></p>
<blockquote>
<p>解题思路：由题意知道，当右子节点为空时，其空括号对可以省略。因此我们有以下处理：</p>
<ul>
<li>若当前节点为空，则返回空串</li>
<li>若当前节点为叶子节点，则返回当前节点的值</li>
<li>若当前节点的右子节点为空，则返回当前节点的值和其左子节点递归</li>
<li>若左右子节点均不为空，则返回当前节点的值和其左右子节点递归</li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=606 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [606] 根据二叉树创建字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}</span></span><br><span class="line"><span class="comment"> * };</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">tree2str</span><span class="params">(TreeNode *t)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;left == <span class="literal">NULL</span> &amp;&amp; t-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> to_string(t-&gt;val);</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;right == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> to_string(t-&gt;val) + <span class="string">"("</span> + tree2str(t-&gt;left) + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">return</span> to_string(t-&gt;val) + <span class="string">"("</span> + tree2str(t-&gt;left) + <span class="string">")("</span> + tree2str(t-&gt;right) + <span class="string">")"</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="[617] 合并二叉树"></a>[617] 合并二叉树</h2><p><strong>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</strong></p>
<p><strong>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则<u>不为 NULL的节点</u>将直接作为新二叉树的节点。</strong></p>
<blockquote>
<p>解题思路：由题意就可以很简单的知道：</p>
<ul>
<li>当两个节点有一个为空或两者都为空时，则返回另外一个</li>
<li>当两个节点都不为空时，则将两个节点的值相加</li>
</ul>
<p>同时递归遍历两棵树，用其中一棵树来储存结果，最后返回其根节点</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=617 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [617] 合并二叉树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}</span></span><br><span class="line"><span class="comment"> * };</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode *<span class="title">mergeTrees</span><span class="params">(TreeNode *t1, TreeNode *t2)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (t1 == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> t2;</span><br><span class="line">        <span class="keyword">if</span> (t2 == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> t1;</span><br><span class="line">        t1-&gt;val += t2-&gt;val;</span><br><span class="line">        t1-&gt;left = mergeTrees(t1-&gt;left, t2-&gt;left);</span><br><span class="line">        t1-&gt;right = mergeTrees(t1-&gt;right, t2-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="628-三个数的最大乘积"><a href="#628-三个数的最大乘积" class="headerlink" title="[628] 三个数的最大乘积"></a>[628] 三个数的最大乘积</h2><p><strong>给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。</strong></p>
<blockquote>
<p>解题思路：先排序，然后返回前两个和最后一个的乘积、最后三个的乘积的最大值。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=628 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [628] 三个数的最大乘积</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maximumProduct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">int</span> size = nums.size();</span><br><span class="line">        <span class="keyword">return</span> max(nums[<span class="number">0</span>] * nums[<span class="number">1</span>] * nums[size - <span class="number">1</span>], nums[size - <span class="number">1</span>] * nums[size - <span class="number">2</span>] * nums[size - <span class="number">3</span>]);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="633-平方数之和"><a href="#633-平方数之和" class="headerlink" title="[633] 平方数之和"></a>[633] 平方数之和</h2><p><strong>给定一个非负整数 <code>c</code> ，你要判断是否存在两个整数 <code>a</code> 和 <code>b</code>，使得 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="10.756ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 4754.1 915.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mn" transform="translate(529, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(1154.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msup" transform="translate(2155, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-62"></use></g><g data-mml-node="mn" transform="translate(429, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(3265.3, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(4321.1, 0)"><use xlink:href="#MJX-TEX-I-63"></use></g></g></g></svg></mjx-container>。</strong></p>
<blockquote>
<p>解题思路：若<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="5.439ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 2404 915.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-63"></use></g><g data-mml-node="mo" transform="translate(655.2, 0)"><use xlink:href="#MJX-TEX-N-2212"></use></g><g data-mml-node="msup" transform="translate(1655.4, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mn" transform="translate(345, 363) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g></g></g></g></svg></mjx-container>为可开平方数，则<code>double(j) == int(j)</code></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=633 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [633] 平方数之和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i * i &lt;= c; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">double</span> j = <span class="built_in">sqrt</span>(c - i * i);</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="keyword">int</span>(j))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="[637] 二叉树的层平均值"></a>[637] 二叉树的层平均值</h2><p><strong>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组.</strong></p>
<blockquote>
<p>解题思路：本题考查的是层次遍历，需要记录节点的高度。因此我们首先定义一个高度函数，并创建两个数组，一个<code>res</code>用于记录每一层的节点值的总和，一个<code>count</code>用于记录每一层的节点数。然后使用深度优先遍历节点，最后将<code>res/count</code>的值返回即可。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=637 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [637] 二叉树的层平均值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}</span></span><br><span class="line"><span class="comment"> * };</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">averageOfLevels</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">int</span> h = height(root);</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">res</span><span class="params">(h)</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">count</span><span class="params">(h)</span></span>;</span><br><span class="line">        DFS(root, <span class="number">0</span>, res, count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h; i++)</span><br><span class="line">            res[i] /= count[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + max(height(root-&gt;left), height(root-&gt;right));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode *node, <span class="keyword">int</span> height, <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; &amp;res, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;count)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        res[height] += node-&gt;val;</span><br><span class="line">        count[height]++;</span><br><span class="line">        DFS(node-&gt;left, height + <span class="number">1</span>, res, count);</span><br><span class="line">        DFS(node-&gt;right, height + <span class="number">1</span>, res, count);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="643-子数组最大平均数-I"><a href="#643-子数组最大平均数-I" class="headerlink" title="[643] 子数组最大平均数 I"></a>[643] 子数组最大平均数 I</h2><p><strong>给定 <code>n</code> 个整数，找出平均数最大且长度为 <code>k</code> 的连续子数组，并输出该最大平均数。</strong></p>
<blockquote>
<p>解题思路：首先计算前<code>k</code>项的和，记为<code>sum</code>。因为是连续子数组，因此从<code>i=k</code>开始遍历，每加上新一个元素，则需要减去子数组的第一个元素，<code>res</code>取当前值和最新值的最大者。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=643 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [643] 子数组最大平均数 I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMaxAverage</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">            sum += nums[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> res = sum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; nums.size(); i++)</span><br><span class="line">        {</span><br><span class="line">            sum += (nums[i] - nums[i - k]);</span><br><span class="line">            res = max(res, sum);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res / k;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-TEX-I-62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-I-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-TEX-I-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></defs></svg>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode557-590</title>
    <url>/2020/03/07/leetcode557-590/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="LeetCode-探索：发散你的思维"><a href="#LeetCode-探索：发散你的思维" class="headerlink" title="LeetCode 探索：发散你的思维"></a>LeetCode 探索：发散你的思维</h1><a id="more"></a>

<h2 id="557-反转字符串中的单词-III"><a href="#557-反转字符串中的单词-III" class="headerlink" title="[557] 反转字符串中的单词 III"></a>[557] 反转字符串中的单词 III</h2><p><strong>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</strong></p>
<blockquote>
<p>解题思路：找到非空格字符和空格字符的位置</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=557 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [557] 反转字符串中的单词 III</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> front = s.find_first_not_of(<span class="string">' '</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> behind = s.find_first_of(<span class="string">' '</span>, front);</span><br><span class="line">        <span class="keyword">while</span> (front != <span class="built_in">string</span>::npos &amp;&amp; behind != <span class="built_in">string</span>::npos)</span><br><span class="line">        &#123;</span><br><span class="line">            reverse(s.begin() + front, s.begin() + behind);</span><br><span class="line">            front = s.find_first_not_of(<span class="string">' '</span>, behind);</span><br><span class="line">            behind = s.find_first_of(<span class="string">' '</span>, front);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (behind == <span class="built_in">string</span>::npos)</span><br><span class="line">            reverse(s.begin() + front, s.end());</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="559-N叉树的最大深度"><a href="#559-N叉树的最大深度" class="headerlink" title="[559] N叉树的最大深度"></a>[559] N叉树的最大深度</h2><p><strong>给定一个 N 叉树，找到其最大深度。</strong></p>
<p><strong>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</strong></p>
<blockquote>
<p>解题思路：根据二叉树的树高公式 1+depth(left)+depth(right) 即可推广出来。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=559 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [559] N叉树的最大深度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(Node *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node *child : root-&gt;children)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> d = maxDepth(child);</span><br><span class="line">            <span class="keyword">if</span> (d &gt; depth)</span><br><span class="line">                depth = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="561-数组拆分-I"><a href="#561-数组拆分-I" class="headerlink" title="[561] 数组拆分 I"></a>[561] 数组拆分 I</h2><p><strong>给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), … , (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。</strong></p>
<blockquote>
<p>解题思路：先排序，然后取每一组的第一个即可</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=561 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [561] 数组拆分 I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">arrayPairSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="563-二叉树的坡度"><a href="#563-二叉树的坡度" class="headerlink" title="[563] 二叉树的坡度"></a>[563] 二叉树的坡度</h2><p><strong>给定一个二叉树，计算整个树的坡度。</strong></p>
<p><strong>一个树的节点的坡度定义即为，该节点左子树的结点之和和右子树结点之和的差的绝对值。空结点的的坡度是0。</strong></p>
<p><strong>整个树的坡度就是其所有节点的坡度之和。</strong></p>
<blockquote>
<p>解题思路：递归计算每一个节点的坡度，然后将其累加起来</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=563 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [563] 二叉树的坡度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> tilt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(TreeNode *node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> L = calculate(node-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> R = calculate(node-&gt;right);</span><br><span class="line">        tilt += <span class="built_in">abs</span>(L - R);</span><br><span class="line">        <span class="keyword">return</span> node-&gt;val + L + R;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTilt</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        calculate(root);</span><br><span class="line">        <span class="keyword">return</span> tilt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="566-重塑矩阵"><a href="#566-重塑矩阵" class="headerlink" title="[566] 重塑矩阵"></a>[566] 重塑矩阵</h2><p><strong>在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。</strong></p>
<p><strong>给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。</strong></p>
<p><strong>重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。</strong></p>
<p><strong>如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</strong></p>
<blockquote>
<p>解题思路：先用一个数组将元素给储存起来，然后再进行重塑</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=566 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [566] 重塑矩阵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">matrixReshape</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;nums, <span class="keyword">int</span> r, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.size() * nums[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">if</span> (r * c != size)</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; row : nums)</span><br><span class="line">            arr.insert(arr.end(), row.begin(), row.end());</span><br><span class="line">        nums.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            nums.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(arr.begin() + (i * c), arr.begin() + ((i + <span class="number">1</span>) * c)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="572-另一个树的子树"><a href="#572-另一个树的子树" class="headerlink" title="[572] 另一个树的子树"></a>[572] 另一个树的子树</h2><p><strong>给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</strong></p>
<blockquote>
<p>解题思路：先编写一个 equals(s, t) 函数用于递归判断以当前节点为根节点的二叉树是否相等，然后再遍历 s 的每一个节点即可。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=572 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [572] 另一个树的子树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">equals</span><span class="params">(TreeNode *s, TreeNode *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">NULL</span> &amp;&amp; t == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">NULL</span> || t == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> s-&gt;val == t-&gt;val &amp;&amp; equals(s-&gt;left, t-&gt;left) &amp;&amp; equals(s-&gt;right, t-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubtree</span><span class="params">(TreeNode *s, TreeNode *t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s != <span class="literal">NULL</span> &amp;&amp; (equals(s, t) || isSubtree(s-&gt;left, t) || isSubtree(s-&gt;right, t));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="575-分糖果"><a href="#575-分糖果" class="headerlink" title="[575] 分糖果"></a>[575] 分糖果</h2><p><strong>给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。</strong></p>
<blockquote>
<p>解题思路：由题意可知，妹妹最多可以分到的糖果不超过 n / 2 ，当种类数小于 n / 2 时，则将所有种类各分一个给妹妹即可。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=575 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [575] 分糖果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">distributeCandies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;candies)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; category;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : candies)</span><br><span class="line">            category.insert(n);</span><br><span class="line">        <span class="keyword">return</span> min(candies.size() / <span class="number">2</span>, category.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="581-最短无序连续子数组"><a href="#581-最短无序连续子数组" class="headerlink" title="[581] 最短无序连续子数组"></a>[581] 最短无序连续子数组</h2><p><strong>给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。</strong></p>
<p><strong>你找到的子数组应是最短的，请输出它的长度。</strong></p>
<blockquote>
<p>解题思路：拷贝该数组并排序，然后顺序查找第一个不同的元素并记录其下标即可。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=581 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [581] 最短无序连续子数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findUnsortedSubarray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">temp</span><span class="params">(nums.begin(), nums.end())</span></span>;</span><br><span class="line">        sort(temp.begin(), temp.end());</span><br><span class="line">        <span class="keyword">int</span> front = <span class="number">0</span>, back = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp[i] != nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                front = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp[i] != nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                back = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> back == front ? <span class="number">0</span> : back - front + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="589-N叉树的前序遍历"><a href="#589-N叉树的前序遍历" class="headerlink" title="[589] N叉树的前序遍历"></a>[589] N叉树的前序遍历</h2><p><strong>给定一个 N 叉树，返回其节点值的前序遍历。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=589 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [589] N叉树的前序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归算法</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorder</span><span class="params">(Node *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(root-&gt;val);</span><br><span class="line">            <span class="keyword">for</span> (Node *child : root-&gt;children)</span><br><span class="line">                preorder(child);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代算法</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">preorder</span><span class="params">(Node *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">stack</span>&lt;Node *&gt; nodes;</span><br><span class="line">        nodes.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!nodes.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            Node *node = nodes.top();</span><br><span class="line">            nodes.pop();</span><br><span class="line">            res.push_back(node-&gt;val);</span><br><span class="line">            <span class="built_in">vector</span>&lt;Node *&gt; temp = node-&gt;children;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = temp.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp[i] != <span class="literal">NULL</span>)</span><br><span class="line">                    nodes.push(temp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="590-N叉树的后序遍历"><a href="#590-N叉树的后序遍历" class="headerlink" title="[590] N叉树的后序遍历"></a>[590] N叉树的后序遍历</h2><p><strong>给定一个 N 叉树，返回其节点值的后序遍历。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=590 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [590] N叉树的后序遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    vector&lt;Node*&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, vector&lt;Node*&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归方法</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">postorder</span><span class="params">(Node *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span> (Node *child : root-&gt;children)</span><br><span class="line">            postorder(child);</span><br><span class="line">        res.push_back(root-&gt;val);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代方法</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">postorder</span><span class="params">(Node *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">stack</span>&lt;Node *&gt; nodes;</span><br><span class="line">        nodes.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!nodes.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            Node *node = nodes.top();</span><br><span class="line">            nodes.pop();</span><br><span class="line">            res.insert(res.begin(), node-&gt;val);</span><br><span class="line">            <span class="keyword">for</span> (Node *child : node-&gt;children)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (child != <span class="literal">NULL</span>)</span><br><span class="line">                    nodes.push(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode507-551</title>
    <url>/2020/03/06/leetcode507-551/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="LeetCode-探索：发散你的思维"><a href="#LeetCode-探索：发散你的思维" class="headerlink" title="LeetCode 探索：发散你的思维"></a>LeetCode 探索：发散你的思维</h1><a id="more"></a>

<h2 id="507-完美数"><a href="#507-完美数" class="headerlink" title="[507] 完美数"></a>[507] 完美数</h2><p><strong>对于一个 正整数，如果它和除了它自身以外的所有正因子之和相等，我们称它为“完美数”。</strong></p>
<p><strong>给定一个 整数 n， 如果他是完美数，返回 True，否则返回 False</strong></p>
<blockquote>
<p>解题思路：在 [1, sqrt(num)] 内从左往右迭代，依次求出num的因子，当 num % i == 0 时，num 的因子有两个：i 和 num / i，但注意当 i * i == num 时的情形，此时因子只有一个。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=507 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [507] 完美数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkPerfectNumber</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n += i;</span><br><span class="line">                <span class="keyword">if</span> (i * i != num)</span><br><span class="line">                    n += num / i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num == n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="[509] 斐波那契数"></a>[509] 斐波那契数</h2><p><strong>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。给定N，计算F(N)。</strong></p>
<blockquote>
<p>解题思路：递归</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=509 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [509] 斐波那契数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(N - <span class="number">1</span>) + fib(N - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="520-检测大写字母"><a href="#520-检测大写字母" class="headerlink" title="[520] 检测大写字母"></a>[520] 检测大写字母</h2><p><strong>给定一个单词，你需要判断单词的大写使用是否正确。</strong></p>
<p><strong>我们定义，在以下情况时，单词的大写用法是正确的：</strong></p>
<ul>
<li><strong>全部字母都是大写，比如”USA”。</strong></li>
<li><strong>单词中所有字母都不是大写，比如”leetcode”。</strong></li>
<li><strong>如果单词不只含有一个字母，只有首字母大写， 比如 “Google”。</strong></li>
<li><strong>否则，我们定义这个单词没有正确使用大写字母。</strong></li>
</ul>
<blockquote>
<p>解题思路：只需对大写字母进行计数即可</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=520 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [520] 检测大写字母</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">detectCapitalUse</span><span class="params">(<span class="built_in">string</span> word)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> up = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : word)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isupper</span>(c))</span><br><span class="line">                up++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> up == <span class="number">0</span> || low == <span class="number">0</span> || (up == <span class="number">1</span> &amp;&amp; <span class="built_in">isupper</span>(word[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="521-最长特殊序列-Ⅰ"><a href="#521-最长特殊序列-Ⅰ" class="headerlink" title="[521] 最长特殊序列 Ⅰ"></a>[521] 最长特殊序列 Ⅰ</h2><p><strong>给定两个字符串，你需要从这两个字符串中找出最长的特殊序列。最长特殊序列定义如下：该序列为某字符串独有的最长子序列（即不能是其他字符串的子序列）。</strong></p>
<p><strong>子序列可以通过删去字符串中的某些字符实现，但不能改变剩余字符的相对顺序。空序列为所有字符串的子序列，任何字符串为其自身的子序列。</strong></p>
<p><strong>输入为两个字符串，输出最长特殊序列的长度。如果不存在，则返回 -1。</strong></p>
<blockquote>
<p>解题思路：当a和b相等时，此时不存在最长特殊序列，返回-1；当a和b的长度不相等时，较长字符串不可能是较短字符串的子串，因此最长特殊序列则为较长字符串本身。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=521 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [521] 最长特殊序列 Ⅰ</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findLUSlength</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> max(a.length(), b.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="[530] 二叉搜索树的最小绝对差"></a>[530] 二叉搜索树的最小绝对差</h2><p><strong>给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=530 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [530] 二叉搜索树的最小绝对差</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val; </span></span><br><span class="line"><span class="comment"> *     TreeNode *left; </span></span><br><span class="line"><span class="comment"> *     TreeNode *right; </span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(TreeNode *root, <span class="keyword">int</span> &amp;pre, <span class="keyword">int</span> &amp;diff)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        travel(root-&gt;left, pre, diff);</span><br><span class="line">        <span class="keyword">if</span> (pre &gt;= <span class="number">0</span>)</span><br><span class="line">            diff = min(diff, root-&gt;val - pre);</span><br><span class="line">        pre = root-&gt;val;</span><br><span class="line">        travel(root-&gt;right, pre, diff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> diff = INT32_MAX;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">-1</span>;</span><br><span class="line">        travel(root, pre, diff);</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="532-数组中的K-diff数对"><a href="#532-数组中的K-diff数对" class="headerlink" title="[532] 数组中的K-diff数对"></a>[532] 数组中的K-diff数对</h2><p><strong>给定一个整数数组和一个整数 k, 你需要在数组里找到不同的 k-diff 数对。这里将 k-diff 数对定义为一个整数对 (i, j), 其中 i 和 j 都是数组中的数字，且两数之差的绝对值是 k.</strong></p>
<blockquote>
<p>解题思路：利用set的元素唯一性的特性</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=532 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [532] 数组中的K-diff数对</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.size() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; sets;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + k == nums[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    sets.insert(&#123;nums[i], nums[j]&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sets.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="[538] 把二叉搜索树转换为累加树"></a>[538] 把二叉搜索树转换为累加树</h2><p><strong>给定一个二叉搜索树（Binary Search Tree），把它转换成为累加树（Greater Tree)，使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</strong></p>
<blockquote>
<p>解题思路：由BST的特性可知，右子树的值大于根节点的值，因此需要用到反序中序遍历，即先遍历右子树，后遍历根节点，最后遍历左子树，从右边开始累加起来，最后回溯的时候赋值。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=538 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [538] 把二叉搜索树转换为累加树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val; </span></span><br><span class="line"><span class="comment"> *     TreeNode *left; </span></span><br><span class="line"><span class="comment"> *     TreeNode *right; </span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归方法：反序中序遍历，即先遍历右子树，再遍历根节点，最后遍历左子树</span></span><br><span class="line">    <span class="function">TreeNode *<span class="title">convertBST</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        convertBST(root-&gt;right);</span><br><span class="line">        sum += root-&gt;val;</span><br><span class="line">        root-&gt;val = sum;</span><br><span class="line">        convertBST(root-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代方法：使用栈来对树进行回溯</span></span><br><span class="line">    <span class="function">TreeNode *<span class="title">convertBST</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode *&gt; st;</span><br><span class="line">        TreeNode *node = root;</span><br><span class="line">        <span class="keyword">while</span> (!st.empty() || node != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                st.push(node);</span><br><span class="line">                node = node-&gt;right;</span><br><span class="line">            &#125;</span><br><span class="line">            node = st.top();</span><br><span class="line">            st.pop();</span><br><span class="line">            sum += node-&gt;val;</span><br><span class="line">            node-&gt;val = sum;</span><br><span class="line">            node = node-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="[541] 反转字符串 II"></a>[541] 反转字符串 II</h2><p><strong>给定一个字符串和一个整数 k，你需要对从字符串开头算起的每个 2k 个字符的前k个字符进行反转。如果剩余少于 k 个字符，则将剩余的所有全部反转。如果有小于 2k 但大于或等于 k 个字符，则反转前 k 个字符，并将剩余的字符保持原样。</strong></p>
<blockquote>
<p>解题思路：只需要记录需要反转的子串的下标即可</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=541 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [541] 反转字符串 II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseStr</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i * <span class="number">2</span> * k &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> start = i * <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">int</span> temp = (i + <span class="number">1</span>) * <span class="number">2</span> * k;</span><br><span class="line">            <span class="keyword">int</span> end = (temp + start) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (end &gt; s.length())</span><br><span class="line">                end = s.length();</span><br><span class="line">            reverse(s.begin() + start, s.begin() + end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="[543] 二叉树的直径"></a>[543] 二叉树的直径</h2><p><strong>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。</strong></p>
<blockquote>
<p>解题思路：任意一条路径可以被写成两个箭头（不同方向），每个箭头代表一条从某些点向下遍历到孩子节点的路径。假设我们知道对于每个节点最长箭头距离分别为 L, R，那么最优路径经过 L + R + 1 个节点。<br>按照常用方法计算一个节点的深度：max(depth of node.left, depth of node.right) + 1。在计算的同时，经过这个节点的路径长度为 1 + (depth of node.left) + (depth of node.right) 。搜索每个节点并记录这些路径经过的点数最大值count，期望长度是 count - 1。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=543 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [543] 二叉树的直径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val; </span></span><br><span class="line"><span class="comment"> *     TreeNode *left; </span></span><br><span class="line"><span class="comment"> *     TreeNode *right; </span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dia = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">travel</span><span class="params">(TreeNode *node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> L = travel(node-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> R = travel(node-&gt;right);</span><br><span class="line">        dia = max(dia, L + R + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + max(L, R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        travel(root);</span><br><span class="line">        <span class="keyword">return</span> dia - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="551-学生出勤记录-I"><a href="#551-学生出勤记录-I" class="headerlink" title="[551] 学生出勤记录 I"></a>[551] 学生出勤记录 I</h2><p><strong>给定一个字符串来代表一个学生的出勤记录，这个记录仅包含以下三个字符：</strong></p>
<ul>
<li><strong>‘A’ : Absent，缺勤</strong></li>
<li><strong>‘L’ : Late，迟到</strong></li>
<li><strong>‘P’ : Present，到场</strong></li>
<li><strong>如果一个学生的出勤记录中不超过一个’A’(缺勤)并且不超过两个连续的’L’(迟到), 那么这个学生会被奖赏。</strong></li>
</ul>
<p><strong>你需要根据这个学生的出勤记录判断他是否会被奖赏。</strong></p>
<blockquote>
<p>解题思路：首先记录A的数量，其次记录连续的L的数量，当遇到连续的L但其数量小于等于2时，将其置为0重新计数</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=551 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [551] 学生出勤记录 I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">checkRecord</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> A = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> L = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'A'</span>)</span><br><span class="line">                A++;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'L'</span>)</span><br><span class="line">                L++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (L &lt;= <span class="number">2</span>)</span><br><span class="line">                L = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A &lt;= <span class="number">1</span> &amp;&amp; L &lt;= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>MachineVision-1</title>
    <url>/2020/03/05/MachineVision-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写！！！</p>
<a id="more"></a>

<h1 id="第一章-视觉计算中的数据"><a href="#第一章-视觉计算中的数据" class="headerlink" title="第一章 视觉计算中的数据"></a>第一章 视觉计算中的数据</h1><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p>数据空间：由n维属性和m个元素组成的数据集所构成的多维信息空间</p>
</li>
<li><p>数据开发：指利用算法和工具对数据进行定量的推演和计算</p>
</li>
<li><p>数据分析：指对多维数据进行切片、块、旋转等动作剖析数据，从而能多角度多方面观察数据</p>
</li>
<li><p>数据可视化：指将大型数据集中的数据以图像形式表示，并利用数据分析和开发工具发现其中未知信息的处理过程</p>
</li>
<li><p>可视化算法与技术方法</p>
</li>
<li><p>立体可视化</p>
</li>
<li><p>信息可视化</p>
</li>
<li><p>多分辨率方法</p>
</li>
<li><p>建模技术方法</p>
</li>
<li><p>交互技术方法与体系架构</p>
</li>
</ul>
<h2 id="数据离散化"><a href="#数据离散化" class="headerlink" title="数据离散化"></a>数据离散化</h2><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><ul>
<li>均匀采样：指将一副二维连续图像 <strong>(f,x,y)</strong> 的连续二位图像平面在x方向和y方向上进行等间距划分。从而将该二维图像平面划分为 <strong>M * N</strong> 个网络，并且各网络中心点的位置与一堆是证书表示的笛卡尔坐标 <strong>(i,j)</strong> 相对于的过程。</li>
</ul>
<h3 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h3><h2 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h2><h3 id="时域（空域）表示"><a href="#时域（空域）表示" class="headerlink" title="时域（空域）表示"></a>时域（空域）表示</h3><p><strong>普通音频数据：</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex" xmlns="http://www.w3.org/2000/svg" width="24.535ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 10844.6 1209.9" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-41"></use></g><g data-mml-node="mo" transform="translate(750, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1139, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(1500, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(2166.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(3222.6, 0)"><use xlink:href="#MJX-TEX-I-73"></use></g><g data-mml-node="mi" transform="translate(3691.6, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(4036.6, 0)"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mo" transform="translate(4636.6, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(5025.6, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(5386.6, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(5997.8, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="mfrac" transform="translate(6998, 0)"><g data-mml-node="mn" transform="translate(220, 394) scale(0.707)"><use xlink:href="#MJX-TEX-N-31"></use></g><g data-mml-node="mn" transform="translate(220, -345) scale(0.707)"><use xlink:href="#MJX-TEX-N-32"></use></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(7791.6, 0)"><use xlink:href="#MJX-TEX-I-73"></use></g><g data-mml-node="mi" transform="translate(8260.6, 0)"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mi" transform="translate(8605.6, 0)"><use xlink:href="#MJX-TEX-I-6E"></use></g><g data-mml-node="mo" transform="translate(9205.6, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(9594.6, 0)"><use xlink:href="#MJX-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(10094.6, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(10455.6, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></svg></mjx-container></p>
<h3 id="频域表示"><a href="#频域表示" class="headerlink" title="频域表示"></a>频域表示</h3><p><strong>频域：将信号堪称一组更加基础的信号（如正余弦波）的混合（如线性组合）</strong></p>
<p><strong>信号可以表示为基础信号组合成原始信号的组合系数</strong></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="23.32ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 10307.5 2808.5" xmlns:xlink="http://www.w3.org/1999/xlink"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-63"></use></g><g data-mml-node="mo" transform="translate(433, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(822, 0)"><use xlink:href="#MJX-TEX-I-74"></use></g><g data-mml-node="mo" transform="translate(1183, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(1849.8, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="munderover" transform="translate(2905.6, 0)"><g data-mml-node="mo"><use xlink:href="#MJX-TEX-LO-2211"></use></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-69"></use></g><g data-mml-node="mo" transform="translate(345, 0)"><use xlink:href="#MJX-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1123, 0)"><use xlink:href="#MJX-TEX-N-31"></use></g></g><g data-mml-node="TeXAtom" transform="translate(368.4, 1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-N-221E"></use></g></g></g><g data-mml-node="msub" transform="translate(4516.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-61"></use></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mi" transform="translate(5339.2, 0)"><use xlink:href="#MJX-TEX-I-63"></use></g><g data-mml-node="mi" transform="translate(5772.2, 0)"><use xlink:href="#MJX-TEX-I-6F"></use></g><g data-mml-node="mi" transform="translate(6257.2, 0)"><use xlink:href="#MJX-TEX-I-73"></use></g><g data-mml-node="mo" transform="translate(6726.2, 0)"><use xlink:href="#MJX-TEX-N-28"></use></g><g data-mml-node="msub" transform="translate(7115.2, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-66"></use></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mo" transform="translate(8121.3, 0)"><use xlink:href="#MJX-TEX-N-2B"></use></g><g data-mml-node="msub" transform="translate(9121.6, 0)"><g data-mml-node="mi"><use xlink:href="#MJX-TEX-I-70"></use></g><g data-mml-node="mi" transform="translate(503, -150) scale(0.707)"><use xlink:href="#MJX-TEX-I-69"></use></g></g><g data-mml-node="mo" transform="translate(9918.5, 0)"><use xlink:href="#MJX-TEX-N-29"></use></g></g></g></svg></mjx-container></p>
<h3 id="几何数据"><a href="#几何数据" class="headerlink" title="几何数据"></a>几何数据</h3><ul>
<li>显示表示</li>
<li>隐式表示</li>
<li>参数化表示</li>
</ul>
<p>在几何数据的离散化表示中，不同于解析表示。一个几何实体用一组其他几何实体的集合表示。（如一个二位正方形可以定义为二位空间中一组线的表示）</p>
<p>构成网格的实体（如线、三角形或四边形）我们称为<strong>基元</strong></p>
<h2 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h2><h3 id="随机噪声"><a href="#随机噪声" class="headerlink" title="随机噪声"></a>随机噪声</h3><p><strong>低通滤波</strong>是去除数据中的随机噪声的一种常用技术。</p>
<h3 id="椒盐噪声"><a href="#椒盐噪声" class="headerlink" title="椒盐噪声"></a>椒盐噪声</h3><p><strong>中值滤波器</strong>或者其他<strong>顺序统计滤波器能够较好地处理这样的异常值</strong></p>
<p>采用<strong>陷波滤波器</strong>去除频域噪声</p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs><path id="MJX-TEX-I-41" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-TEX-I-74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path><path id="MJX-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-TEX-I-73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path><path id="MJX-TEX-I-69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-I-6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-TEX-I-63" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path><path id="MJX-TEX-LO-2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path><path id="MJX-TEX-N-221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path><path id="MJX-TEX-I-61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-TEX-I-6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-TEX-I-66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-TEX-I-70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs></svg>]]></content>
      <categories>
        <category>机器视觉</category>
      </categories>
      <tags>
        <tag>机器视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-ⅩⅣ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A9%E2%85%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="第14章-并发"><a href="#第14章-并发" class="headerlink" title="第14章 并发"></a>第14章 并发</h1><hr>
<ul>
<li>什么是线程</li>
<li>中断线程</li>
<li>线程状态</li>
<li>线程属性</li>
<li>同步</li>
<li>阻塞队列</li>
<li>线程安全的集合</li>
<li>Callable与Future</li>
<li>执行器</li>
<li>同步器</li>
<li>线程与Swing</li>
</ul>
<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>线程是操作系统能够进行运算调度的最小单位。一个进程中可以并发多个线程，每条线程并行执行不同的任务。在同一个进程中的所有线程共享进程的<strong>堆</strong>和<strong>方法区</strong>，但每个线程都有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>。</p>
<h2 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h2><p>当线程的run<strong>方法执行完毕</strong>或者<strong>在方法中出现了没有捕获的异常</strong>时，线程将终止。没有可以强制线程终止的方法，然而，interrupt方法可以用来请求终止线程（当对一个线程调用 interrupt 方法时，线程的中断状态将被置位。这是每一个线程都具有的 boolean 标志。每个线程都应该不时地检査这个标志，以判断线程是否被中断）。</p>
<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>线程可以有如下6种状态：</p>
<ul>
<li>New（新创建）</li>
<li>Runnable（可运行）</li>
<li>Blocked（被阻塞）</li>
<li>Waiting（等待）</li>
<li>Timed waiting（计时等待）</li>
<li>Terminated（被终止）</li>
</ul>
<p>要确定一个线程的当前状态，调用getState方法。</p>
<h3 id="新创建线程"><a href="#新创建线程" class="headerlink" title="新创建线程"></a>新创建线程</h3><p>当用 new 操作符创建一个新线程时，如 newThread(r)， 该线程还没有开始运行。这意味着它的状态是 new。当一个线程处于新创建状态时，程序还没有开始运行线程中的代码。在线程运行之前还有一些基础工作要做。</p>
<h3 id="可运行线程"><a href="#可运行线程" class="headerlink" title="可运行线程"></a>可运行线程</h3><p>一旦调用 start 方法，线程处于 runnable 状态。一个可运行的线桿可能正在运行也可能没有运行， 这取决于操作系统给线程提供运行的时间。（Java 的规范说明没有将它作为一个单独状态。一个正在运行中的线程仍然处于可运行状态。）</p>
<p>一旦一个线程开始运行，它不必始终保持运行。事实上，运行中的线程被中断，目的是为了让其他线程获得运行机会。线程调度的细节依赖于操作系统提供的服务。<strong>抢占式调度系统给每一个可运行线程一个时间片来执行任务。当时间片用完，操作系统剥夺该线程的运行权， 并给另一个线程运行机会（见图 14-4 )。当选择下一个线程时， 操作系统考虑线程的优先级。</strong></p>
<h3 id="被阻塞线程和等待线程"><a href="#被阻塞线程和等待线程" class="headerlink" title="被阻塞线程和等待线程"></a>被阻塞线程和等待线程</h3><p>11</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅸ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写！！！</p>
<a id="more"></a>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅷ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写！！！</p>
<a id="more"></a>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅶ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅵ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写！！！</p>
<a id="more"></a>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅴ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写！！！</p>
<a id="more"></a>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅳ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写</p>
<a id="more"></a>

<h1 id="第4章-对象与类"><a href="#第4章-对象与类" class="headerlink" title="第4章 对象与类"></a>第4章 对象与类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅲ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写</p>
<a id="more"></a>

<h1 id="第3章-Java-的基本程序设计结构"><a href="#第3章-Java-的基本程序设计结构" class="headerlink" title="第3章 Java 的基本程序设计结构"></a>第3章 Java 的基本程序设计结构</h1><hr>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">字节数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">int</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">byte</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">单个boolean变量是4字节<br>boolean数组的每一个值是1字节</td>
</tr>
</tbody></table>
<h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>在Java中，整型的范围与运行Java代码的机器无关。而C和C++则需要针对不同的处理器选择最为高效的整型。</p>
<p>长整型数值有一个后缀L或l（如9000000000000L）。十六进制数值有一个前缀0x或0X（如0xCAFE）。八进制数值有一个前缀0（如010对应八进制中的8）。</p>
<p>从Java7开始，加上前缀0b或0B就可以写二进制数（如0b1001对应二进制中的9）。同时还可以为数字字面量添加下划线（如0b111_0110_0100_0000_1001_0111），这些下划线只是为了让人们更易读，Java编译器会除去这些下划线。</p>
<h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><p><strong>浮点类型用于表示有小数部分的数值。</strong>double类型表示的数值精度是float类型的两倍，绝大部分的程序都使用double类型。</p>
<p>float类型的数值有一个后缀F或f，没有后缀F或f的浮点数值默认为double类型。当然，也可以在浮点数值后添加后缀D或d。</p>
<h4 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h4><p>char类型用于表示单个字符。有些Unicode字符可以用一个char值描述。</p>
<h4 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h4><p>boolean（布尔）类型有两个值：<strong>false</strong> 和 <strong>true</strong>，用来判定逻辑条件。整型值和布尔值之间不能进行互相转换。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量名必须是一个以字符开头并由字符或数字构成的序列。其中，字符包括：’A’ ~ ‘Z’、’a’ ~ ‘z’、’_’、’$’或在某种语言中表示字母的任何Unicode字符。</p>
<h4 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h4><p>声明一个变量后，必须使用赋值语句对变量进行显式初始化，不要使用未初始化的变量。</p>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>在Java中，利用关键字 <strong>final</strong> 指示常量。关键字 <strong>final</strong> 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用全大写。</p>
<p>在 Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为类常量。可以使用关键字 <strong>static final</strong> 设置一个类常量。</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>在 Java 中，使用算术运算符 +、-、 *、/ 表示加、减、 乘、除运算。 当参与 / 运算的两个操作数都是整数时， 表示整数除法；否则， 表示浮点除法。 整数的求余操作（有时称为取模) 用 ％ 表示。例如，15/2=7，15%2=1 , 15.0/2=7.50。</p>
<p>需要注意， 整数被 0 除将会产生一个异常， 而浮点数被 0 除将会得到无穷大或 NaN 结果。</p>
<h4 id="数学函数与常量"><a href="#数学函数与常量" class="headerlink" title="数学函数与常量"></a>数学函数与常量</h4><p>在Math类中，包含了各种各样的数学函数和数学常量。</p>
<h4 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h4><p><img src="/" class="lazyload" data-src="F:%5CBlog%5Cblog%5Csource%5Cimages%5C0001.PNG"  alt="1"></p>
<p><strong>数值类型转换的规则</strong></p>
<ul>
<li>如果两个操作数中有一个是 double 类型，另一个操作数就会转换为 double 类型。</li>
<li>否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型。</li>
<li>否则，如果其中一个操作数是 long 类型，另一个操作数将会转换为 long 类型。</li>
<li>否则，两个操作数都将被转换为 int 类型。</li>
</ul>
<h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><p>在上一小节中看到，在必要的时候，int 类型的值将会自动地转换为 double 类型。但另一方面，有时也需要将 double 转换成int。在 Java 中，允许进行这种数值之间的类型转换。当然，有可能会丢失一些信息。在这种情况下，需要通过强制类型转换（cast）实现这个操作。强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。</p>
<h4 id="结合赋值和运算符"><a href="#结合赋值和运算符" class="headerlink" title="结合赋值和运算符"></a>结合赋值和运算符</h4><p>可以在赋值中使用二元运算符。如+=、-=、%=、^=等等。</p>
<h4 id="自增与自减运算符"><a href="#自增与自减运算符" class="headerlink" title="自增与自减运算符"></a>自增与自减运算符</h4><p>后缀和前缀形式都会使变量值加 1 或减 1。但用在表达式中时，二者就有区别了。前缀形式会先完成加 1；而后缀形式会使用变量原来的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span> * ++m;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span> * n++;</span><br></pre></td></tr></table></figure>

<h4 id="关系和-boolean-运算符"><a href="#关系和-boolean-运算符" class="headerlink" title="关系和 boolean 运算符"></a>关系和 boolean 运算符</h4><p>关系运算符有==、!=、&gt;、&lt;、&gt;=、&lt;=、&amp;&amp;、||等</p>
<p>Java支持三元操作符 <strong>? :</strong> ，遵循以下格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">condition ? expressioni : expression</span><br></pre></td></tr></table></figure>

<h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>处理整型类型时，可以直接对组成整型数值的各个位完成操作。这意味着可以使用掩码技术得到整数中的各个位。位运算符包括：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&amp;(<span class="string">"and"</span>)  |(<span class="string">"or"</span>)  ^(<span class="string">"xor"</span>)  ~(<span class="string">"not"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="括号与运算符级别"><a href="#括号与运算符级别" class="headerlink" title="括号与运算符级别"></a>括号与运算符级别</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a &amp;&amp; b || c <span class="comment">//从左到右</span></span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="F:%5CBlog%5Cblog%5Csource%5Cimages%5C0002.PNG"  alt="0002"></p>
<h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><p>枚举类型包括有限个命名的值。 例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Size &#123;SMALL, MEDIUM, LARGE&#125; <span class="comment">//自定义枚举类型</span></span><br><span class="line"></span><br><span class="line">Size s = Size.MEDIUM <span class="comment">//声明枚举变量</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//Size类型的变量只能存储这个类型声明中给定的某个枚举值，或者null值，null表示这个变量没有设置任何值。</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>从概念上讲， Java 字符串就是 Unicode 字符序列。Java 没有内置的字符串类型， 而是在标准 Java 类库中提供了一个预定义类，很自然地叫做 String。</p>
<h4 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h4><p>String 类的 substring 方法可以从一个较大的字符串提取出一个子串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String greeting = <span class="string">"Hello"</span>;</span><br><span class="line">String s = greeting.substring(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">//s = "Hel"</span></span><br></pre></td></tr></table></figure>

<h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><p>与绝大多数的程序设计语言一样，Java语言允许使用 + 号连接（拼接）两个字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String expletive = <span class="string">"Expletive"</span>;</span><br><span class="line">String PC13 = <span class="string">"deleted"</span>;</span><br><span class="line">String message = expletive + PC13;</span><br></pre></td></tr></table></figure>

<p>当将一个字符串与一个非字符串的值进行拼接时，后者被转换成字符串（在第 5 章中可以看到，任何一个 Java 对象都可以转换成字符串）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">13</span>;</span><br><span class="line">String rating = <span class="string">"PC"</span> + age; <span class="comment">//rating = "PC13"</span></span><br></pre></td></tr></table></figure>

<p>如果需要把多个字符串放在一起， 用一个定界符分隔，可以使用静态 join 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String all = String.join(<span class="string">" / "</span>, <span class="string">"S"</span>, <span class="string">"M"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>);</span><br><span class="line"><span class="comment">// all is the string "S / H / L / XL"</span></span><br></pre></td></tr></table></figure>

<h4 id="不可变字符串"><a href="#不可变字符串" class="headerlink" title="不可变字符串"></a>不可变字符串</h4><p>String 类没有提供用于修改字符串的方法6 如果希望将 greeting 的内容修改为“ Help!”，不能直接地将 greeting 的最后两个位置的字符修改为‘ p ’ 和’ ! ‘。如何修改这个字符串呢？ 在 Java中实现这项操作非常容易。首先提取需要的字符， 然后再拼接上替换的字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">greeting = greeting.substring(<span class="number">0</span>, <span class="number">3</span>) + <span class="string">"p!"</span>;</span><br><span class="line"><span class="comment">//上面这条语句将 greeting 当前值修改为“Help!”。</span></span><br></pre></td></tr></table></figure>

<p>由于不能修改 Java 字符串中的字符， 所以在 Java 文档中将 String 类对象称为<strong>不可变字符串</strong>， 如同数字3永远是数字3—样，字符串“ Hello” 永远包含字符 H、e、1、1 和 o 的代码单元序列， 而不能修改其中的任何一个字符。当然，可以修改字符串变量 greeting，让它引用另外一个字符串，这就如同可以将存放 3 的数值变量改成存放 4 一样。</p>
<p><strong>不可变字符串却有一个优点：编译器可以让字符串共享。</strong>为了弄清具体的工作方式，可以想象将各种字符串存放在公共的存储池中。字符串变量指向存储池中相应的位置。如果复制一个字符串量，原始字符串与复制的字符串共享相同的字符。</p>
<p>如果将 greeting 赋予另外一个值又会怎样呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">greeting = <span class="string">"Howdy"</span>;</span><br><span class="line"><span class="comment">//这样做会不会产生内存遗漏呢？毕竞，原始字符串放置在堆中。十分幸运，Java将自动地进行垃圾回收。如果一块内存不再使用了，系统最终会将其回收。</span></span><br></pre></td></tr></table></figure>

<h4 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h4><p>可以使用 equals 方法检测两个字符串是否相等。对于表达式： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s.equals(t)</span><br><span class="line"><span class="comment">//如果字符串s与字符串t相等，则返回true;否则，返回false。需要注意，s与t可以是字符串变量， 也可以是字符串字面量。</span></span><br></pre></td></tr></table></figure>

<p>一定不要使用=运算符检测两个字符串是否相等！ 这个运算符只能够确定两个字串是否放置在同一个位置上。(即是否引用的是同一块内存区域)</p>
<h4 id="空船与null串"><a href="#空船与null串" class="headerlink" title="空船与null串"></a>空船与null串</h4><p>空串 “” 是长度为 0 的字符串。可以调用以下代码检查一个字符串是否为空：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.lengthQ = <span class="number">0</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">""</span>))</span><br></pre></td></tr></table></figure>

<p>空串是一个 Java 对象，有自己的串长度（0）和内容（空）。不过，String 变量还可以存放一个特殊的值，名为 null, 这表示目前没有任何对象与该变量关联（关于 null 的更多信息请参见第 4 章)。要检查一个字符串是否为 null, 要使用以下条件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure>

<h4 id="构建字符串"><a href="#构建字符串" class="headerlink" title="构建字符串"></a>构建字符串</h4><p>有些时候， 需要由较短的字符串构建字符串， 例如， 按键或来自文件中的单词。采用字符串连接的方式达到此目的效率比较低。每次连接字符串， 都会构建一个新的 String 对象，既耗时， 又浪费空间。使用 StringBuildei•类就可以避免这个问题的发生。</p>
<p>如果需要用许多小段的字符串构建一个字符串， 那么应该按照下列步骤进行。 首先， 构建一个空的字符串构建器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilderO;</span><br></pre></td></tr></table></figure>

<p>当每次需要添加一部分内容时， 就调用 append 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">builder.append(ch); <span class="comment">// appends a single character</span></span><br><span class="line">bui1der.append(str); <span class="comment">// appends a string</span></span><br></pre></td></tr></table></figure>

<p>在需要构建字符串时就凋用 toString 方法， 将可以得到一个 String 对象， 其中包含了构建器中的字符序列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String completedString = builder.toStringO;</span><br></pre></td></tr></table></figure>

<p><strong>StringBuffer和StringBuilder的区别</strong>：</p>
<ul>
<li>StringBuffer的效率较低，但允许采用多线程的方式执行添加或删除字符的操作</li>
<li>如果所有字符串在一个单线程中编辑（通常都是这样），则应该用StringBuilder代替</li>
<li>两个类的API是相同的</li>
</ul>
<h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><h4 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h4><p>要想通过控制台进行输人，首先需要构造一个 Scanner 对象，并与“ 标准输人流” System.in 关联。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>

<p>现在，就可以使用 Scanner 类的各种方法实现输入操作了。例如， nextLine 方法将输入一行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = in.nextLine();</span><br></pre></td></tr></table></figure>

<p>使用 nextLine 方法是因为在输人行中有可能包含空格。要想读取一个单词（以空白符作为分隔符，) 就调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String firstName = in.next()；</span><br></pre></td></tr></table></figure>

<p>要想读取一个整数，就调用 nextlnt 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = in.nextlnt();</span><br></pre></td></tr></table></figure>

<h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>可以使用 SyStem.0Ut.print(x) 将数值 x 输出到控制台上。这条命令将以 x 对应的数据类型所允许的最大非 0 数字位数打印输出 X。 例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">10000.0</span> / <span class="number">3.0</span>;</span><br><span class="line">System.out.print(x);  <span class="comment">//打印3333.3333333333335</span></span><br></pre></td></tr></table></figure>

<p>格式化输出可使用<strong>System.out.printf</strong>，在printf中，可以使用多个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">"Hello, %s. Next year, you'll be SSd"</span>, name, age);</span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="F:%5CBlog%5Cblog%5Csource%5Cimages%5C0003.PNG"  alt="0003"></p>
<h4 id="文件输入与输出"><a href="#文件输入与输出" class="headerlink" title="文件输入与输出"></a>文件输入与输出</h4><p>要想对文件进行读取，就需要一个用 File 对象构造一个 Scanner 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(Paths.get(<span class="string">"niyflle.txt"</span>), <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>

<p>要想写入文件， 就需要构造一个 PrintWriter 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter out = <span class="keyword">new</span> PrintlulriterC<span class="string">'myfile.txt", "UTF-8");</span></span><br></pre></td></tr></table></figure>

<p>要记住一点：如果用一个不存在的文件构造一个 Scanner，或者用一个不能被创建的文件名构造一个 PrintWriter，那么就会发生异常。</p>
<h3 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h3><h4 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h4><p>块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句。块确定了变量的作用域。一个块可以嵌套在另一个块中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">int</span> k; </span><br><span class="line">	&#125; 	<span class="comment">// k is only defined up to here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) statement1 <span class="keyword">else</span> statement2</span><br></pre></td></tr></table></figure>

<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> statement <span class="keyword">while</span> (condition)</span><br></pre></td></tr></table></figure>

<h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (statement1; condition; statement2)</span><br><span class="line">    statement3;</span><br></pre></td></tr></table></figure>

<h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>switch语句将从与选项值相匹配的 case 标签处开始执行直到遇到 break 语句，或者执行到switch i吾句的结束处为止。如果没有相匹配的 case 标签，而有 default 子句，就执行这个子句。（如果在case分支没有break语句的话，那么会接着执行下一个case分支）。</p>
<p>case标签可以是：</p>
<ul>
<li>类型为 char、byte、 short 或 int 的常量表达式。</li>
<li>枚举常量</li>
<li>从 Java SE 7开始， case 标签还可以是字符串字面量。</li>
</ul>
<h3 id="大数值"><a href="#大数值" class="headerlink" title="大数值"></a>大数值</h3><p>如果基本的整数和浮点数精度不能够满足需求，那么可以使用java.math 包中的两个很有用的类：Biglnteger 和 BigDecimal 这两个类可以处理包含任意长度数字序列的数值。Biglnteger 类实现了任意精度的整数运算，BigDecimal 实现了任意精度的浮点数运算。</p>
<p>使用静态的 valueOf方法可以将普通的数值转换为大数值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Biglnteger a = Biglnteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p>不能使用人们熟悉的算术运算符（如：+ 和 *) 处理大数值。 而需要使用大数值类中的 add 和 multiply 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Biglnteger c = a.add(b); <span class="comment">// c = a + b</span></span><br><span class="line">Biglnteger d = c.multiply(b.add(Biglnteger.valueOf(<span class="number">2</span>))); <span class="comment">// d = c * (b + 2)</span></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是一种数据结构， 用来存储同一类型值的集合。通过一个整型下标可以访问数组中的每一个值。在声明数组变量时， 需要指出数组类型 （ 数据元素类型紧跟 []) 和数组变量的名字。下面声明了整型数组 <strong>a</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a;</span><br></pre></td></tr></table></figure>

<p>不过， 这条语句只声明了变量 <strong>a</strong>， 并没有将 <strong>a</strong> 初始化为一个真正的数组。应该使用 <strong>new</strong> 运算符创建数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>]; <span class="comment">//数组长度不要求是常量：newint[n]会创建一个长度为n的数组。</span></span><br></pre></td></tr></table></figure>

<h4 id="数组初始化以及匿名数组"><a href="#数组初始化以及匿名数组" class="headerlink" title="数组初始化以及匿名数组"></a>数组初始化以及匿名数组</h4><p>在 Java中， 提供了一种创建数组对象并同时赋予初始值的简化书写形式。下面是一 例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] smallPrimes = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span> &#125;; </span><br><span class="line"><span class="comment">//请注意， 在使用这种语句时，不需要调用 new。</span></span><br></pre></td></tr></table></figure>

<p>甚至还可以初始化一个匿名的数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;</span><br></pre></td></tr></table></figure>

<p>使用这种语法形式可以在不创建新变量的情况下重新初始化一个数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">smallPrimes = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span> &#125;;</span><br></pre></td></tr></table></figure>

<h4 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h4><p>在 Java 中，允许将一个数组变量拷贝给另一个数组变量。这时，两个变量将引用同一个数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] luckyNumbers = smallPrimes; </span><br><span class="line">luckyNumbers[<span class="number">5</span>] = <span class="number">12</span>; <span class="comment">// now smallPrimes[5] is also 12</span></span><br></pre></td></tr></table></figure>

<p><img src="/" class="lazyload" data-src="F:%5CBlog%5Cblog%5Csource%5Cimages%5C0004.PNG"  alt="0004"></p>
<p><img src="/" class="lazyload" data-src="http://static.runoob.com/images/demo/demo1.jpg"  alt="text"></p>
<p>如果希望将一个数组的所有值拷贝到一个新的数组中去，就要使用 Arrays 类的 copyOf方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅱ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写！！！</p>
<a id="more"></a>

<h1 id="第-2-章-Java-程序设计环境"><a href="#第-2-章-Java-程序设计环境" class="headerlink" title="第 2 章 Java 程序设计环境"></a>第 2 章 Java 程序设计环境</h1><h2 id="安装Java开发工具包"><a href="#安装Java开发工具包" class="headerlink" title="安装Java开发工具包"></a>安装Java开发工具包</h2><ul>
<li>下载JDK</li>
<li>设置JDK的环境变量</li>
<li>安装库源文件和文档</li>
</ul>
<h2 id="使用命令行工具"><a href="#使用命令行工具" class="headerlink" title="使用命令行工具"></a>使用命令行工具</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javac HelloWorld.java</span><br><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure>

<ul>
<li>javac命令启动Java编译器，它将.java文件编译成.class文件。</li>
<li>java命令启动Java虚拟机，虚拟机执行编译器放在class文件中的字节码。</li>
</ul>
<p><strong>注意：使用java命令的时候，编译的程序后面不用加.class后缀</strong></p>
<h2 id="使用集成开发环境"><a href="#使用集成开发环境" class="headerlink" title="使用集成开发环境"></a>使用集成开发环境</h2><p>如JetBrains IntelliJ IDEA</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Core-Java-Fundamentals-Ⅰ</title>
    <url>/2020/03/04/Core-Java-Fundamentals-%E2%85%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p><strong>摘要</strong>：等我有空再写！！！</p>
<a id="more"></a>

<h1 id="第一章-Java程序设计概述"><a href="#第一章-Java程序设计概述" class="headerlink" title="第一章 Java程序设计概述"></a>第一章 Java程序设计概述</h1><h2 id="Java的关键术语"><a href="#Java的关键术语" class="headerlink" title="Java的关键术语"></a>Java的关键术语</h2><ul>
<li>简单性</li>
<li>面向对象</li>
<li>分布式</li>
<li>健壮性</li>
<li>安全性</li>
<li>体系结构中立</li>
<li>可移植性</li>
<li>解释型</li>
<li>高性能</li>
<li>多线程</li>
<li>动态性</li>
</ul>
<h2 id="Java-applet与Internet"><a href="#Java-applet与Internet" class="headerlink" title="Java applet与Internet"></a>Java applet与Internet</h2><p>这里的想法很简单： 用户从 Internet 下载 Java 字节码， 并在自己的机器上运行。在网页中运行的 Java 程序称为 applet。要使用 applet, 需要启用 Java 的 Web 浏览器执行字节码。不需要安装任何软件。<br>任何时候只要访问包含 applet 的网页都会得到程序的最新版本。最重要的是，要感谢虚拟机的安全性，它让我们不必再担心来自恶意代码的攻击。在网页中插人一个 applet 就如同在网页中嵌人一幅图片。<br>applet 会成为页面的一部分。文本环绕着 applet 所占据的空间周围。关键的一点是这个图片是活动的。它可以对用户命令做出响应， 改变外观，在运行它的计算机与提供它的计算机之间传递数据。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode475-506</title>
    <url>/2020/03/03/leetcode475-506/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="LeetCode-探索：发散你的思维"><a href="#LeetCode-探索：发散你的思维" class="headerlink" title="LeetCode 探索：发散你的思维"></a>LeetCode 探索：发散你的思维</h1><a id="more"></a>

<h2 id="475-供暖器"><a href="#475-供暖器" class="headerlink" title="[475] 供暖器"></a>[475] 供暖器</h2><p><strong>冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。</strong></p>
<p><strong>现在，给出位于一条水平线上的房屋和供暖器的位置，找到可以覆盖所有房屋的最小加热半径。</strong></p>
<p><strong>所以，你的输入将会是房屋和供暖器的位置。你将输出供暖器的最小加热半径。</strong></p>
<p><strong>说明:</strong></p>
<ol>
<li><strong>给出的房屋和供暖器的数目是非负数且不会超过 25000。</strong></li>
<li><strong>给出的房屋和供暖器的位置均是非负数且不会超过10^9。</strong></li>
<li><strong>只要房屋位于供暖器的半径内(包括在边缘上)，它就可以得到供暖。</strong></li>
<li><strong>所有供暖器都遵循你的半径标准，加热的半径也一样。</strong></li>
</ol>
<blockquote>
<p>首先将houses和heaters两个数组排序，然后对每一个house，寻找一个离它最近的heater，再取每一个最近距离的最大值</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=475 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [475] 供暖器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findRadius</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;houses, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;heaters)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(houses.begin(), houses.end());</span><br><span class="line">        sort(heaters.begin(), heaters.end());</span><br><span class="line">        <span class="keyword">int</span> currMin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; houses.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; heaters.size() &amp;&amp; heaters[j] &lt; houses[i])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = heaters[j] - houses[i];</span><br><span class="line">                currMin = max(currMin, temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &lt; heaters.size())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp1 = houses[i] - heaters[j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">int</span> temp2 = heaters[j] - houses[i];</span><br><span class="line">                currMin = max(currMin, min(temp1, temp2));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == heaters.size())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = <span class="built_in">abs</span>(houses[i] - heaters[j - <span class="number">1</span>]);</span><br><span class="line">                currMin = max(currMin, temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currMin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="476-数字的补数"><a href="#476-数字的补数" class="headerlink" title="[476] 数字的补数"></a>[476] 数字的补数</h2><p><strong>给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。</strong></p>
<blockquote>
<p>解题思路：获取每一位的值累加上去</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=476 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [476] 数字的补数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findComplement</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num)</span><br><span class="line">        &#123;</span><br><span class="line">            res += !(num &amp; <span class="number">1</span>) &lt;&lt; n;</span><br><span class="line">            num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="482-密钥格式化"><a href="#482-密钥格式化" class="headerlink" title="[482] 密钥格式化"></a>[482] 密钥格式化</h2><p><strong>给定一个密钥字符串S，只包含字母，数字以及 ‘-‘（破折号）。N 个 ‘-‘ 将字符串分成了 N+1 组。给定一个数字 K，重新格式化字符串，除了第一个分组以外，每个分组要包含 K 个字符，第一个分组至少要包含 1 个字符。两个分组之间用 ‘-‘（破折号）隔开，并且将所有的小写字母转换为大写字母。</strong></p>
<p><strong>给定非空字符串 S 和数字 K，按照上面描述的规则进行格式化。</strong></p>
<blockquote>
<p>解题思路：从后往前遍历构造，最后将结果尾部的’-‘除去，然后将其反转</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=482 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [482] 密钥格式化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">licenseKeyFormatting</span><span class="params">(<span class="built_in">string</span> S, <span class="keyword">int</span> K)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = S.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; K)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (S[i] != <span class="string">'-'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    res += (<span class="built_in">isalpha</span>(S[i]) != <span class="number">0</span> ? <span class="keyword">char</span>(<span class="built_in">toupper</span>(S[i])) : <span class="keyword">char</span>(S[i]));</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == K)</span><br><span class="line">            &#123;</span><br><span class="line">                res += <span class="string">"-"</span>;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!res.empty() &amp;&amp; res.back() == <span class="string">'-'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(res.begin(), res.end());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="485-最大连续1的个数"><a href="#485-最大连续1的个数" class="headerlink" title="[485] 最大连续1的个数"></a>[485] 最大连续1的个数</h2><p><strong>给定一个二进制数组， 计算其中最大连续1的个数。</strong></p>
<blockquote>
<p>解题思路：使用一个计数器来记录连续1的数量，若数量较大则更新</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=485 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [485] 最大连续1的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> countMax=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==<span class="number">1</span>)</span><br><span class="line">                count++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                countMax = max(countMax,count);</span><br><span class="line">                count=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max(countMax,count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="492-构造矩形"><a href="#492-构造矩形" class="headerlink" title="[492] 构造矩形"></a>[492] 构造矩形</h2><p><strong>作为一位web开发者， 懂得怎样去规划一个页面的尺寸是很重要的。 现给定一个具体的矩形页面面积，你的任务是设计一个长度为 L 和宽度为 W 且满足以下要求的矩形的页面。要求：</strong></p>
<ol>
<li><p><strong>你设计的矩形页面必须等于给定的目标面积。</strong></p>
</li>
<li><p><strong>宽度 W 不应大于长度 L，换言之，要求 L &gt;= W 。</strong></p>
</li>
<li><p><strong>长度 L 和宽度 W 之间的差距应当尽可能小。</strong></p>
</li>
</ol>
<p><strong>你需要按顺序输出你设计的页面的长度 L 和宽度 W。</strong></p>
<blockquote>
<p>解题思路：从L = sqrt(area)开始，递减L，直到area % L == 0为止</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=492 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [492] 构造矩形</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">constructRectangle</span><span class="params">(<span class="keyword">int</span> area)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> w = <span class="built_in">sqrt</span>(area);</span><br><span class="line">        <span class="keyword">while</span> (area % w != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;area / w, w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="[496] 下一个更大元素 I"></a>[496] 下一个更大元素 I</h2><p><strong>给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。</strong></p>
<p><strong>nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。</strong></p>
<blockquote>
<p>解题思路：使用单调栈</p>
<ol>
<li>将元素入栈</li>
<li>当栈不为空时，若将要入栈的元素大于栈顶的元素，则将栈顶元素出栈，并将其(top, num[i])加入哈希表中，直到栈顶元素大于等于入栈元素，或栈为空时退出。</li>
<li>若将要入栈的元素小于栈顶的元素，则简单将其入栈</li>
<li>当数组的元素全部入栈后，若此时栈不为空，则将栈顶元素出栈，并将(top, -1)加入哈希表。</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=496 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [496] 下一个更大元素 I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">nextGreaterElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; table;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stacks;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums2.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stacks.empty() &amp;&amp; nums2[i] &gt; stacks.top())</span><br><span class="line">            &#123;</span><br><span class="line">                table.insert(make_pair(stacks.top(), nums2[i]));</span><br><span class="line">                stacks.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            stacks.push(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stacks.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            table.insert(make_pair(stacks.top(), <span class="number">-1</span>));</span><br><span class="line">            stacks.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(table[nums1[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="500-键盘行"><a href="#500-键盘行" class="headerlink" title="[500] 键盘行"></a>[500] 键盘行</h2><p><strong>给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。</strong></p>
<blockquote>
<p>解题思路：对每一个单词的每一个字母都进行判断在哪一行，若同一个单词在不同行有字母，则退出循环，并判断</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=500 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [500] 键盘行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">findWords</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> patterns[<span class="number">3</span>] = &#123;<span class="string">"qwertyuiopQWERTYUIOP"</span>, <span class="string">"asdfghjklASDFGHJKL"</span>, <span class="string">"zxcvbnmZXCVBNM"</span>&#125;;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> word : words)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> flag[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : word)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (patterns[i].find(c) != <span class="built_in">string</span>::npos)</span><br><span class="line">                        flag[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag[<span class="number">0</span>] + flag[<span class="number">1</span>] + flag[<span class="number">2</span>] &gt; <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag[<span class="number">0</span>] + flag[<span class="number">1</span>] + flag[<span class="number">2</span>] == <span class="number">1</span>)</span><br><span class="line">                res.push_back(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="[501] 二叉搜索树中的众数"></a>[501] 二叉搜索树中的众数</h2><p><strong>给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。</strong></p>
<blockquote>
<p>解题思路：递归，记录父节点的值，再与子节点的值进行比较</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=501 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [501] 二叉搜索树中的众数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    TreeNode *pre;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        travel(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">NULL</span> &amp;&amp; pre-&gt;val == root-&gt;val)</span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (count == maxCount)</span><br><span class="line">            res.push_back(root-&gt;val);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (count &gt; maxCount)</span><br><span class="line">        &#123;</span><br><span class="line">            maxCount = count;</span><br><span class="line">            res.clear();</span><br><span class="line">            res.push_back(root-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        pre = root;</span><br><span class="line">        travel(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        travel(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路：使用Hash-table，注意遍历的时候不要使用下标，要使用迭代器</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(TreeNode *root, <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;table)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        travel(root-&gt;left, table);</span><br><span class="line">        table[root-&gt;val]++;</span><br><span class="line">        travel(root-&gt;right, table);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findMode</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; table;</span><br><span class="line">        travel(root, table);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">int</span> M = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = table.begin(); i != table.end(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            M = max(M, i-&gt;second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = table.begin(); i != table.end(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i-&gt;second == M)</span><br><span class="line">                res.push_back(i-&gt;first);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="504-七进制数"><a href="#504-七进制数" class="headerlink" title="[504] 七进制数"></a>[504] 七进制数</h2><p><strong>给定一个整数，将其转化为7进制，并以字符串形式输出。</strong></p>
<blockquote>
<p>解题思路：将负数换成正数处理，同时需要单独处理0的情况</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=504 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [504] 七进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convertToBase7</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> n = num;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n = -num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str += to_string(n % <span class="number">7</span>);</span><br><span class="line">            n /= <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse(str.begin(), str.end());</span><br><span class="line">        <span class="keyword">return</span> num &gt; <span class="number">0</span> ? str : <span class="string">"-"</span> + str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="506-相对名次"><a href="#506-相对名次" class="headerlink" title="[506] 相对名次"></a>[506] 相对名次</h2><p><strong>给出 N 名运动员的成绩，找出他们的相对名次并授予前三名对应的奖牌。前三名运动员将会被分别授予 “金牌”，“银牌” 和“ 铜牌”（”Gold Medal”, “Silver Medal”, “Bronze Medal”）。</strong></p>
<p><strong>(注：分数越高的选手，排名越靠前。)</strong></p>
<blockquote>
<p>解题思路：使用map的有序特性</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=506 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [506] 相对名次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;n, <span class="keyword">const</span> <span class="keyword">int</span> &amp;m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &gt; m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">findRelativeRanks</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.size();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">res</span><span class="params">(size)</span></span>;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">            table[nums[i]] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = table.begin(); i != table.end(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">1</span>)</span><br><span class="line">                res[i-&gt;second] = <span class="string">"Gold Medal"</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size == <span class="number">2</span>)</span><br><span class="line">                res[i-&gt;second] = <span class="string">"Silver Medal"</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (size == <span class="number">3</span>)</span><br><span class="line">                res[i-&gt;second] = <span class="string">"Bronze Medal"</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res[i-&gt;second] = to_string(size);</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode437-463</title>
    <url>/2020/02/29/leetcode437-463/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="LeetCode-探索：发散你的思维"><a href="#LeetCode-探索：发散你的思维" class="headerlink" title="LeetCode 探索：发散你的思维"></a>LeetCode 探索：发散你的思维</h1><a id="more"></a>

<h2 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="[437] 路径总和 III"></a>[437] 路径总和 III</h2><p><strong>给定一个二叉树，它的每个结点都存放着一个整数值。</strong></p>
<p><strong>找出路径和等于给定数值的路径总数。</strong></p>
<p><strong>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</strong></p>
<p><strong>二叉树不超过1000个节点，且节点数值范围是 [-1000000, 1000000] 的整数。</strong></p>
<blockquote>
<p>解题思路：将路径分为包含root节点和不包含root节点的情况，分别进行递归</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=437 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [437] 路径总和 III</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val; </span></span><br><span class="line"><span class="comment"> *     TreeNode *left; </span></span><br><span class="line"><span class="comment"> *     TreeNode *right; </span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode *root, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当前节点的值等于sum时，则加一</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == sum)</span><br><span class="line">            res++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里为不包含root节点的路径</span></span><br><span class="line">        res += pathSum(root-&gt;left, sum);</span><br><span class="line">        res += pathSum(root-&gt;right, sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包含root节点的路径</span></span><br><span class="line">        <span class="comment">//这里不能直接调用pathSum，这样会造成断开的路径</span></span><br><span class="line">        res += pathSumInclude(root-&gt;left, sum - root-&gt;val);</span><br><span class="line">        res += pathSumInclude(root-&gt;right, sum - root-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pathSumInclude</span><span class="params">(TreeNode *root, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == sum)</span><br><span class="line">            res++; </span><br><span class="line">        res += pathSumInclude(root-&gt;left, sum - root-&gt;val); </span><br><span class="line">        res += pathSumInclude(root-&gt;right, sum - root-&gt;val); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="441-排列硬币"><a href="#441-排列硬币" class="headerlink" title="[441] 排列硬币"></a>[441] 排列硬币</h2><p><strong>你总共有 n 枚硬币，你需要将它们摆成一个阶梯形状，第 k 行就必须正好有 k 枚硬币。</strong></p>
<p><strong>给定一个数字 n，找出可形成完整阶梯行的总行数。</strong></p>
<p><strong>n 是一个非负整数，并且在32位有符号整型的范围内。</strong></p>
<blockquote>
<p>解题思路：使用等差数列的通项公式</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=441 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [441] 排列硬币</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">arrangeCoins</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((i * i + i) / <span class="number">2</span> &gt; n)</span><br><span class="line">                <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((i * i + i) / <span class="number">2</span> == n)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="443-压缩字符串"><a href="#443-压缩字符串" class="headerlink" title="[443] 压缩字符串"></a>[443] 压缩字符串</h2><p><strong>给定一组字符，使用原地算法将其压缩。</strong></p>
<p><strong>压缩后的长度必须始终小于或等于原数组长度。</strong></p>
<p><strong>数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。</strong></p>
<p><strong>在完成原地修改输入数组后，返回数组的新长度。</strong></p>
<blockquote>
<p>解题思路：使用双指针方法，一个read指针和一个write指针，均从左边开始移动</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=443 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [443] 压缩字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用双指针方法，一个read指针和一个write指针，均从左边开始移动</span></span><br><span class="line">    <span class="comment">//anchor指针用于标记相同连续字符子串的第一个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compress</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &amp;chars)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> anchor = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> write = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> read = <span class="number">0</span>; read &lt; chars.size(); read++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当遇到不同的字符或到达字符串末尾时</span></span><br><span class="line">            <span class="keyword">if</span> (read + <span class="number">1</span> == chars.size() || chars[read] != chars[read + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                chars[write++] = chars[anchor];</span><br><span class="line">                <span class="comment">//当相同连续的字符数大于1时</span></span><br><span class="line">                <span class="keyword">if</span> (read &gt; anchor)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> num = to_string(read - anchor + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">char</span> c : num)</span><br><span class="line">                        chars[write++] = c;</span><br><span class="line">                &#125;</span><br><span class="line">                anchor = read + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> write;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="447-回旋镖的数量"><a href="#447-回旋镖的数量" class="headerlink" title="[447] 回旋镖的数量"></a>[447] 回旋镖的数量</h2><p><strong>给定平面上 n 对不同的点，“回旋镖” 是由点表示的元组 (i, j, k) ，其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。</strong></p>
<p><strong>找到所有回旋镖的数量。你可以假设 n 最大为 500，所有点的坐标在闭区间 [-10000, 10000] 中。</strong></p>
<blockquote>
<p>解题思路：使用哈希表，记录相同距离的点的数量</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=447 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [447] 回旋镖的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getDistance</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(p[<span class="number">0</span>] - q[<span class="number">0</span>], <span class="number">2</span>) + <span class="built_in">pow</span>(p[<span class="number">1</span>] - q[<span class="number">1</span>], <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfBoomerangs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;points)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>; </span><br><span class="line">        vector&lt;map&lt;int, int&gt;&gt; dis(points.size()); </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.size() - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; points.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> d = getDistance(points[i], points[j]); </span><br><span class="line">                res += <span class="number">2</span> * (dis[i][d] + dis[j][d]); </span><br><span class="line">                dis[i][d]++; </span><br><span class="line">                dis[j][d]++; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路：使用距离矩阵，预排序</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfBoomerangs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;points)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dis[points.size()][points.size()];</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算距离矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; points.size(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i][j] = <span class="built_in">pow</span>(points[i][<span class="number">0</span>] - points[j][<span class="number">0</span>], <span class="number">2</span>) + <span class="built_in">pow</span>(points[i][<span class="number">1</span>] - points[j][<span class="number">1</span>], <span class="number">2</span>);</span><br><span class="line">                dis[j][i] = dis[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//对距离矩阵预排序</span></span><br><span class="line">            sort(dis[i], dis[i] + points.size());</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; points.size(); ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//对相同距离的点进行计数</span></span><br><span class="line">                <span class="keyword">if</span> (dis[i][j] == dis[i][j - <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//当计数量不为0时，即相同距离的点有两个及以上</span></span><br><span class="line">                    <span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        number += factorial(num + <span class="number">1</span>);</span><br><span class="line">                        num = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                number += factorial(num + <span class="number">1</span>);</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> group = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num; i &gt; <span class="number">2</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            group *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> group;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="[448] 找到所有数组中消失的数字"></a>[448] 找到所有数组中消失的数字</h2><p><strong>给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</strong></p>
<p><strong>找到所有在 [1, n] 范围之间没有出现在数组中的数字。</strong></p>
<p><strong>您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</strong></p>
<blockquote>
<p>解题思路：<br>方法一，使用哈希表。<br>方法二，遍历输入数组的每个元素一次。<br>我们将把 |nums[i]|-1 索引位置的元素标记为负数。即 nums[|nums[i] |- 1] = -|nums[∣nums[i]∣−1]|.<br>然后遍历数组，若当前数组元素 nums[i] 为负数，说明我们在数组中存在数字 i+1。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=448 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [448] 找到所有数组中消失的数字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[<span class="built_in">abs</span>(nums[i]) - <span class="number">1</span>] = -<span class="built_in">abs</span>(nums[<span class="built_in">abs</span>(nums[i]) - <span class="number">1</span>]); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>)</span><br><span class="line">                res.push_back(i + <span class="number">1</span>); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="453-最小移动次数使数组元素相等"><a href="#453-最小移动次数使数组元素相等" class="headerlink" title="[453] 最小移动次数使数组元素相等"></a>[453] 最小移动次数使数组元素相等</h2><p><strong>给定一个长度为 n 的非空整数数组，找到让数组所有元素相等的最小移动次数。每次移动可以使 n - 1 个元素增加 1。</strong></p>
<blockquote>
<p>解题思路：首先，假设我们在每一步计算 diff 之后正在更新有序数组的元素。下面展示如何在不遍历数组的情况下找到最大最小值。在第一步中，最后的元素即为最大值，因此 diff=a[n-1]-a[0]。我们对除了最后一个元素以外所有元素增加 diff。</p>
</blockquote>
<blockquote>
<p>现在，更新后的数组开头元素 a’[0] 变成了 a[0]+diff=a[n-1]。因此，a’[0] 等于上一步中最大的元素 a[n-1]。由于数组排过序，直到 i-2 的元素都满足 a[j]&gt;=a[j-1]。因此，更新之后，a’[n-2] 即为最大元素。而 a[0] 依然是最小元素。</p>
</blockquote>
<blockquote>
<p>于是，在第二次更新时，diff=a[n-2]-a[0]。更新后 a’’[0] 会成为 a’[n-2]，与上一次迭代类似。</p>
</blockquote>
<blockquote>
<p>然后，由于 a’[0] 和 a’[n-1] 相等，在第二次更新后，a’’[0]=a’’[n-1]=a’[n-2]。于是，最大的元素为 a[n-3]。</p>
</blockquote>
<blockquote>
<p>于是，我们可以继续这样，在每一步用最大最小值差更新数组。</p>
</blockquote>
<blockquote>
<p>下面进入第二步。第一步中，我们假设每一步会更新数组 aa 中的元素。但事实上，我们不需要这么做。这是因为，即使是在更新元素之后，我们要登记的 diff 差值也不变，因为 max 和 min 增加的数字相同。</p>
</blockquote>
<blockquote>
<p>于是，我们可以简单的将数组排序一次， $moves=\sum_{i=1}^{n-1} (a[i]-a[0])$。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=453 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [453] 最小移动次数使数组元素相等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> moves = <span class="number">0</span>;</span><br><span class="line">        sort(nums.begin(), nums.end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            moves += (nums[i] - nums[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> moves;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路：该方法基于以下思路：将除了一个元素之外的全部元素+1，等价于将该元素-1，因为我们只对元素的相对大小感兴趣。因此，该问题简化为需要进行的减法次数。</p>
</blockquote>
<blockquote>
<p>显然，我们只需要将所有的数都减到最小的数即可。为了找到答案，我们不需要真的操作这些元素。只需要 $moves=\sum_{i=0}^{n-1} a[i] - min(a)*n$即可，其中 nn 为数组的数量。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=453 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [453] 最小移动次数使数组元素相等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> moves = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            moves += nums[i];</span><br><span class="line">            m = min(m, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> moves - m * nums.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="[455] 分发饼干"></a>[455] 分发饼干</h2><p><strong>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</strong></p>
<blockquote>
<p>解题思路：贪心算法。先对两个数组进行预排序，然后从左到右扫描，对于未分配饼干的需求量最小的孩子分配一个最小最适合的饼干</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=455 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [455] 分发饼干</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;g, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(g.begin(), g.end());</span><br><span class="line">        sort(s.begin(), s.end());</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; s.size() &amp;&amp; s[j] &lt; g[i])</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; s.size())</span><br><span class="line">                count++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="[459] 重复的子字符串"></a>[459] 重复的子字符串</h2><p><strong>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=459 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [459] 重复的子字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (s + s).find(s, <span class="number">1</span>) != s.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="[461] 汉明距离"></a>[461] 汉明距离</h2><p><strong>两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。</strong></p>
<p><strong>给出两个整数 x 和 y，计算它们之间的汉明距离。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=461 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [461] 汉明距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> z = x ^ y;</span><br><span class="line">        <span class="keyword">while</span> (z != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (z &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            z = z &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="463-岛屿的周长"><a href="#463-岛屿的周长" class="headerlink" title="[463] 岛屿的周长"></a>[463] 岛屿的周长</h2><p><strong>给定一个包含 0 和 1 的二维网格地图，其中 1 表示陆地 0 表示水域。</strong></p>
<p><strong>网格中的格子水平和垂直方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</strong></p>
<p><strong>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=463 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [463] 岛屿的周长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;grid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span> || grid[i - <span class="number">1</span>][j] == <span class="number">0</span>)</span><br><span class="line">                        res++;</span><br><span class="line">                    <span class="keyword">if</span> (j == <span class="number">0</span> || grid[i][j - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">                        res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode389-434</title>
    <url>/2020/02/28/leetcode389-434/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="LeetCode-探索：发散你的思维"><a href="#LeetCode-探索：发散你的思维" class="headerlink" title="LeetCode 探索：发散你的思维"></a>LeetCode 探索：发散你的思维</h1><a id="more"></a>

<h2 id="389-找不同"><a href="#389-找不同" class="headerlink" title="[389] 找不同"></a>[389] 找不同</h2><p><strong>给定两个字符串 s 和 t，它们只包含小写字母。</strong></p>
<p><strong>字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。</strong></p>
<p><strong>请找出在 t 中被添加的字母。</strong></p>
<blockquote>
<p>解题思路：使用异或操作，两个字符串中成对的字符进行异或得到0，0再和多出来的一个字符c异或，则得到c</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=389 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [389] 找不同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s)</span><br><span class="line">            res ^= c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : t)</span><br><span class="line">            res ^= c;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="392-判断子序列"><a href="#392-判断子序列" class="headerlink" title="[392] 判断子序列"></a>[392] 判断子序列</h2><p><strong>给定字符串 s 和 t ，判断 s 是否为 t 的子序列。你可以认为 s 和 t 中仅包含英文小写字母。字符串 t 可能会很长（长度 ~= 500, 000），而 s 是个短字符串（长度 &lt;=100）。字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</strong></p>
<blockquote>
<p>解题思路：以-1为起始点，每次从index + 1中找出t是否存在字符s[i]，若不存在，则返回false；循环退出的时候返回true。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=392 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [392] 判断子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSubsequence</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            index = t.find_first_of(s[i], index + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="built_in">string</span>::npos)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="401-二进制手表"><a href="#401-二进制手表" class="headerlink" title="[401] 二进制手表"></a>[401] 二进制手表</h2><p><strong>二进制手表顶部有 4 个 LED 代表小时（0-11），底部的 6 个 LED 代表分钟（0-59）。每个 LED 代表一个 0 或 1，最低位在右侧。给定一个非负整数 n 代表当前 LED 亮着的数量，返回所有可能的时间。</strong></p>
<blockquote>
<p>解题思路：暴力穷举，计算每一个情况出现的1的次数</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=401 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [401] 二进制手表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算数字n的二进制中的1的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接遍历0:00-12:00，看有多少个符合要求的，并将其加入结果</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">readBinaryWatch</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (count(i) == num)</span><br><span class="line">                res.push_back(to_string(i) + <span class="string">":00"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">60</span>; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (count(i) + count(j) == num)</span><br><span class="line">                        res.push_back(to_string(i) + <span class="string">":"</span> + ((j &lt; <span class="number">10</span>) ? <span class="string">"0"</span> + to_string(j) : to_string(j)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路：回溯算法</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">enumerate</span><span class="params">(<span class="keyword">int</span> digit, <span class="keyword">int</span> n, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            ret.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (digit &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">int</span> shift = (<span class="number">1</span> &lt;&lt; digit) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (shift &lt; limit) &#123;</span><br><span class="line">                ret.push_back(shift);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; off = enumerate(digit - <span class="number">1</span>, n, limit);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> high: off) &#123;</span><br><span class="line">            <span class="keyword">int</span> shift = high &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (shift &lt; limit) &#123;</span><br><span class="line">                ret.push_back(shift);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; on = enumerate(digit - <span class="number">1</span>, n - <span class="number">1</span>, limit);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> high: on) &#123;</span><br><span class="line">            <span class="keyword">int</span> shift = (high &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (shift &lt; limit) &#123;</span><br><span class="line">                ret.push_back(shift);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">readBinaryWatch</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = num&lt;<span class="number">4</span>? num: <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=min; i++) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; hour = enumerate(<span class="number">4</span>, i, <span class="number">12</span>);</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; minute = enumerate(<span class="number">6</span>, num - i, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> h: hour) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m: minute) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                        <span class="built_in">string</span> s = to_string(h) + <span class="string">":"</span> + to_string(m);</span><br><span class="line">                        ret.push_back(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">string</span> s = to_string(h) + <span class="string">":0"</span> + to_string(m);</span><br><span class="line">                        ret.push_back(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="[404] 左叶子之和"></a>[404] 左叶子之和</h2><p><strong>计算给定二叉树的所有左叶子之和。</strong></p>
<blockquote>
<p>解题思路：迭代，使用队列对树进行遍历，当队列不为空时，执行循环</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=404 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [404] 左叶子之和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val; </span></span><br><span class="line"><span class="comment"> *     TreeNode *left; </span></span><br><span class="line"><span class="comment"> *     TreeNode *right; </span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;; </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isLeaf</span><span class="params">(TreeNode *node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;left == <span class="literal">NULL</span> &amp;&amp; node-&gt;right == <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode *root)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode *&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            TreeNode *node = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (isLeaf(node-&gt;left))</span><br><span class="line">                    sum += node-&gt;left-&gt;val;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    q.push(node-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">                q.push(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="405-数字转换为十六进制数"><a href="#405-数字转换为十六进制数" class="headerlink" title="[405] 数字转换为十六进制数"></a>[405] 数字转换为十六进制数</h2><p><strong>给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 补码运算 方法。</strong></p>
<p><strong>注意:</strong></p>
<ol>
<li><strong>十六进制中所有字母(a-f)都必须是小写。</strong></li>
<li><strong>十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符’0’来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。</strong></li>
<li><strong>给定的数确保在32位有符号整数范围内。</strong></li>
<li><strong>不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。</strong></li>
</ol>
<blockquote>
<p>解题思路：将int类型转换为unsigned int类型计算，会自动对负数进行补码表示</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=405 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [405] 数字转换为十六进制数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">toHex</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        <span class="built_in">string</span> <span class="built_in">map</span>[<span class="number">16</span>] = &#123;<span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> n = num;</span><br><span class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = n % <span class="number">16</span>;</span><br><span class="line">            n /= <span class="number">16</span>;</span><br><span class="line">            res = <span class="built_in">map</span>[temp] + res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="409-最长回文串"><a href="#409-最长回文串" class="headerlink" title="[409] 最长回文串"></a>[409] 最长回文串</h2><p><strong>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</strong></p>
<p><strong>在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。</strong></p>
<blockquote>
<p>解题思路：使用哈希表</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=409 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [409] 最长回文串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> table[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s)</span><br><span class="line">            table[c]++;</span><br><span class="line">        <span class="keyword">int</span> add = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">65</span>; i &lt;= <span class="number">122</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (table[i] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                    sum += table[i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum += (table[i] - <span class="number">1</span>);</span><br><span class="line">                    add = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum + add;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="412-Fizz-Buzz"><a href="#412-Fizz-Buzz" class="headerlink" title="[412] Fizz Buzz"></a>[412] Fizz Buzz</h2><p><strong>写一个程序，输出从 1 到 n 数字的字符串表示。</strong></p>
<ol>
<li><p><strong>如果 n 是3的倍数，输出“Fizz”；</strong></p>
</li>
<li><p><strong>如果 n 是5的倍数，输出“Buzz”；</strong></p>
</li>
<li><p><strong>如果 n 同时是3和5的倍数，输出 “FizzBuzz”。</strong></p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=412 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [412] Fizz Buzz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">fizzBuzz</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">                res.push_back(<span class="string">"FizzBuzz"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">                res.push_back(<span class="string">"Fizz"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">                res.push_back(<span class="string">"Buzz"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.push_back(to_string(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="414-第三大的数"><a href="#414-第三大的数" class="headerlink" title="[414] 第三大的数"></a>[414] 第三大的数</h2><p><strong>给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。</strong></p>
<blockquote>
<p>解题思路：利用set集合的元素的唯一性和有序性</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=414 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [414] 第三大的数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">table</span><span class="params">(nums.begin(), nums.end())</span></span>;</span><br><span class="line">        <span class="keyword">auto</span> it = table.end();</span><br><span class="line">        <span class="keyword">if</span> (table.size() &gt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            it--;</span><br><span class="line">            it--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *(--it);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解题思路：用三个变量来储存第一第二第三大的数，并同时替换</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=414 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [414] 第三大的数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> first = <span class="number">-2147483653</span>;</span><br><span class="line">        <span class="keyword">long</span> second = <span class="number">-2147483654</span>;</span><br><span class="line">        <span class="keyword">long</span> third = <span class="number">-2147483655</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; first)</span><br><span class="line">            &#123;</span><br><span class="line">                third = second;</span><br><span class="line">                second = first;</span><br><span class="line">                first = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; first &amp;&amp; nums[i] &gt; second)</span><br><span class="line">            &#123;</span><br><span class="line">                third = second;</span><br><span class="line">                second = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; second &amp;&amp; nums[i] &gt; third)</span><br><span class="line">            &#123;</span><br><span class="line">                third = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (third &lt; <span class="number">-2147483648</span>) ? (<span class="keyword">int</span>)first : (<span class="keyword">int</span>)third;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="415-字符串相加"><a href="#415-字符串相加" class="headerlink" title="[415] 字符串相加"></a>[415] 字符串相加</h2><p><strong>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。</strong></p>
<p><strong>注意：</strong></p>
<ol>
<li><strong>num1 和num2 的长度都小于 5100.</strong></li>
<li><strong>num1 和num2 都只包含数字 0-9.</strong></li>
<li><strong>num1 和num2 都不包含任何前导零。</strong></li>
<li><strong>你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。</strong></li>
</ol>
<blockquote>
<p>解题思路：</p>
<ul>
<li>算法流程： 设定 i，j 两指针分别指向 num1，num2 尾部，模拟人工加法；</li>
</ul>
<ul>
<li>计算进位： 计算 carry = tmp // 10，代表当前位相加是否产生进位；</li>
<li>添加当前位： 计算 tmp = n1 + n2 + carry，并将当前位 tmp % 10 添加至 res 头部；</li>
<li>索引溢出处理： 当指针 i或j 走过数字首部后，给 n1，n2 赋值为 00，相当于给 num1，num2 中长度较短的数字前面填 00，以便后续计算。</li>
<li>当遍历完 num1，num2 后跳出循环，并根据 carry 值决定是否在头部添加进位 11，最终返回 res 即可。</li>
</ul>
<ul>
<li>复杂度分析：</li>
</ul>
<ul>
<li>时间复杂度 O(max(M, N))O(max(M, N))：其中 MM，NN 为 22 数字长度，按位遍历一遍数字（以较长的数字为准）；空间复杂度 O(1)O(1)：指针与变量使用常数大小空间。</li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=415 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [415] 字符串相加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addStrings</span><span class="params">(<span class="built_in">string</span> num1, <span class="built_in">string</span> num2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> i = num1.length() - <span class="number">1</span>, j = num2.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = (i &gt;= <span class="number">0</span>) ? num1[i] - <span class="string">'0'</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> n2 = (j &gt;= <span class="number">0</span>) ? num2[j] - <span class="string">'0'</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> temp = n1 + n2 + carry;</span><br><span class="line">            carry = temp / <span class="number">10</span>;</span><br><span class="line">            res = to_string(temp % <span class="number">10</span>) + res;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry == <span class="number">1</span>)</span><br><span class="line">            res = <span class="string">"1"</span> + res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="434-字符串中的单词数"><a href="#434-字符串中的单词数" class="headerlink" title="[434] 字符串中的单词数"></a>[434] 字符串中的单词数</h2><p><strong>统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。</strong></p>
<p><strong>请注意，你可以假定字符串里不包括任何不可打印的字符。</strong></p>
<blockquote>
<p>解题思路：即使用空格分隔字符串，但需要注意头尾的处理</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=434 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [434] 字符串中的单词数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countSegments</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pos = s.find_first_not_of(<span class="string">' '</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> last = s.find_first_of(<span class="string">' '</span>, pos);</span><br><span class="line">        <span class="keyword">while</span> (pos != <span class="built_in">string</span>::npos &amp;&amp; last != <span class="built_in">string</span>::npos)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = s.find_first_not_of(<span class="string">' '</span>, last + <span class="number">1</span>);</span><br><span class="line">            last = s.find_first_of(<span class="string">' '</span>, pos);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pos != <span class="built_in">string</span>::npos &amp;&amp; last == <span class="built_in">string</span>::npos)</span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode349-387</title>
    <url>/2020/02/27/leetcode349-387/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="LeetCode-探索：发散你的思维"><a href="#LeetCode-探索：发散你的思维" class="headerlink" title="LeetCode 探索：发散你的思维"></a>LeetCode 探索：发散你的思维</h1><a id="more"></a>

<h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="[349] 两个数组的交集"></a>[349] 两个数组的交集</h2><p><strong>描述：给定两个数组，编写一个函数来计算它们的交集。</strong></p>
<blockquote>
<p>解题思路：使用哈希表</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=349 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [349] 两个数组的交集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">intersection</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s2;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums1.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s1.insert(nums1[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums2.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s2.insert(nums2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s1.size() &lt; s2.size())</span><br><span class="line">        &#123;</span><br><span class="line">            swap(s1, s2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : s2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1.count(n) != <span class="number">0</span>)</span><br><span class="line">                res.push_back(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="350-两个数组的交集Ⅱ"><a href="#350-两个数组的交集Ⅱ" class="headerlink" title="[350] 两个数组的交集Ⅱ"></a>[350] 两个数组的交集Ⅱ</h2><p><strong>描述：给定两个数组，编写一个函数来计算它们的交集。</strong></p>
<ul>
<li>输出结果中的每个元素一定是唯一的。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<blockquote>
<p>解题思路：使用哈希表</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=350 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [350] 两个数组的交集 II</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">intersect</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1.size() &gt; nums2.size())</span><br><span class="line">            swap(nums1, nums2);</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; table;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums1)</span><br><span class="line">        &#123;</span><br><span class="line">            table[n]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[n] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res.push_back(n);</span><br><span class="line">                table[n]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="[367] 有效的完全平方数"></a>[367] 有效的完全平方数</h2><p><strong>描述：给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。</strong></p>
<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><blockquote>
<p>解题思路：</p>
<ul>
<li>将left设置为2，right设置为num / 2</li>
<li>当left &lt;= right时，mid = (left + right) / 2</li>
<li>比较square = mid * mid与num的大小</li>
</ul>
<ul>
<li>当square比num小时，left = mid + 1</li>
<li>当square比num大时，right = mid - 1</li>
<li>否则，返回true</li>
</ul>
<ul>
<li>当循环退出时，返回false</li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=367 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [367] 有效的完全平方数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> right = num / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid * mid &gt; num)</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mid * mid &lt; num)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="371-两数之和"><a href="#371-两数之和" class="headerlink" title="[371] 两数之和"></a>[371] 两数之和</h2><p><strong>不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。</strong></p>
<blockquote>
<p>解题思路：使用位运算和与运算</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=371 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [371] 两整数之和</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : getSum(a ^ b, ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)a &amp; b) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="374-猜数字大小"><a href="#374-猜数字大小" class="headerlink" title="[374] 猜数字大小"></a>[374] 猜数字大小</h2><p><strong>我们正在玩一个猜数字游戏。 游戏规则如下：</strong><br><strong>我从 1 到 n 选择一个数字。 你需要猜我选择了哪个数字。每次你猜错了，我会告诉你这个数字是大了还是小了。你调用一个预先定义好的接口 guess(int num)，它会返回 3 个可能的结果（-1(小)，1(大) 或 0(猜对了)）</strong></p>
<blockquote>
<p>解题思路：二分查找</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=374 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [374] 猜数字大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="comment">// Forward declaration of guess API.</span></span><br><span class="line"><span class="comment">// @param num, your guess</span></span><br><span class="line"><span class="comment">// @return -1 if my number is lower, 1 if my number is higher, otherwise return 0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">guess</span><span class="params">(<span class="keyword">int</span> num)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二分查找</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">guessNumber</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> right = n;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (guess(mid) == <span class="number">1</span>)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (guess(mid) == <span class="number">-1</span>)</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="[383] 赎金信"></a>[383] 赎金信</h2><p><strong>描述：给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成。如果可以构成，返回 true ；否则返回 false。</strong></p>
<p><strong>(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。)</strong></p>
<blockquote>
<p>解题思路：使用哈希表</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=383 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [383] 赎金信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canConstruct</span><span class="params">(<span class="built_in">string</span> ransomNote, <span class="built_in">string</span> magazine)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ransomNote.length() &gt; magazine.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> maga[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magazine.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            maga[magazine[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ransomNote.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!maga[ransomNote[i]]--)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<h2 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="[387] 字符串中的第一个唯一字符"></a>[387] 字符串中的第一个唯一字符</h2><p><strong>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</strong></p>
<blockquote>
<p>解题思路：使用哈希表</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=387 lang=cpp</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [387] 字符串中的第一个唯一字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> table[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            table[s[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[s[i]] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/27/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=584155&auto=1&height=66"></iframe>

<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">if</span>(n &gt; <span class="number">0</span>){</span><br><span class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span>;</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<svg style="display: none" id="MJX-SVG-global-cache"><defs></defs></svg>]]></content>
  </entry>
</search>
